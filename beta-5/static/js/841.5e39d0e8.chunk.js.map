{"version":3,"file":"static/js/841.5e39d0e8.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/logger/src.ts/index.ts","../node_modules/@ethersproject/logger/src.ts/_version.ts","../node_modules/@ethersproject/bytes/src.ts/_version.ts","../node_modules/@ethersproject/bytes/src.ts/index.ts","../node_modules/@ethersproject/bignumber/src.ts/_version.ts","../node_modules/@ethersproject/bignumber/src.ts/bignumber.ts"],"sourcesContent":["\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n","export const version = \"logger/5.7.0\";\n","export const version = \"bytes/5.7.0\";\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type Bytes = ArrayLike<number>;\n\nexport type BytesLike = Bytes | string;\n\nexport type DataOptions = {\n    allowMissingPrefix?: boolean;\n    hexPad?: \"left\" | \"right\" | null;\n};\n\nexport interface Hexable {\n    toHexString(): string;\n}\n\n\n/*\nexport interface HexString {\n    length: number;\n    substring: (start: number, end?: number) => string;\n\n    [index: number]: string;\n}\n*/\n\nexport type SignatureLike  = {\n    r: string;\n    s?: string;\n    _vs?: string,\n    recoveryParam?: number;\n    v?: number;\n} | BytesLike;\n\nexport interface Signature {\n    r: string;\n\n    s: string;\n    _vs: string,\n\n    recoveryParam: number;\n    v: number;\n\n    yParityAndS: string\n    compact: string;\n}\n\n///////////////////////////////\n\n\nfunction isHexable(value: any): value is Hexable {\n    return !!(value.toHexString);\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n    if (array.slice) { return array; }\n\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    }\n\n    return array;\n}\n\nexport function isBytesLike(value: any): value is BytesLike {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\n\nfunction isInteger(value: number) {\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\n}\n\nexport function isBytes(value: any): value is Bytes {\n    if (value == null) { return false; }\n\n    if (value.constructor === Uint8Array) { return true; }\n    if (typeof(value) === \"string\") { return false; }\n    if (!isInteger(value.length) || value.length < 0) { return false; }\n\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\n    }\n    return true;\n}\n\n\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) { result.push(0); }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { value = value.toHexString(); }\n\n    if (isHexString(value)) {\n        let hex = (<string>value).substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n\n    const result = new Uint8Array(length);\n\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n\n    return addSlice(result);\n}\n\nexport function stripZeros(value: BytesLike): Uint8Array {\n    let result: Uint8Array = arrayify(value);\n\n    if (result.length === 0) { return result; }\n\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) { start++ }\n\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n\n    return result;\n}\n\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\n    value = arrayify(value);\n\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\n\n\nexport function isHexString(value: any, length?: number): boolean {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n    if (length && value.length !== 2 + 2 * length) { return false; }\n    return true;\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n            if (hex.length % 2) { hex = \"0\" + hex; }\n            return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n    }\n\n    if (typeof(value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) { return (\"0x0\" + value); }\n        return \"0x\" + value;\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { return value.toHexString(); }\n\n    if (isHexString(value)) {\n        if ((<string>value).length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + (<string>value).substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return (<string>value).toLowerCase();\n    }\n\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n             let v = value[i];\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data: BytesLike) {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n\n    return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\n    }\n\n    offset = 2 + 2 * offset;\n\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n\n    return \"0x\" + data.substring(offset);\n}\n\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\n\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") { return \"0x0\"; }\n    return trimmed;\n}\n\nexport function hexStripZeros(value: BytesLike): string {\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\n\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\n    return \"0x\" + value.substring(offset);\n}\n\nexport function hexZeroPad(value: BytesLike, length: number): string {\n    if (typeof(value) !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n\n    return value;\n}\n\nexport function splitSignature(signature: SignatureLike): Signature {\n\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n\n    if (isBytesLike(signature)) {\n        let bytes: Uint8Array = arrayify(signature);\n\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n\n\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\n        result._vs = hexlify(bytes.slice(32, 64))\n\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) { vs[0] |= 0x80; }\n        const _vs = hexlify(vs);\n\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n\n    return result;\n}\n\nexport function joinSignature(signature: SignatureLike): string {\n    signature = splitSignature(signature);\n\n    return hexlify(concat([\n         signature.r,\n         signature.s,\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\n    ]));\n}\n\n","export const version = \"bignumber/5.7.0\";\n","\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n"],"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_checkNormalize","HEX","Logger","version","Object","defineProperty","this","enumerable","value","writable","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","logger","isHexable","toHexString","isInteger","isBytes","constructor","v","isHexString","match","HexCharacters","hexlify","options","checkSafeUint53","Math","floor","allowMissingPrefix","substring","hexPad","result","BN","_BN","_constructorGuard","MAX_SAFE","_warnedToStringRadix","BigNumber","constructorGuard","_hex","_isBigNumber","freeze","toBigNumber","toBN","fromTwos","toTwos","from","other","add","sub","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","BigInt","e","arguments","type","toHex","anyValue"],"sourceRoot":""}