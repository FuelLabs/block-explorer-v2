{"version":3,"file":"static/js/441.c32ce0c7.chunk.js","mappings":"2QAIMA,EAAiB,CAAC,EAUXC,GAA8BC,EAAAA,EAAAA,IAAG,g8BAkEjCC,GAAqCD,EAAAA,EAAAA,IAAG,6OAa/CD,G,4CC1FOG,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAY,qSCCxBE,EAAYF,EAAAA,GAAAA,QAAc,sBAE1BG,EAAUH,EAAAA,GAAAA,IAAU,kLAWpBI,EAAQJ,EAAAA,GAAAA,GAAS,0LAUjBK,EAAWL,EAAAA,GAAAA,KAAW,6KAUtBM,GAAaN,EAAAA,EAAAA,IAAOD,EAAPC,CAAiB,6XA0D9BO,IAjCkBP,EAAAA,EAAAA,IAAOD,EAAPC,CAAiB,0GASzBA,EAAAA,GAAAA,KAAW,gIAUVA,EAAAA,EAAAA,IAAOD,EAAPC,CAAiB,4NAcCA,EAAAA,GAAAA,KAAW,4C,SCxDtC,SAASQ,IAEtB,IAAQC,GAAUC,EAAAA,EAAAA,MAAVD,MACAE,EHqEH,SAAuCC,GACtC,IAAMC,GAAO,kBAAOlB,GAAmBiB,GACvC,OAAOE,EAAAA,EAAiFhB,EAAoCe,EAC9H,CGxEaE,CAA8B,CAC7CC,UAAW,CAAEC,OAAQC,EAAAA,GAAAA,KAAeT,GAAOU,cADrCR,KAGFS,EAAS,OAAJT,QAAI,IAAJA,OAAI,EAAJA,EAAMF,MAEjB,OACE,iCACE,SAACY,EAAA,EAAM,KACP,SAACnB,EAAS,WACR,UAACC,EAAO,YACN,SAACC,EAAK,gCACN,SAACC,EAAQ,4BAAaI,MACtB,SAACa,EAAY,CAACC,cAAgB,OAAFH,QAAE,IAAFA,OAAE,EAAFA,EAAIG,eAAgB,YAK1D,CAEA,SAASD,EAAa,GAAiE,IAA/DC,EAAY,EAAZA,aAKtB,OACE,UAAC,KAAc,YACb,UAAC,KAAsB,YACrB,SAAC,KAAkB,4BACnB,SAAC,KAAyB,WACxB,UAAC,KAAgB,uBAEf,SAAChB,EAA0B,gBAA+B,YAE1D,SAACA,EAA0B,gBAA+B,yBAKhE,SAAC,KAAY,WACX,UAAC,KAAK,YACJ,4BACE,UAAC,KAAY,YACX,SAAC,KAAa,uBACd,SAAC,KAAa,oBACd,SAAC,KAAa,mBACd,SAAC,KAAa,yBAGlB,2BACGgB,EAAaC,KAAI,SAACC,GAAW,aAC5B,UAAC,KAAQ,YACP,SAAC,KAAS,WACR,SAACnB,EAAU,CAACoB,GAAE,uBAAkBD,EAAYE,IAAK,SAAEF,EAAYE,QAEjE,UAAC,KAAS,WACPF,EAAYG,UAAY,SACxBH,EAAYI,UAAY,SACxBJ,EAAYK,QAAU,WAEzB,SAAC,KAAS,WAAEC,EAAAA,EAAAA,IAAqCN,MACjD,SAAC,KAAS,UACW,QADX,EACPA,EAAYO,cAAM,aAAlB,EAAoBR,KAAI,SAACS,EAAOC,GAAG,OACjC,WACC,OAAQD,EAAME,YACZ,IAAK,YACH,OACE,UAAC,KAA6B,YAC5B,SAAC,KAAW,CAACT,GAAE,mBAAcO,EAAMG,OAAQ,UACxCC,EAAAA,EAAAA,IAAYJ,EAAMG,UAErB,UAAC,KAA0B,CACzBE,QAAS,YAnDnB,SAACC,GACnBC,UAAUC,UAAUC,UAAUH,EAChC,CAkDgCI,CAAYV,EAAMG,MACpB,EAAE,WAEF,SAAC,KAAc,KACf,SAAC,IAAO,gCAVwBF,GAexC,IAAK,gBACH,OACE,SAAC,KAAgB,CAAWR,GAAG,GAAE,UAC9BW,EAAAA,EAAAA,IAAYJ,EAAMW,SAASjB,KADPO,GAK3B,QAEE,OAAOD,EAAME,WAGnB,CA/BC,EA+BG,QA3CKV,EAAYE,GA8ChB,aAOzB,C","sources":["pages/BlockTransactionsPage/__generated__/operations.ts","components/Link/components.tsx","pages/BlockTransactionsPage/components.tsx","pages/BlockTransactionsPage/index.tsx"],"sourcesContent":["import type * as Types from '../../../api/__generated__/types.js';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type BlockTransactionsPageQueryVariables = Types.Exact<{\n  height?: Types.InputMaybe<Types.Scalars['U32']>;\n}>;\n\n\nexport type BlockTransactionsPageQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, header: { __typename: 'Header', height: string, time: string }, transactions: Array<{ __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, maturity?: string | null, isScript: boolean, isCreate: boolean, isMint: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null }> } | null };\n\nexport type BlockTransactionFragment = { __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, maturity?: string | null, isScript: boolean, isCreate: boolean, isMint: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const BlockTransactionFragmentDoc = gql`\n    fragment BlockTransactionFragment on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  maturity\n  isScript\n  isCreate\n  isMint\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      owner\n    }\n    ... on InputContract {\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const BlockTransactionsPageQueryDocument = gql`\n    query BlockTransactionsPageQuery($height: U32) {\n  block(height: $height) {\n    id\n    header {\n      height\n      time\n    }\n    transactions {\n      ...BlockTransactionFragment\n    }\n  }\n}\n    ${BlockTransactionFragmentDoc}`;\n\n/**\n * __useBlockTransactionsPageQuery__\n *\n * To run a query within a React component, call `useBlockTransactionsPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockTransactionsPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockTransactionsPageQuery({\n *   variables: {\n *      height: // value for 'height'\n *   },\n * });\n */\nexport function useBlockTransactionsPageQuery(baseOptions?: Apollo.QueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n      }\nexport function useBlockTransactionsPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n        }\nexport type BlockTransactionsPageQueryHookResult = ReturnType<typeof useBlockTransactionsPageQuery>;\nexport type BlockTransactionsPageQueryLazyQueryHookResult = ReturnType<typeof useBlockTransactionsPageQueryLazyQuery>;\nexport type BlockTransactionsPageQueryQueryResult = Apollo.QueryResult<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const GreenLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #58c09b;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n","import styled from 'styled-components';\n\nimport { GreenLink } from '../../components/Link/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 8px;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  line-height: 30px;\n  color: #f8fefc;\n  white-space: break-spaces;\n`;\n\nexport const Subtitle = styled.span`\n  margin: 0 0 32px;\n  display: block;\n  font-family: SFProText;\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n`;\n\nexport const TxHashLink = styled(GreenLink)`\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 425px) {\n    max-width: 124px;\n  }\n`;\n\nexport const TxRecipientLink = styled(GreenLink)`\n  display: block;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const TxValue = styled.span`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const CoinLink = styled(GreenLink)`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n  max-width: 80px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const HeadlineTransactionsNumber = styled.span`\n  color: #f8fefc;\n`;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport {\n  Table,\n  TableCell,\n  TableCounterText,\n  TableHeadCell,\n  TableHeadlineContainer,\n  TableHeadlinerContentItem,\n  TableHeadlineTitle,\n  TableHeadRow,\n  TableRow,\n  TableWrapper,\n} from '../../components/Table/components';\nimport { trimAddress } from '../../utils/address';\nimport { getTransactionRelativeTimeDifference } from '../../utils/transaction';\nimport {\n  ContractLinkSkip,\n  CopyButtonIcon,\n  TableContainer,\n  TableHeadlineAddressButton,\n  Tooltip,\n  TransactionFromAddressWrapper,\n  TxRecipient,\n} from '../AddressPage/components';\n\nimport type { BlockTransactionFragment } from './__generated__/operations';\nimport { useBlockTransactionsPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  HeadlineTransactionsNumber,\n  Subtitle,\n  Title,\n  TxHashLink,\n} from './components';\n\nexport default function BlockTransactionsPage() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { block } = useParams() as any;\n  const { data } = useBlockTransactionsPageQuery({\n    variables: { height: BigNumber.from(block).toString() },\n  });\n  const bl = data?.block;\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <Title>Transaction list</Title>\n          <Subtitle>{`Block: #${block}`}</Subtitle>\n          <Transactions transactions={bl?.transactions || []} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n\nfunction Transactions({ transactions }: { transactions: BlockTransactionFragment[] }) {\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  return (\n    <TableContainer>\n      <TableHeadlineContainer>\n        <TableHeadlineTitle>Transactions</TableHeadlineTitle>\n        <TableHeadlinerContentItem>\n          <TableCounterText>\n            {`Showing `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` out of `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` transactions`}\n          </TableCounterText>\n        </TableHeadlinerContentItem>\n      </TableHeadlineContainer>\n      <TableWrapper>\n        <Table>\n          <thead>\n            <TableHeadRow>\n              <TableHeadCell>Tx Hash</TableHeadCell>\n              <TableHeadCell>Type</TableHeadCell>\n              <TableHeadCell>Age</TableHeadCell>\n              <TableHeadCell>From</TableHeadCell>\n            </TableHeadRow>\n          </thead>\n          <tbody>\n            {transactions.map((transaction) => (\n              <TableRow key={transaction.id}>\n                <TableCell>\n                  <TxHashLink to={`/transaction/${transaction.id}`}>{transaction.id}</TxHashLink>\n                </TableCell>\n                <TableCell>\n                  {transaction.isScript && 'Script'}\n                  {transaction.isCreate && 'Create'}\n                  {transaction.isMint && 'Mint'}\n                </TableCell>\n                <TableCell>{getTransactionRelativeTimeDifference(transaction)}</TableCell>\n                <TableCell>\n                  {transaction.inputs?.map((input, idx) =>\n                    (() => {\n                      switch (input.__typename) {\n                        case 'InputCoin': {\n                          return (\n                            <TransactionFromAddressWrapper key={idx}>\n                              <TxRecipient to={`/address/${input.owner}`}>\n                                {trimAddress(input.owner)}\n                              </TxRecipient>\n                              <TableHeadlineAddressButton\n                                onClick={() => {\n                                  onClickCopy(input.owner);\n                                }}\n                              >\n                                <CopyButtonIcon />\n                                <Tooltip>Copy Address</Tooltip>\n                              </TableHeadlineAddressButton>\n                            </TransactionFromAddressWrapper>\n                          );\n                        }\n                        case 'InputContract': {\n                          return (\n                            <ContractLinkSkip key={idx} to=\"\">\n                              {trimAddress(input.contract.id)}\n                            </ContractLinkSkip>\n                          );\n                        }\n                        default: {\n                          // @ts-ignore\n                          return input.__typename;\n                        }\n                      }\n                    })()\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      </TableWrapper>\n    </TableContainer>\n  );\n}\n"],"names":["defaultOptions","BlockTransactionFragmentDoc","gql","BlockTransactionsPageQueryDocument","GreenLink","styled","Link","Container","Content","Title","Subtitle","TxHashLink","HeadlineTransactionsNumber","BlockTransactionsPage","block","useParams","data","baseOptions","options","Apollo","useBlockTransactionsPageQuery","variables","height","BigNumber","toString","bl","Header","Transactions","transactions","map","transaction","to","id","isScript","isCreate","isMint","getTransactionRelativeTimeDifference","inputs","input","idx","__typename","owner","trimAddress","onClick","address","navigator","clipboard","writeText","onClickCopy","contract"],"sourceRoot":""}