{"version":3,"file":"static/js/229.ba5065ea.chunk.js","mappings":"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","sources":["components/Table/components.tsx","pages/BlockTransactionsPage/__generated__/operations.ts","components/Link/components.tsx","pages/BlockTransactionsPage/components.tsx","pages/BlockTransactionsPage/index.tsx","utils/address.ts","utils/date.ts","utils/transaction.ts","../node_modules/@ethersproject/bignumber/src.ts/bignumber.ts","../node_modules/@ethersproject/bignumber/src.ts/_version.ts"],"sourcesContent":["import styled from 'styled-components';\n\nimport { StandardSurface } from '../Surface/components';\n\nexport const TableContainer = styled(StandardSurface)`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? '600' : 'normal')};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","import type * as Types from '../../../api/__generated__/types.js';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type BlockTransactionsPageQueryVariables = Types.Exact<{\n  height?: Types.InputMaybe<Types.Scalars['U64']>;\n}>;\n\n\nexport type BlockTransactionsPageQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, header: { __typename: 'Header', height: string, time: string }, transactions: Array<{ __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, gasLimit?: string | null, maturity?: string | null, isScript: boolean, isCreate: boolean, isMint: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null }> } | null };\n\nexport type BlockTransactionFragment = { __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, gasLimit?: string | null, maturity?: string | null, isScript: boolean, isCreate: boolean, isMint: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const BlockTransactionFragmentDoc = gql`\n    fragment BlockTransactionFragment on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  isCreate\n  isMint\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      owner\n    }\n    ... on InputContract {\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const BlockTransactionsPageQueryDocument = gql`\n    query BlockTransactionsPageQuery($height: U64) {\n  block(height: $height) {\n    id\n    header {\n      height\n      time\n    }\n    transactions {\n      ...BlockTransactionFragment\n    }\n  }\n}\n    ${BlockTransactionFragmentDoc}`;\n\n/**\n * __useBlockTransactionsPageQuery__\n *\n * To run a query within a React component, call `useBlockTransactionsPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockTransactionsPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockTransactionsPageQuery({\n *   variables: {\n *      height: // value for 'height'\n *   },\n * });\n */\nexport function useBlockTransactionsPageQuery(baseOptions?: Apollo.QueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n      }\nexport function useBlockTransactionsPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n        }\nexport type BlockTransactionsPageQueryHookResult = ReturnType<typeof useBlockTransactionsPageQuery>;\nexport type BlockTransactionsPageQueryLazyQueryHookResult = ReturnType<typeof useBlockTransactionsPageQueryLazyQuery>;\nexport type BlockTransactionsPageQueryQueryResult = Apollo.QueryResult<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const GreenLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #58c09b;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n","import styled from 'styled-components';\n\nimport { GreenLink } from '../../components/Link/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 8px;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  line-height: 30px;\n  color: #f8fefc;\n  white-space: break-spaces;\n`;\n\nexport const Subtitle = styled.span`\n  margin: 0 0 32px;\n  display: block;\n  font-family: SFProText;\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n`;\n\nexport const TxHashLink = styled(GreenLink)`\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 425px) {\n    max-width: 124px;\n  }\n`;\n\nexport const TxRecipientLink = styled(GreenLink)`\n  display: block;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const TxValue = styled.span`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const CoinLink = styled(GreenLink)`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n  max-width: 80px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const HeadlineTransactionsNumber = styled.span`\n  color: #f8fefc;\n`;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport {\n  Table,\n  TableCell,\n  TableCounterText,\n  TableHeadCell,\n  TableHeadlineContainer,\n  TableHeadlinerContentItem,\n  TableHeadlineTitle,\n  TableHeadRow,\n  TableRow,\n  TableWrapper,\n} from '../../components/Table/components';\nimport { trimAddress } from '../../utils/address';\nimport { getTransactionRelativeTimeDifference } from '../../utils/transaction';\nimport {\n  ContractLinkSkip,\n  CopyButtonIcon,\n  TableContainer,\n  TableHeadlineAddressButton,\n  Tooltip,\n  TransactionFromAddressWrapper,\n  TxRecipient,\n} from '../AddressPage/components';\n\nimport type { BlockTransactionFragment } from './__generated__/operations';\nimport { useBlockTransactionsPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  HeadlineTransactionsNumber,\n  Subtitle,\n  Title,\n  TxHashLink,\n} from './components';\n\nexport default function BlockTransactionsPage() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { block } = useParams() as any;\n  const { data } = useBlockTransactionsPageQuery({\n    variables: { height: BigNumber.from(block).toString() },\n  });\n  const bl = data?.block;\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <Title>Transaction list</Title>\n          <Subtitle>{`Block: #${block}`}</Subtitle>\n          <Transactions transactions={bl?.transactions || []} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n\nfunction Transactions({ transactions }: { transactions: BlockTransactionFragment[] }) {\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  return (\n    <TableContainer>\n      <TableHeadlineContainer>\n        <TableHeadlineTitle>Transactions</TableHeadlineTitle>\n        <TableHeadlinerContentItem>\n          <TableCounterText>\n            {`Showing `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` out of `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` transactions`}\n          </TableCounterText>\n        </TableHeadlinerContentItem>\n      </TableHeadlineContainer>\n      <TableWrapper>\n        <Table>\n          <thead>\n            <TableHeadRow>\n              <TableHeadCell>Tx Hash</TableHeadCell>\n              <TableHeadCell>Type</TableHeadCell>\n              <TableHeadCell>Age</TableHeadCell>\n              <TableHeadCell>From</TableHeadCell>\n            </TableHeadRow>\n          </thead>\n          <tbody>\n            {transactions.map((transaction) => (\n              <TableRow key={transaction.id}>\n                <TableCell>\n                  <TxHashLink to={`/transaction/${transaction.id}`}>{transaction.id}</TxHashLink>\n                </TableCell>\n                <TableCell>\n                  {transaction.isScript && 'Script'}\n                  {transaction.isCreate && 'Create'}\n                  {transaction.isMint && 'Mint'}\n                </TableCell>\n                <TableCell>{getTransactionRelativeTimeDifference(transaction)}</TableCell>\n                <TableCell>\n                  {transaction.inputs?.map((input, idx) =>\n                    (() => {\n                      switch (input.__typename) {\n                        case 'InputCoin': {\n                          return (\n                            <TransactionFromAddressWrapper key={idx}>\n                              <TxRecipient to={`/address/${input.owner}`}>\n                                {trimAddress(input.owner)}\n                              </TxRecipient>\n                              <TableHeadlineAddressButton\n                                onClick={() => {\n                                  onClickCopy(input.owner);\n                                }}\n                              >\n                                <CopyButtonIcon />\n                                <Tooltip>Copy Address</Tooltip>\n                              </TableHeadlineAddressButton>\n                            </TransactionFromAddressWrapper>\n                          );\n                        }\n                        case 'InputContract': {\n                          return (\n                            <ContractLinkSkip key={idx} to=\"\">\n                              {trimAddress(input.contract.id)}\n                            </ContractLinkSkip>\n                          );\n                        }\n                        default: {\n                          // @ts-ignore\n                          return input.__typename;\n                        }\n                      }\n                    })()\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      </TableWrapper>\n    </TableContainer>\n  );\n}\n","import { Address } from 'fuels';\n\nexport const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n\nexport const isValidAddress = (address: string) => {\n  try {\n    return !!Address.fromString(address).toB256();\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const getB56Address = (address: string) => {\n  try {\n    return Address.fromString(address).toB256();\n  } catch (e) {\n    return address;\n  }\n};\n\nexport const getValidTransactionId = (txId: string) => (txId.startsWith('0x') ? txId : '0x');\n","import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { TAI64 } from 'tai64';\n\ndayjs.extend(relativeTime);\n\ntype DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.days} days ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n\nexport const tai64toDayjs = (tai64Timestamp: string) => {\n  const timestamp = TAI64.fromString(tai64Timestamp, 10).toUnix();\n  return dayjs(timestamp * 1000);\n};\n\nexport const tai64toDate = (tai64Timestamp: string) => tai64toDayjs(tai64Timestamp).toDate();\n\nexport const formatDate = (tai64Timestamp: string) => tai64toDayjs(tai64Timestamp).fromNow();\n\nexport const dateToTai64 = (date: Date) =>\n  TAI64.fromUnix(Math.floor(date.getTime() / 1000)).toString(10);\n","// we will need this kind of info in the fuels-wallet txUtils as well\n\nimport type { BlockTransactionFragment } from '../pages/BlockTransactionsPage/__generated__/operations';\n\nimport { tai64toDate, dateDiff, dateDiffRelative, getTextForRelativeTimeDifference } from './date';\n\nexport function getTransactionDate(transaction: Pick<BlockTransactionFragment, 'status'>) {\n  switch (transaction.status?.__typename) {\n    case 'SubmittedStatus':\n    case 'SuccessStatus':\n    case 'FailureStatus':\n      return tai64toDate(transaction.status?.time);\n    default:\n      return undefined;\n  }\n}\n\nexport function getTransactionDateDiff(transaction: BlockTransactionFragment) {\n  const date = getTransactionDate(transaction);\n\n  return date ? dateDiff(new Date(), date) : undefined;\n}\n\nexport function getTransactionRelativeTimeDifference(\n  transaction: Pick<BlockTransactionFragment, 'status'>\n) {\n  const date = getTransactionDate(transaction);\n\n  return date ? getTextForRelativeTimeDifference(dateDiffRelative(new Date(), date)) : undefined;\n}\n","\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n","export const version = \"bignumber/5.7.0\";\n"],"names":["TableContainer","styled","StandardSurface","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","defaultOptions","BlockTransactionFragmentDoc","gql","BlockTransactionsPageQueryDocument","GreenLink","Link","Container","Content","Title","Subtitle","TxHashLink","HeadlineTransactionsNumber","BlockTransactionsPage","block","useParams","data","baseOptions","options","Apollo","useBlockTransactionsPageQuery","variables","height","BigNumber","toString","bl","Header","Transactions","transactions","map","transaction","to","id","isScript","isCreate","isMint","getTransactionRelativeTimeDifference","inputs","input","idx","__typename","owner","trimAddress","onClick","address","navigator","clipboard","writeText","onClickCopy","contract","slice","length","isValidAddress","Address","toB256","e","getB56Address","getValidTransactionId","txId","startsWith","dayjs","relativeTime","dateDiff","date1","date2","seconds","Math","floor","abs","getTime","minutes","hours","days","dateDiffRelative","getTextForRelativeTimeDifference","text","push","join","getTextForTimeDifference","tai64toDayjs","tai64Timestamp","timestamp","TAI64","toUnix","tai64toDate","toDate","getTransactionDate","status","time","getTransactionDateDiff","date","Date","undefined","BN","_BN","logger","Logger","_constructorGuard","MAX_SAFE","_warnedToStringRadix","constructorGuard","hex","throwError","operation","this","_hex","_isBigNumber","Object","freeze","value","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","sub","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","BigInt","arguments","warn","key","type","toHexString","match","toHex","throwArgumentError","String","anyValue","isBytes","hexlify","isHexString","fault","params"],"sourceRoot":""}