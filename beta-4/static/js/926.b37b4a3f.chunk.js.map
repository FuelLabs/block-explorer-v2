{"version":3,"file":"static/js/926.b37b4a3f.chunk.js","mappings":"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","sources":["pages/BlockPage/__generated__/operations.ts","pages/BlockPage/components.tsx","pages/BlockPage/index.tsx","../node_modules/@ethersproject/bignumber/src.ts/bignumber.ts","../node_modules/@ethersproject/bignumber/src.ts/_version.ts"],"sourcesContent":["import type * as Types from '../../../api/__generated__/types.js';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type BlockPageQueryVariables = Types.Exact<{\n  height?: Types.InputMaybe<Types.Scalars['U64']>;\n  previousHeight?: Types.InputMaybe<Types.Scalars['U64']>;\n}>;\n\n\nexport type BlockPageQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, header: { __typename: 'Header', id: string, height: string, time: string, applicationHash: string }, consensus: { __typename: 'Genesis' } | { __typename: 'PoAConsensus', signature: string }, transactions: Array<{ __typename: 'Transaction' }> } | null, previousBlock?: { __typename: 'Block', id: string, header: { __typename: 'Header', id: string, height: string, time: string, applicationHash: string }, consensus: { __typename: 'Genesis' } | { __typename: 'PoAConsensus', signature: string }, transactions: Array<{ __typename: 'Transaction' }> } | null };\n\nexport type BlockPageBlock = { __typename: 'Block', id: string, header: { __typename: 'Header', id: string, height: string, time: string, applicationHash: string }, consensus: { __typename: 'Genesis' } | { __typename: 'PoAConsensus', signature: string }, transactions: Array<{ __typename: 'Transaction' }> };\n\nexport const BlockPageBlockFragmentDoc = gql`\n    fragment BlockPageBlock on Block {\n  id\n  header {\n    id\n    height\n    time\n    applicationHash\n  }\n  consensus {\n    __typename\n    ... on PoAConsensus {\n      signature\n    }\n  }\n  transactions {\n    __typename\n  }\n}\n    `;\nexport const BlockPageQueryDocument = gql`\n    query BlockPageQuery($height: U64, $previousHeight: U64) {\n  block(height: $height) {\n    ...BlockPageBlock\n  }\n  previousBlock: block(height: $previousHeight) {\n    ...BlockPageBlock\n  }\n}\n    ${BlockPageBlockFragmentDoc}`;\n\n/**\n * __useBlockPageQuery__\n *\n * To run a query within a React component, call `useBlockPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockPageQuery({\n *   variables: {\n *      height: // value for 'height'\n *      previousHeight: // value for 'previousHeight'\n *   },\n * });\n */\nexport function useBlockPageQuery(baseOptions?: Apollo.QueryHookOptions<BlockPageQuery, BlockPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<BlockPageQuery, BlockPageQueryVariables>(BlockPageQueryDocument, options);\n      }\nexport function useBlockPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BlockPageQuery, BlockPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<BlockPageQuery, BlockPageQueryVariables>(BlockPageQueryDocument, options);\n        }\nexport type BlockPageQueryHookResult = ReturnType<typeof useBlockPageQuery>;\nexport type BlockPageQueryLazyQueryHookResult = ReturnType<typeof useBlockPageQueryLazyQuery>;\nexport type BlockPageQueryQueryResult = Apollo.QueryResult<BlockPageQuery, BlockPageQueryVariables>;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ArrowIcon } from '../../components/Icons';\nimport { StandardSurface } from '../../components/Surface/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 40px;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  line-height: 30px;\n  color: #f8fefc;\n  white-space: break-spaces;\n\n  @media screen and (max-width: 768px) {\n    margin: 0 0 24px;\n  }\n`;\n\nexport const BlockDataContainer = styled(StandardSurface)`\n  padding: 16px 32px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\n  border: solid 0.5px #808080;\n  border-radius: 8px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 24px;\n  }\n`;\n\nexport const BlockDataRow = styled.div`\n  padding: 12px 0;\n  display: flex;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const RowKeyColumn = styled.div`\n  flex: 0 0 250px;\n  font-family: SFProText;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    flex: 1 1 0;\n  }\n`;\n\nexport const RowValueColumn = styled.div`\n  flex: 1 1 0;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport const ProducerLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const BlockHash = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const BlockNumber = styled.div`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const EtherscanBlockLink = styled.a`\n  margin: 0 0 0 8px;\n  color: #58c09b;\n\n  svg {\n    height: 12px !important;\n    width: 12px !important;\n  }\n`;\n\nexport const AddressesCount = styled.div`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const TransactionsCount = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const BlockHeightContainer = styled.div`\n  display: flex;\n  align-items: center;\n\n  @media screen and (max-width: 768px) {\n    margin: 4px 0 0;\n  }\n`;\n\nexport const BlockHeight = styled.div`\n  margin: 0 12px;\n  text-align: center;\n  font-family: SFProText;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n`;\n\nexport const BlockNavigationButton = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 14px;\n  height: 14px;\n  justify-content: center;\n  border-radius: 2px;\n  border: solid 0.2px #58c09b;\n  background-color: #03261e;\n  color: #58c09b;\n\n  :hover {\n    box-shadow: 0 0 2px 0 #58c09b;\n  }\n`;\n\nexport const BlockNavigationIcon = styled(ArrowIcon)<{ rotate?: boolean }>`\n  width: 6px !important;\n  height: 6px !important;\n  transform: ${({ rotate }) => (rotate ? 'rotate(180deg)' : 'none')};\n`;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { Signer } from 'fuels';\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\n\nimport { useBlockPageQuery } from './__generated__/operations';\nimport {\n  BlockDataContainer,\n  BlockDataRow,\n  BlockHash,\n  BlockHeight,\n  BlockHeightContainer,\n  BlockNavigationButton,\n  BlockNavigationIcon,\n  Container,\n  Content,\n  ProducerLink,\n  RowKeyColumn,\n  Title,\n  TransactionsCount,\n} from './components';\n\nexport default function BlockPage() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const { block } = useParams() as any;\n\n  const { data, loading } = useBlockPageQuery({\n    variables: {\n      height: BigNumber.from(block).toString(),\n      previousHeight: BigNumber.from(block).sub(1).toString(),\n    },\n  });\n\n  const bl = data?.block;\n  const prevBl = data?.previousBlock;\n\n  const headerId = bl?.header?.id;\n  const consensusSignature = useMemo(() => {\n    switch (bl?.consensus.__typename) {\n      case 'PoAConsensus':\n        return bl?.consensus?.signature;\n      default:\n        return '';\n    }\n  }, [bl?.consensus]);\n\n  const producerAddress = useMemo(() => {\n    if (headerId && consensusSignature) {\n      return Signer.recoverAddress(headerId, consensusSignature).toString();\n    }\n\n    return '';\n  }, [headerId, consensusSignature]);\n\n  if (loading)\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <Title>{`Block:  #${block}`}</Title>\n            Loading\n          </Content>\n        </Container>\n      </>\n    );\n\n  if (!bl)\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <Title>{`Block:  #${block}`}</Title>\n            Not found\n          </Content>\n        </Container>\n      </>\n    );\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <Title>{`Block:  #${block}`}</Title>\n          <BlockDataContainer>\n            <BlockDataRow>\n              <RowKeyColumn>Block height:</RowKeyColumn>\n              <BlockHeightContainer>\n                <BlockNavigationButton to={`/block/${parseInt(block, 10) - 1}`}>\n                  <BlockNavigationIcon rotate />\n                </BlockNavigationButton>\n                <BlockHeight>{bl.header.height}</BlockHeight>\n                <BlockNavigationButton to={`/block/${parseInt(block, 10) + 1}`}>\n                  <BlockNavigationIcon />\n                </BlockNavigationButton>\n              </BlockHeightContainer>\n            </BlockDataRow>\n            <BlockDataRow>\n              <RowKeyColumn>Block producer:</RowKeyColumn>\n              <ProducerLink to={`/address/${producerAddress}`}>{producerAddress}</ProducerLink>\n            </BlockDataRow>\n            <BlockDataRow>\n              <RowKeyColumn>Previous block hash:</RowKeyColumn>\n              <BlockHash to={`/block/${prevBl?.header.height}`}>{prevBl?.id}</BlockHash>\n            </BlockDataRow>\n            <BlockDataRow>\n              <RowKeyColumn>Number of transactions:</RowKeyColumn>\n              <TransactionsCount to={`/block/${block}/transactions`}>\n                {bl.transactions?.length}\n              </TransactionsCount>\n            </BlockDataRow>\n          </BlockDataContainer>\n        </Content>\n      </Container>\n    </>\n  );\n}\n","\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n","export const version = \"bignumber/5.7.0\";\n"],"names":["defaultOptions","BlockPageBlockFragmentDoc","gql","BlockPageQueryDocument","Container","styled","Content","Title","BlockDataContainer","StandardSurface","BlockDataRow","RowKeyColumn","ProducerLink","Link","BlockHash","TransactionsCount","BlockHeightContainer","BlockHeight","BlockNavigationButton","BlockNavigationIcon","ArrowIcon","rotate","BlockPage","block","useParams","baseOptions","options","Apollo","useBlockPageQuery","variables","height","BigNumber","toString","previousHeight","sub","data","loading","bl","prevBl","previousBlock","headerId","header","id","consensusSignature","useMemo","consensus","__typename","signature","producerAddress","Signer","Header","to","parseInt","transactions","length","BN","_BN","logger","Logger","_constructorGuard","MAX_SAFE","_warnedToStringRadix","constructorGuard","hex","throwError","operation","this","_hex","_isBigNumber","Object","freeze","value","toBigNumber","toBN","fromTwos","toTwos","from","substring","other","add","isZero","throwFault","div","mul","isNeg","umod","pow","isNegative","and","or","xor","maskn","shln","shrn","eq","lt","lte","gt","gte","toNumber","error","BigInt","e","arguments","warn","key","type","toHexString","match","toHex","throwArgumentError","String","anyValue","isBytes","hexlify","isHexString","fault","params"],"sourceRoot":""}