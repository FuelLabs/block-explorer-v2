{"version":3,"file":"static/js/729.942e9713.chunk.js","mappings":"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AEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,kEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,sEAINP,IAAK,CACHzK,IAAK,EACLgL,OAAQ,CACN,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,iEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,kEACA,oEAEF,CACE,mEACA,mEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAEF,CACE,mEACA,oEAE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AAa,IAAR6N,GACXA,IAAU,C,CAKlB,IAAK,IAAIe,EAAI,EAAGrQ,EAAMqQ,KAAOvL,KAAKosF,SAAW7gF,EAAIrQ,EAAMe,OAAS,IAAKsP,EACjEhH,EAAM5H,KAAK,GAGf,OAAOP,EAAAA,EAAAA,IAAS,IAAIR,WAAW2I,EAAM8nF,WACzC,KAAC,EA1Fa,GA8FZC,IADS,IAAIN,GAAM,oCACV,IAAIA,GAAM,+DCzIZO,GAAU,CACrB,UACA,UACA,OACA,QACA,QACA,SACA,SACA,WACA,SACA,QACA,SACA,WACA,UACA,SACA,UACA,OACA,WACA,UACA,SACA,MACA,SACA,QACA,UACA,SACA,QACA,MACA,SACA,UACA,SACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,SACA,QACA,MACA,QACA,QACA,QACA,MACA,MACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,QACA,QACA,SACA,QACA,QACA,UACA,OACA,QACA,SACA,UACA,UACA,QACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,UACA,MACA,QACA,UACA,SACA,QACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,MACA,QACA,QACA,OACA,SACA,UACA,SACA,SACA,QACA,MACA,WACA,SACA,UACA,MACA,SACA,UACA,QACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,QACA,SACA,OACA,SACA,OACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,OACA,OACA,WACA,QACA,QACA,MACA,UACA,UACA,OACA,SACA,SACA,SACA,MACA,SACA,UACA,SACA,OACA,QACA,SACA,SACA,QACA,OACA,SACA,UACA,SACA,OACA,SACA,QACA,SACA,SACA,UACA,QACA,OACA,QACA,UACA,OACA,SACA,SACA,UACA,SACA,UACA,MACA,OACA,OACA,UACA,OACA,QACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,QACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,SACA,SACA,MACA,MACA,UACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,SACA,QACA,QACA,WACA,SACA,SACA,QACA,UACA,QACA,QACA,SACA,QACA,SACA,UACA,QACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,QACA,MACA,WACA,OACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,OACA,OACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,UACA,UACA,UACA,MACA,SACA,OACA,QACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,SACA,MACA,UACA,QACA,WACA,SACA,SACA,QACA,UACA,OACA,UACA,SACA,SACA,SACA,UACA,SACA,UACA,QACA,QACA,WACA,SACA,QACA,UACA,SACA,QACA,OACA,QACA,QACA,SACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,SACA,SACA,UACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,OACA,QACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,SACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,OACA,UACA,QACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,WACA,UACA,WACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,QACA,SACA,QACA,SACA,QACA,OACA,QACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,UACA,QACA,QACA,SACA,OACA,QACA,SACA,QACA,UACA,QACA,SACA,UACA,SACA,QACA,MACA,UACA,OACA,UACA,MACA,WACA,UACA,UACA,UACA,QACA,UACA,SACA,OACA,QACA,MACA,SACA,OACA,QACA,SACA,SACA,OACA,WACA,OACA,MACA,OACA,SACA,SACA,SACA,WACA,SACA,UACA,WACA,WACA,OACA,UACA,SACA,OACA,SACA,QACA,UACA,SACA,SACA,SACA,UACA,OACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,SACA,SACA,OACA,UACA,UACA,SACA,SACA,UACA,SACA,SACA,UACA,OACA,UACA,QACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,SACA,WACA,SACA,OACA,WACA,WACA,UACA,OACA,UACA,WACA,UACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,MACA,OACA,UACA,SACA,SACA,SACA,QACA,OACA,OACA,SACA,OACA,QACA,SACA,QACA,UACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,OACA,UACA,UACA,OACA,OACA,UACA,SACA,MACA,QACA,SACA,QACA,QACA,WACA,UACA,UACA,WACA,WACA,QACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,QACA,SACA,QACA,MACA,UACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,QACA,SACA,SACA,SACA,SACA,SACA,QACA,SACA,QACA,WACA,UACA,QACA,QACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,UACA,SACA,UACA,SACA,WACA,OACA,QACA,SACA,QACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,QACA,MACA,UACA,SACA,OACA,UACA,OACA,QACA,QACA,OACA,QACA,OACA,SACA,SACA,MACA,QACA,UACA,OACA,UACA,MACA,QACA,SACA,UACA,QACA,WACA,UACA,WACA,UACA,MACA,OACA,OACA,SACA,QACA,WACA,QACA,QACA,MACA,QACA,UACA,QACA,SACA,OACA,OACA,SACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,QACA,SACA,OACA,MACA,UACA,MACA,OACA,QACA,QACA,OACA,SACA,OACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,QACA,MACA,OACA,QACA,MACA,OACA,OACA,SACA,OACA,OACA,QACA,SACA,SACA,OACA,UACA,QACA,UACA,SACA,SACA,QACA,MACA,UACA,QACA,WACA,QACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,OACA,SACA,SACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,SACA,SACA,UACA,MACA,OACA,OACA,SACA,QACA,OACA,UACA,SACA,QACA,SACA,UACA,UACA,QACA,QACA,OACA,SACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,OACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,MACA,MACA,QACA,OACA,OACA,SACA,UACA,OACA,QACA,SACA,OACA,QACA,UACA,MACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,WACA,SACA,QACA,SACA,OACA,MACA,OACA,SACA,OACA,OACA,OACA,MACA,OACA,UACA,QACA,SACA,OACA,OACA,UACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,QACA,WACA,OACA,QACA,OACA,QACA,MACA,OACA,QACA,SACA,QACA,UACA,SACA,OACA,SACA,QACA,OACA,UACA,SACA,MACA,OACA,OACA,WACA,OACA,SACA,MACA,UACA,UACA,QACA,UACA,UACA,SACA,SACA,SACA,UACA,UACA,OACA,UACA,SACA,WACA,QACA,WACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,QACA,WACA,QACA,UACA,SACA,SACA,SACA,UACA,UACA,SACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,UACA,QACA,OACA,QACA,SACA,SACA,MACA,OACA,UACA,QACA,QACA,QACA,MACA,OACA,OACA,UACA,MACA,QACA,QACA,OACA,SACA,SACA,OACA,OACA,WACA,OACA,OACA,UACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,MACA,UACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,QACA,SACA,OACA,OACA,OACA,WACA,SACA,QACA,QACA,QACA,QACA,UACA,OACA,MACA,OACA,UACA,QACA,OACA,SACA,OACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,UACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,UACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,SACA,OACA,SACA,OACA,OACA,UACA,QACA,OACA,QACA,SACA,OACA,OACA,UACA,OACA,SACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,SACA,SACA,UACA,MACA,QACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,QACA,UACA,SACA,QACA,SACA,QACA,SACA,SACA,SACA,WACA,OACA,OACA,SACA,QACA,WACA,OACA,SACA,SACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,QACA,QACA,SACA,OACA,SACA,SACA,UACA,OACA,QACA,QACA,QACA,QACA,OACA,UACA,QACA,SACA,SACA,WACA,OACA,UACA,QACA,OACA,UACA,QACA,SACA,UACA,SACA,SACA,OACA,UACA,MACA,QACA,UACA,SACA,QACA,SACA,MACA,SACA,UACA,SACA,UACA,QACA,OACA,QACA,OACA,UACA,WACA,SACA,SACA,QACA,WACA,QACA,OACA,QACA,OACA,SACA,OACA,WACA,SACA,SACA,WACA,QACA,OACA,SACA,SACA,UACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,SACA,OACA,OACA,OACA,WACA,UACA,UACA,SACA,QACA,OACA,MACA,UACA,UACA,QACA,OACA,OACA,OACA,QACA,QACA,QACA,UACA,SACA,SACA,QACA,OACA,UACA,OACA,UACA,SACA,QACA,MACA,UACA,SACA,QACA,MACA,MACA,OACA,SACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,OACA,MACA,QACA,SACA,QACA,MACA,OACA,MACA,QACA,UACA,OACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,QACA,SACA,WACA,SACA,UACA,QACA,UACA,QACA,SACA,UACA,OACA,OACA,OACA,MACA,QACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,SACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,SACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,SACA,UACA,QACA,OACA,UACA,QACA,SACA,OACA,UACA,UACA,MACA,UACA,SACA,SACA,SACA,UACA,SACA,SACA,MACA,QACA,QACA,SACA,WACA,QACA,SACA,UACA,QACA,MACA,SACA,OACA,QACA,OACA,UACA,OACA,SACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,UACA,UACA,WACA,WACA,OACA,SACA,UACA,UACA,SACA,QACA,WACA,SACA,UACA,SACA,UACA,UACA,SACA,UACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,UACA,UACA,UACA,SACA,UACA,UACA,UACA,QACA,WACA,UACA,UACA,QACA,UACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,QACA,QACA,WACA,SACA,UACA,QACA,OACA,MACA,SACA,UACA,UACA,UACA,UACA,WACA,QACA,OACA,OACA,QACA,SACA,UACA,OACA,OACA,QACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,QACA,QACA,OACA,OACA,SACA,QACA,MACA,QACA,QACA,OACA,SACA,QACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,OACA,SACA,WACA,SACA,SACA,SACA,QACA,OACA,SACA,SACA,SACA,UACA,SACA,UACA,SACA,WACA,SACA,WACA,WACA,SACA,SACA,UACA,SACA,UACA,SACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,OACA,SACA,OACA,SACA,QACA,QACA,OACA,QACA,QACA,SACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,MACA,SACA,UACA,OACA,OACA,QACA,SACA,QACA,OACA,SACA,OACA,SACA,OACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,UACA,QACA,SACA,SACA,UACA,WACA,WACA,QACA,QACA,SACA,SACA,QACA,MACA,SACA,SACA,OACA,SACA,SACA,UACA,WACA,OACA,OACA,UACA,SACA,OACA,UACA,SACA,QACA,WACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,QACA,UACA,QACA,OACA,QACA,UACA,SACA,QACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,WACA,QACA,SACA,QACA,UACA,MACA,UACA,OACA,OACA,QACA,QACA,OACA,SACA,OACA,QACA,SACA,UACA,SACA,QACA,OACA,QACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,OACA,SACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,QACA,UACA,QACA,WACA,QACA,UACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,QACA,OACA,SACA,QACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,SACA,UACA,WACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,SACA,SACA,SACA,WACA,UACA,QACA,UACA,QACA,UACA,SACA,SACA,UACA,OACA,SACA,SACA,QACA,UACA,OACA,SACA,MACA,QACA,SACA,QACA,SACA,UACA,OACA,UACA,QACA,WACA,WACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,QACA,SACA,UACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,OACA,QACA,SACA,OACA,QACA,OACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,QACA,SACA,QACA,QACA,UACA,SACA,OACA,QACA,OACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,QACA,UACA,QACA,UACA,MACA,WACA,SACA,QACA,SACA,WACA,OACA,SACA,UACA,OACA,QACA,MACA,QACA,SACA,QACA,UACA,WACA,OACA,QACA,UACA,SACA,QACA,OACA,MACA,QACA,QACA,UACA,SACA,QACA,WACA,OACA,QACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,UACA,QACA,OACA,QACA,UACA,QACA,QACA,MACA,OACA,UACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,QACA,MACA,OACA,UACA,OACA,WACA,SACA,UACA,QACA,UACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,OACA,WACA,UACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,OACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,UACA,QACA,UACA,SACA,SACA,QACA,QACA,SACA,QACA,MACA,SACA,QACA,UACA,OACA,QACA,UACA,SACA,SACA,UACA,QACA,OACA,SACA,UACA,OACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,UACA,UACA,SACA,UACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,UACA,MACA,UACA,UACA,QACA,UACA,OACA,MACA,QACA,OACA,QACA,QACA,OACA,QACA,OACA,UACA,OACA,QACA,OACA,OACA,OACA,MACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,SACA,OACA,OACA,UACA,OACA,QACA,SACA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,UACA,QACA,QACA,QACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,OACA,OACA,OCz/DK,SAAS7tC,GAAY8tC,GAI1B,IAHA,IAAMvnF,EAAMunF,EAAKltF,UAAU,QAErB/C,EAAS,GACNL,EAAI,EAAGA,EAAI+I,EAAIhJ,OAAQC,GAAK,EAAG,CACtC,IAAM4H,EAAImB,EAAIlB,WAAW7H,GAEzB,GAAI4H,EAAI,IACNvH,EAAOI,KAAKmH,QACP,GAAIA,EAAI,KACbvH,EAAOI,KAAMmH,GAAK,EAAK,KACvBvH,EAAOI,KAAU,GAAJmH,EAAY,UACpB,GAAqB,SAAZ,MAAJA,GAAwB,CAClC5H,GAA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","sources":["../node_modules/@ethersproject/bytes/src.ts/index.ts","../node_modules/@ethersproject/bytes/src.ts/_version.ts","../node_modules/@ethersproject/logger/src.ts/index.ts","../node_modules/@ethersproject/logger/src.ts/_version.ts","../node_modules/bech32/dist/index.js","../node_modules/bn.js/lib/bn.js","../node_modules/brorand/index.js","../node_modules/cross-fetch/dist/browser-ponyfill.js","../node_modules/elliptic/lib/elliptic.js","../node_modules/elliptic/lib/elliptic/curve/base.js","../node_modules/elliptic/lib/elliptic/curve/edwards.js","../node_modules/elliptic/lib/elliptic/curve/index.js","../node_modules/elliptic/lib/elliptic/curve/mont.js","../node_modules/elliptic/lib/elliptic/curve/short.js","../node_modules/elliptic/lib/elliptic/curves.js","../node_modules/elliptic/lib/elliptic/ec/index.js","../node_modules/elliptic/lib/elliptic/ec/key.js","../node_modules/elliptic/lib/elliptic/ec/signature.js","../node_modules/elliptic/lib/elliptic/eddsa/index.js","../node_modules/elliptic/lib/elliptic/eddsa/key.js","../node_modules/elliptic/lib/elliptic/eddsa/signature.js","../node_modules/elliptic/lib/elliptic/precomputed/secp256k1.js","../node_modules/elliptic/lib/elliptic/utils.js","../node_modules/elliptic/node_modules/bn.js/lib/bn.js","../node_modules/graphql-request/src/createRequestBody.ts","../node_modules/graphql-request/src/defaultJsonSerializer.ts","../node_modules/graphql-request/src/graphql-ws.ts","../node_modules/graphql-request/src/index.ts","../node_modules/graphql-request/src/parseArgs.ts","../node_modules/graphql-request/src/types.ts","../node_modules/graphql-request/node_modules/extract-files/public/ReactNativeFile.js","../node_modules/graphql-request/node_modules/extract-files/public/extractFiles.js","../node_modules/graphql-request/node_modules/extract-files/public/index.js","../node_modules/graphql-request/node_modules/extract-files/public/isExtractableFile.js","../node_modules/graphql-request/node_modules/form-data/lib/browser.js","../node_modules/hash.js/lib/hash.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hmac-drbg/lib/hmac-drbg.js","../node_modules/inherits/inherits_browser.js","../node_modules/lodash.clonedeep/index.js","../node_modules/lodash.upperfirst/index.js","../node_modules/minimalistic-assert/index.js","../node_modules/minimalistic-crypto-utils/lib/utils.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/checkPrivateRedeclaration.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classExtractFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js","../node_modules/@babel/runtime/helpers/esm/classApplyDescriptorGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js","../node_modules/@babel/runtime/helpers/esm/classApplyDescriptorSet.js","../node_modules/@babel/runtime/helpers/esm/wrapRegExp.js","../node_modules/@fuel-ts/versions/src/index.ts","../node_modules/@fuel-ts/versions/src/lib/getSupportedVersions.ts","../node_modules/@fuel-ts/math/src/bn.ts","../node_modules/@fuel-ts/math/src/configs.ts","../node_modules/@fuel-ts/math/src/decimal.ts","../node_modules/@fuel-ts/math/src/functional.ts","../node_modules/@fuel-ts/math/src/math.ts","../node_modules/@ethersproject/strings/src.ts/_version.ts","../node_modules/@ethersproject/strings/src.ts/utf8.ts","../node_modules/@ethersproject/sha2/src.ts/types.ts","../node_modules/@ethersproject/sha2/src.ts/_version.ts","../node_modules/@ethersproject/sha2/src.ts/browser-sha2.ts","../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/hashes/src/pbkdf2.ts","../node_modules/@noble/hashes/src/scrypt.ts","../node_modules/ethereum-cryptography/esm/utils.js","../node_modules/ethereum-cryptography/esm/scrypt.js","../node_modules/@noble/hashes/src/_u64.ts","../node_modules/@noble/hashes/src/sha3.ts","../node_modules/ethereum-cryptography/esm/keccak.js","../node_modules/@ethersproject/pbkdf2/src.ts/browser-pbkdf2.ts","../node_modules/@fuel-ts/crypto/src/shared/scrypt.ts","../node_modules/@fuel-ts/crypto/src/browser/bufferFromString.ts","../node_modules/@fuel-ts/crypto/src/browser/crypto.ts","../node_modules/@fuel-ts/crypto/src/browser/randomBytes.ts","../node_modules/@fuel-ts/crypto/src/browser/stringFromBuffer.ts","../node_modules/@fuel-ts/crypto/src/browser/aes-ctr.ts","../node_modules/@fuel-ts/crypto/src/browser/encryptJsonWalletData.ts","../node_modules/@fuel-ts/crypto/src/browser/index.ts","../node_modules/@fuel-ts/crypto/src/shared/keccak256.ts","../node_modules/@fuel-ts/crypto/src/index.browser.ts","../node_modules/@fuel-ts/abi-coder/src/coders/abstract-coder.ts","../node_modules/@fuel-ts/abi-coder/src/coders/u64.ts","../node_modules/@fuel-ts/abi-coder/src/constants.ts","../node_modules/@fuel-ts/abi-coder/src/utilities.ts","../node_modules/@fuel-ts/abi-coder/src/coders/array.ts","../node_modules/@fuel-ts/abi-coder/src/coders/b256.ts","../node_modules/@fuel-ts/abi-coder/src/coders/b512.ts","../node_modules/@fuel-ts/abi-coder/src/coders/boolean.ts","../node_modules/@fuel-ts/abi-coder/src/coders/byte.ts","../node_modules/@fuel-ts/abi-coder/src/coders/enum.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@fuel-ts/abi-coder/src/coders/number.ts","../node_modules/@fuel-ts/abi-coder/src/coders/string.ts","../node_modules/@fuel-ts/abi-coder/src/coders/option.ts","../node_modules/@fuel-ts/abi-coder/src/coders/struct.ts","../node_modules/@fuel-ts/abi-coder/src/coders/tuple.ts","../node_modules/@fuel-ts/abi-coder/src/coders/vec.ts","../node_modules/@fuel-ts/abi-coder/src/resolved-abi-type.ts","../node_modules/@fuel-ts/abi-coder/src/abi-coder.ts","../node_modules/@fuel-ts/abi-coder/src/function-fragment.ts","../node_modules/@fuel-ts/abi-coder/src/interface.ts","../node_modules/@fuel-ts/interfaces/src/index.ts","../node_modules/@fuel-ts/address/src/utils.ts","../node_modules/@fuel-ts/address/src/address.ts","../node_modules/@fuel-ts/transactions/src/coders/byte-array.ts","../node_modules/@fuel-ts/transactions/src/coders/tx-pointer.ts","../node_modules/@fuel-ts/transactions/src/coders/utxo-id.ts","../node_modules/@fuel-ts/transactions/src/coders/input.ts","../node_modules/@fuel-ts/transactions/src/coders/output.ts","../node_modules/@fuel-ts/transactions/src/coders/receipt.ts","../node_modules/@fuel-ts/transactions/src/coders/storage-slot.ts","../node_modules/@fuel-ts/transactions/src/coders/witness.ts","../node_modules/@fuel-ts/transactions/src/coders/transaction.ts","../node_modules/@fuel-ts/transactions/src/configs.ts","../node_modules/@fuel-ts/address/src/configs.ts","../node_modules/@fuel-ts/providers/src/coin-quantity.ts","../node_modules/@fuel-ts/providers/src/__generated__/operations.ts","../node_modules/@fuel-ts/providers/src/memory-cache.ts","../node_modules/@fuel-ts/providers/src/transaction-request/input.ts","../node_modules/@fuel-ts/providers/src/transaction-request/output.ts","../node_modules/@fuel-ts/providers/src/resource.ts","../node_modules/@fuel-ts/providers/src/utils/receipts.ts","../node_modules/@fuel-ts/providers/src/utils/fee.ts","../node_modules/@fuel-ts/providers/src/utils/json.ts","../node_modules/@fuel-ts/providers/src/utils/sleep.ts","../node_modules/@fuel-ts/providers/src/utils/time.ts","../node_modules/@fuel-ts/providers/src/transaction-request/errors.ts","../node_modules/@fuel-ts/providers/src/transaction-request/witness.ts","../node_modules/@fuel-ts/providers/src/transaction-request/transaction-request.ts","../node_modules/@fuel-ts/providers/src/transaction-request/storage-slot.ts","../node_modules/@fuel-ts/providers/src/transaction-request/create-transaction-request.ts","../node_modules/@fuel-ts/providers/src/transaction-request/scripts.ts","../node_modules/@fuel-ts/providers/src/transaction-request/script-transaction-request.ts","../node_modules/@fuel-ts/providers/src/transaction-request/utils.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/input.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/output.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/operations.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/call.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/receipt.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/status.ts","../node_modules/@fuel-ts/providers/src/transaction-summary/assemble-transaction-summary.ts","../node_modules/@fuel-ts/providers/src/transaction-response/transaction-response.ts","../node_modules/@fuel-ts/providers/src/provider.ts","../node_modules/@fuels/vm-asm/dist/web/index.mjs","../node_modules/@fuel-ts/program/src/configs.ts","../node_modules/@fuel-ts/program/src/utils.ts","../node_modules/@fuel-ts/program/src/revert/revert-error.ts","../node_modules/@fuel-ts/program/src/revert/revert-error-codes.ts","../node_modules/@fuel-ts/program/src/errors.ts","../node_modules/@fuel-ts/program/src/instruction-set.ts","../node_modules/@fuel-ts/program/src/script-request.ts","../node_modules/@fuel-ts/merkle/src/common/cryptography.ts","../node_modules/@fuel-ts/merkle/src/binary/types/node.ts","../node_modules/@fuel-ts/merkle/src/binary/binaryMerkleTree.ts","../node_modules/@fuel-ts/merkle/src/common/common.ts","../node_modules/@fuel-ts/merkle/src/sparse/treeHasher.ts","../node_modules/@fuel-ts/merkle/src/sparse/types/sparseCompactMerkleProof.ts","../node_modules/@fuel-ts/merkle/src/sparse/types/sparseMerkleProof.ts","../node_modules/@fuel-ts/merkle/src/sparse/utils.ts","../node_modules/@fuel-ts/merkle/src/sparse/sparseMerkleTree.ts","../node_modules/@fuel-ts/merkle/src/sparse/proofs.ts","../node_modules/@fuel-ts/utils/src/utils/chunkAndPadBytes.ts","../node_modules/@fuel-ts/contract/src/util.ts","../node_modules/@fuel-ts/contract/src/contract-factory.ts","../node_modules/@fuel-ts/hasher/src/hasher.ts","../node_modules/@fuel-ts/signer/src/signer.ts","../node_modules/@fuel-ts/wallet/node_modules/@fuels/vm-asm/dist/web/index.mjs","../node_modules/@fuel-ts/wallet/node_modules/uuid/dist/esm-browser/native.js","../node_modules/@fuel-ts/wallet/node_modules/uuid/dist/esm-browser/rng.js","../node_modules/@fuel-ts/wallet/node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/@fuel-ts/wallet/node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@ethersproject/properties/src.ts/index.ts","../node_modules/@ethersproject/properties/src.ts/_version.ts","../node_modules/@ethersproject/basex/src.ts/index.ts","../node_modules/@fuel-ts/wordlists/src/words/english.ts","../node_modules/@fuel-ts/mnemonic/src/utils.ts","../node_modules/@fuel-ts/mnemonic/src/mnemonic.ts","../node_modules/@fuel-ts/hdwallet/src/hdwallet.ts","../node_modules/@fuel-ts/wallet/src/configs.ts","../node_modules/@fuel-ts/wallet/src/utils.ts","../node_modules/@fuel-ts/wallet/src/account.ts","../node_modules/@fuel-ts/wallet/src/keystore-wallet.ts","../node_modules/@fuel-ts/wallet/src/base-unlocked-wallet.ts","../node_modules/@fuel-ts/wallet/src/wallets.ts","../node_modules/@fuel-ts/wallet/src/wallet.ts","../node_modules/@fuel-ts/predicate/src/predicate.ts","../node_modules/@fuel-ts/script/src/scripts.ts","../node_modules/@fuel-ts/predicate/src/utils/getPredicateRoot.ts"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type Bytes = ArrayLike<number>;\n\nexport type BytesLike = Bytes | string;\n\nexport type DataOptions = {\n    allowMissingPrefix?: boolean;\n    hexPad?: \"left\" | \"right\" | null;\n};\n\nexport interface Hexable {\n    toHexString(): string;\n}\n\n\n/*\nexport interface HexString {\n    length: number;\n    substring: (start: number, end?: number) => string;\n\n    [index: number]: string;\n}\n*/\n\nexport type SignatureLike  = {\n    r: string;\n    s?: string;\n    _vs?: string,\n    recoveryParam?: number;\n    v?: number;\n} | BytesLike;\n\nexport interface Signature {\n    r: string;\n\n    s: string;\n    _vs: string,\n\n    recoveryParam: number;\n    v: number;\n\n    yParityAndS: string\n    compact: string;\n}\n\n///////////////////////////////\n\n\nfunction isHexable(value: any): value is Hexable {\n    return !!(value.toHexString);\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n    if (array.slice) { return array; }\n\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    }\n\n    return array;\n}\n\nexport function isBytesLike(value: any): value is BytesLike {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\n\nfunction isInteger(value: number) {\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\n}\n\nexport function isBytes(value: any): value is Bytes {\n    if (value == null) { return false; }\n\n    if (value.constructor === Uint8Array) { return true; }\n    if (typeof(value) === \"string\") { return false; }\n    if (!isInteger(value.length) || value.length < 0) { return false; }\n\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\n    }\n    return true;\n}\n\n\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) { result.push(0); }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { value = value.toHexString(); }\n\n    if (isHexString(value)) {\n        let hex = (<string>value).substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n\n    const result = new Uint8Array(length);\n\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n\n    return addSlice(result);\n}\n\nexport function stripZeros(value: BytesLike): Uint8Array {\n    let result: Uint8Array = arrayify(value);\n\n    if (result.length === 0) { return result; }\n\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) { start++ }\n\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n\n    return result;\n}\n\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\n    value = arrayify(value);\n\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\n\n\nexport function isHexString(value: any, length?: number): boolean {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n    if (length && value.length !== 2 + 2 * length) { return false; }\n    return true;\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n            if (hex.length % 2) { hex = \"0\" + hex; }\n            return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n    }\n\n    if (typeof(value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) { return (\"0x0\" + value); }\n        return \"0x\" + value;\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { return value.toHexString(); }\n\n    if (isHexString(value)) {\n        if ((<string>value).length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + (<string>value).substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return (<string>value).toLowerCase();\n    }\n\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n             let v = value[i];\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data: BytesLike) {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n\n    return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\n    }\n\n    offset = 2 + 2 * offset;\n\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n\n    return \"0x\" + data.substring(offset);\n}\n\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\n\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") { return \"0x0\"; }\n    return trimmed;\n}\n\nexport function hexStripZeros(value: BytesLike): string {\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\n\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\n    return \"0x\" + value.substring(offset);\n}\n\nexport function hexZeroPad(value: BytesLike, length: number): string {\n    if (typeof(value) !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n\n    return value;\n}\n\nexport function splitSignature(signature: SignatureLike): Signature {\n\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n\n    if (isBytesLike(signature)) {\n        let bytes: Uint8Array = arrayify(signature);\n\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n\n\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\n        result._vs = hexlify(bytes.slice(32, 64))\n\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) { vs[0] |= 0x80; }\n        const _vs = hexlify(vs);\n\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n\n    return result;\n}\n\nexport function joinSignature(signature: SignatureLike): string {\n    signature = splitSignature(signature);\n\n    return hexlify(concat([\n         signature.r,\n         signature.s,\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\n    ]));\n}\n\n","export const version = \"bytes/5.7.0\";\n","\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n","export const version = \"logger/5.7.0\";\n","'use strict';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bech32m = exports.bech32 = void 0;\nconst ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\nconst ALPHABET_MAP = {};\nfor (let z = 0; z < ALPHABET.length; z++) {\n    const x = ALPHABET.charAt(z);\n    ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n    const b = pre >> 25;\n    return (((pre & 0x1ffffff) << 5) ^\n        (-((b >> 0) & 1) & 0x3b6a57b2) ^\n        (-((b >> 1) & 1) & 0x26508e6d) ^\n        (-((b >> 2) & 1) & 0x1ea119fa) ^\n        (-((b >> 3) & 1) & 0x3d4233dd) ^\n        (-((b >> 4) & 1) & 0x2a1462b3));\n}\nfunction prefixChk(prefix) {\n    let chk = 1;\n    for (let i = 0; i < prefix.length; ++i) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            return 'Invalid prefix (' + prefix + ')';\n        chk = polymodStep(chk) ^ (c >> 5);\n    }\n    chk = polymodStep(chk);\n    for (let i = 0; i < prefix.length; ++i) {\n        const v = prefix.charCodeAt(i);\n        chk = polymodStep(chk) ^ (v & 0x1f);\n    }\n    return chk;\n}\nfunction convert(data, inBits, outBits, pad) {\n    let value = 0;\n    let bits = 0;\n    const maxV = (1 << outBits) - 1;\n    const result = [];\n    for (let i = 0; i < data.length; ++i) {\n        value = (value << inBits) | data[i];\n        bits += inBits;\n        while (bits >= outBits) {\n            bits -= outBits;\n            result.push((value >> bits) & maxV);\n        }\n    }\n    if (pad) {\n        if (bits > 0) {\n            result.push((value << (outBits - bits)) & maxV);\n        }\n    }\n    else {\n        if (bits >= inBits)\n            return 'Excess padding';\n        if ((value << (outBits - bits)) & maxV)\n            return 'Non-zero padding';\n    }\n    return result;\n}\nfunction toWords(bytes) {\n    return convert(bytes, 8, 5, true);\n}\nfunction fromWordsUnsafe(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n}\nfunction fromWords(words) {\n    const res = convert(words, 5, 8, false);\n    if (Array.isArray(res))\n        return res;\n    throw new Error(res);\n}\nfunction getLibraryFromEncoding(encoding) {\n    let ENCODING_CONST;\n    if (encoding === 'bech32') {\n        ENCODING_CONST = 1;\n    }\n    else {\n        ENCODING_CONST = 0x2bc830a3;\n    }\n    function encode(prefix, words, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (prefix.length + 7 + words.length > LIMIT)\n            throw new TypeError('Exceeds length limit');\n        prefix = prefix.toLowerCase();\n        // determine chk mod\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            throw new Error(chk);\n        let result = prefix + '1';\n        for (let i = 0; i < words.length; ++i) {\n            const x = words[i];\n            if (x >> 5 !== 0)\n                throw new Error('Non 5-bit word');\n            chk = polymodStep(chk) ^ x;\n            result += ALPHABET.charAt(x);\n        }\n        for (let i = 0; i < 6; ++i) {\n            chk = polymodStep(chk);\n        }\n        chk ^= ENCODING_CONST;\n        for (let i = 0; i < 6; ++i) {\n            const v = (chk >> ((5 - i) * 5)) & 0x1f;\n            result += ALPHABET.charAt(v);\n        }\n        return result;\n    }\n    function __decode(str, LIMIT) {\n        LIMIT = LIMIT || 90;\n        if (str.length < 8)\n            return str + ' too short';\n        if (str.length > LIMIT)\n            return 'Exceeds length limit';\n        // don't allow mixed case\n        const lowered = str.toLowerCase();\n        const uppered = str.toUpperCase();\n        if (str !== lowered && str !== uppered)\n            return 'Mixed-case string ' + str;\n        str = lowered;\n        const split = str.lastIndexOf('1');\n        if (split === -1)\n            return 'No separator character for ' + str;\n        if (split === 0)\n            return 'Missing prefix for ' + str;\n        const prefix = str.slice(0, split);\n        const wordChars = str.slice(split + 1);\n        if (wordChars.length < 6)\n            return 'Data too short';\n        let chk = prefixChk(prefix);\n        if (typeof chk === 'string')\n            return chk;\n        const words = [];\n        for (let i = 0; i < wordChars.length; ++i) {\n            const c = wordChars.charAt(i);\n            const v = ALPHABET_MAP[c];\n            if (v === undefined)\n                return 'Unknown character ' + c;\n            chk = polymodStep(chk) ^ v;\n            // not in the checksum?\n            if (i + 6 >= wordChars.length)\n                continue;\n            words.push(v);\n        }\n        if (chk !== ENCODING_CONST)\n            return 'Invalid checksum for ' + str;\n        return { prefix, words };\n    }\n    function decodeUnsafe(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n    }\n    function decode(str, LIMIT) {\n        const res = __decode(str, LIMIT);\n        if (typeof res === 'object')\n            return res;\n        throw new Error(res);\n    }\n    return {\n        decodeUnsafe,\n        decode,\n        encode,\n        toWords,\n        fromWordsUnsafe,\n        fromWords,\n    };\n}\nexports.bech32 = getLibraryFromEncoding('bech32');\nexports.bech32m = getLibraryFromEncoding('bech32m');\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [number & 0x3ffffff];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [0];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this._strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // '0' - '9'\n    if (c >= 48 && c <= 57) {\n      return c - 48;\n    // 'A' - 'F'\n    } else if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    } else {\n      assert(false, 'Invalid character in ' + string);\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this._strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var b = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        b = c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        b = c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        b = c;\n      }\n      assert(c >= 0 && b < mul, 'Invalid character');\n      r += b;\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [0];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this._strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  function move (dest, src) {\n    dest.words = src.words;\n    dest.length = src.length;\n    dest.negative = src.negative;\n    dest.red = src.red;\n  }\n\n  BN.prototype._move = function _move (dest) {\n    move(dest, this);\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype._strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  // Check Symbol.for because not everywhere where Symbol defined\n  // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility\n  if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {\n    try {\n      BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;\n    } catch (e) {\n      BN.prototype.inspect = inspect;\n    }\n  } else {\n    BN.prototype.inspect = inspect;\n  }\n\n  function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  }\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modrn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16, 2);\n  };\n\n  if (Buffer) {\n    BN.prototype.toBuffer = function toBuffer (endian, length) {\n      return this.toArrayLike(Buffer, endian, length);\n    };\n  }\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  var allocate = function allocate (ArrayType, size) {\n    if (ArrayType.allocUnsafe) {\n      return ArrayType.allocUnsafe(size);\n    }\n    return new ArrayType(size);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    this._strip();\n\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    var res = allocate(ArrayType, reqLength);\n    var postfix = endian === 'le' ? 'LE' : 'BE';\n    this['_toArrayLike' + postfix](res, byteLength);\n    return res;\n  };\n\n  BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {\n    var position = 0;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position++] = word & 0xff;\n      if (position < res.length) {\n        res[position++] = (word >> 8) & 0xff;\n      }\n      if (position < res.length) {\n        res[position++] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position < res.length) {\n          res[position++] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position < res.length) {\n      res[position++] = carry;\n\n      while (position < res.length) {\n        res[position++] = 0;\n      }\n    }\n  };\n\n  BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {\n    var position = res.length - 1;\n    var carry = 0;\n\n    for (var i = 0, shift = 0; i < this.length; i++) {\n      var word = (this.words[i] << shift) | carry;\n\n      res[position--] = word & 0xff;\n      if (position >= 0) {\n        res[position--] = (word >> 8) & 0xff;\n      }\n      if (position >= 0) {\n        res[position--] = (word >> 16) & 0xff;\n      }\n\n      if (shift === 6) {\n        if (position >= 0) {\n          res[position--] = (word >> 24) & 0xff;\n        }\n        carry = 0;\n        shift = 0;\n      } else {\n        carry = word >>> 24;\n        shift += 2;\n      }\n    }\n\n    if (position >= 0) {\n      res[position--] = carry;\n\n      while (position >= 0) {\n        res[position--] = 0;\n      }\n    }\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] >>> wbit) & 0x01;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this._strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this._strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this._strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this._strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out._strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    // Temporary disable, see https://github.com/indutny/bn.js/issues/211\n    // var fftm = new FFTM();\n    // return fftm.mulp(self, num, out);\n    return bigMulTo(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out._strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this._strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) <= num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this._strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this._strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this._strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q._strip();\n    }\n    a._strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modrn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modrn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modrn = function modrn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return isNegNum ? -acc : acc;\n  };\n\n  // WARNING: DEPRECATED\n  BN.prototype.modn = function modn (num) {\n    return this.modrn(num);\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    var isNegNum = num < 0;\n    if (isNegNum) num = -num;\n\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    this._strip();\n    return isNegNum ? this.ineg() : this;\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this._strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is a BN v4 instance\n        r.strip();\n      } else {\n        // r is a BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n\n    move(a, a.umod(this.m)._forceRed(this));\n    return a;\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","var r;\n\nmodule.exports = function rand(len) {\n  if (!r)\n    r = new Rand(null);\n\n  return r.generate(len);\n};\n\nfunction Rand(rand) {\n  this.rand = rand;\n}\nmodule.exports.Rand = Rand;\n\nRand.prototype.generate = function generate(len) {\n  return this._rand(len);\n};\n\n// Emulate crypto API using randy\nRand.prototype._rand = function _rand(n) {\n  if (this.rand.getBytes)\n    return this.rand.getBytes(n);\n\n  var res = new Uint8Array(n);\n  for (var i = 0; i < res.length; i++)\n    res[i] = this.rand.getByte();\n  return res;\n};\n\nif (typeof self === 'object') {\n  if (self.crypto && self.crypto.getRandomValues) {\n    // Modern browsers\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.crypto.getRandomValues(arr);\n      return arr;\n    };\n  } else if (self.msCrypto && self.msCrypto.getRandomValues) {\n    // IE\n    Rand.prototype._rand = function _rand(n) {\n      var arr = new Uint8Array(n);\n      self.msCrypto.getRandomValues(arr);\n      return arr;\n    };\n\n  // Safari's WebWorkers do not have `crypto`\n  } else if (typeof window === 'object') {\n    // Old junk\n    Rand.prototype._rand = function() {\n      throw new Error('Not implemented yet');\n    };\n  }\n} else {\n  // Node.js or Web worker with no crypto support\n  try {\n    var crypto = require('crypto');\n    if (typeof crypto.randomBytes !== 'function')\n      throw new Error('Not supported');\n\n    Rand.prototype._rand = function _rand(n) {\n      return crypto.randomBytes(n);\n    };\n  } catch (e) {\n  }\n}\n","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n})({});\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","'use strict';\n\nvar elliptic = exports;\n\nelliptic.version = require('../package.json').version;\nelliptic.utils = require('./elliptic/utils');\nelliptic.rand = require('brorand');\nelliptic.curve = require('./elliptic/curve');\nelliptic.curves = require('./elliptic/curves');\n\n// Protocols\nelliptic.ec = require('./elliptic/ec');\nelliptic.eddsa = require('./elliptic/eddsa');\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar getNAF = utils.getNAF;\nvar getJSF = utils.getJSF;\nvar assert = utils.assert;\n\nfunction BaseCurve(type, conf) {\n  this.type = type;\n  this.p = new BN(conf.p, 16);\n\n  // Use Montgomery, when there is no fast reduction for the prime\n  this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);\n\n  // Useful for many curves\n  this.zero = new BN(0).toRed(this.red);\n  this.one = new BN(1).toRed(this.red);\n  this.two = new BN(2).toRed(this.red);\n\n  // Curve configuration, optional\n  this.n = conf.n && new BN(conf.n, 16);\n  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);\n\n  // Temporary arrays\n  this._wnafT1 = new Array(4);\n  this._wnafT2 = new Array(4);\n  this._wnafT3 = new Array(4);\n  this._wnafT4 = new Array(4);\n\n  this._bitLength = this.n ? this.n.bitLength() : 0;\n\n  // Generalized Greg Maxwell's trick\n  var adjustCount = this.n && this.p.div(this.n);\n  if (!adjustCount || adjustCount.cmpn(100) > 0) {\n    this.redN = null;\n  } else {\n    this._maxwellTrick = true;\n    this.redN = this.n.toRed(this.red);\n  }\n}\nmodule.exports = BaseCurve;\n\nBaseCurve.prototype.point = function point() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype.validate = function validate() {\n  throw new Error('Not implemented');\n};\n\nBaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n  assert(p.precomputed);\n  var doubles = p._getDoubles();\n\n  var naf = getNAF(k, 1, this._bitLength);\n  var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);\n  I /= 3;\n\n  // Translate into more windowed form\n  var repr = [];\n  var j;\n  var nafW;\n  for (j = 0; j < naf.length; j += doubles.step) {\n    nafW = 0;\n    for (var l = j + doubles.step - 1; l >= j; l--)\n      nafW = (nafW << 1) + naf[l];\n    repr.push(nafW);\n  }\n\n  var a = this.jpoint(null, null, null);\n  var b = this.jpoint(null, null, null);\n  for (var i = I; i > 0; i--) {\n    for (j = 0; j < repr.length; j++) {\n      nafW = repr[j];\n      if (nafW === i)\n        b = b.mixedAdd(doubles.points[j]);\n      else if (nafW === -i)\n        b = b.mixedAdd(doubles.points[j].neg());\n    }\n    a = a.add(b);\n  }\n  return a.toP();\n};\n\nBaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n  var w = 4;\n\n  // Precompute window\n  var nafPoints = p._getNAFPoints(w);\n  w = nafPoints.wnd;\n  var wnd = nafPoints.points;\n\n  // Get NAF form\n  var naf = getNAF(k, w, this._bitLength);\n\n  // Add `this`*(N+1) for every w-NAF index\n  var acc = this.jpoint(null, null, null);\n  for (var i = naf.length - 1; i >= 0; i--) {\n    // Count zeroes\n    for (var l = 0; i >= 0 && naf[i] === 0; i--)\n      l++;\n    if (i >= 0)\n      l++;\n    acc = acc.dblp(l);\n\n    if (i < 0)\n      break;\n    var z = naf[i];\n    assert(z !== 0);\n    if (p.type === 'affine') {\n      // J +- P\n      if (z > 0)\n        acc = acc.mixedAdd(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());\n    } else {\n      // J +- J\n      if (z > 0)\n        acc = acc.add(wnd[(z - 1) >> 1]);\n      else\n        acc = acc.add(wnd[(-z - 1) >> 1].neg());\n    }\n  }\n  return p.type === 'affine' ? acc.toP() : acc;\n};\n\nBaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,\n  points,\n  coeffs,\n  len,\n  jacobianResult) {\n  var wndWidth = this._wnafT1;\n  var wnd = this._wnafT2;\n  var naf = this._wnafT3;\n\n  // Fill all arrays\n  var max = 0;\n  var i;\n  var j;\n  var p;\n  for (i = 0; i < len; i++) {\n    p = points[i];\n    var nafPoints = p._getNAFPoints(defW);\n    wndWidth[i] = nafPoints.wnd;\n    wnd[i] = nafPoints.points;\n  }\n\n  // Comb small window NAFs\n  for (i = len - 1; i >= 1; i -= 2) {\n    var a = i - 1;\n    var b = i;\n    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n      max = Math.max(naf[a].length, max);\n      max = Math.max(naf[b].length, max);\n      continue;\n    }\n\n    var comb = [\n      points[a], /* 1 */\n      null, /* 3 */\n      null, /* 5 */\n      points[b], /* 7 */\n    ];\n\n    // Try to avoid Projective points, if possible\n    if (points[a].y.cmp(points[b].y) === 0) {\n      comb[1] = points[a].add(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].add(points[b].neg());\n    } else {\n      comb[1] = points[a].toJ().mixedAdd(points[b]);\n      comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n    }\n\n    var index = [\n      -3, /* -1 -1 */\n      -1, /* -1 0 */\n      -5, /* -1 1 */\n      -7, /* 0 -1 */\n      0, /* 0 0 */\n      7, /* 0 1 */\n      5, /* 1 -1 */\n      1, /* 1 0 */\n      3,  /* 1 1 */\n    ];\n\n    var jsf = getJSF(coeffs[a], coeffs[b]);\n    max = Math.max(jsf[0].length, max);\n    naf[a] = new Array(max);\n    naf[b] = new Array(max);\n    for (j = 0; j < max; j++) {\n      var ja = jsf[0][j] | 0;\n      var jb = jsf[1][j] | 0;\n\n      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n      naf[b][j] = 0;\n      wnd[a] = comb;\n    }\n  }\n\n  var acc = this.jpoint(null, null, null);\n  var tmp = this._wnafT4;\n  for (i = max; i >= 0; i--) {\n    var k = 0;\n\n    while (i >= 0) {\n      var zero = true;\n      for (j = 0; j < len; j++) {\n        tmp[j] = naf[j][i] | 0;\n        if (tmp[j] !== 0)\n          zero = false;\n      }\n      if (!zero)\n        break;\n      k++;\n      i--;\n    }\n    if (i >= 0)\n      k++;\n    acc = acc.dblp(k);\n    if (i < 0)\n      break;\n\n    for (j = 0; j < len; j++) {\n      var z = tmp[j];\n      p;\n      if (z === 0)\n        continue;\n      else if (z > 0)\n        p = wnd[j][(z - 1) >> 1];\n      else if (z < 0)\n        p = wnd[j][(-z - 1) >> 1].neg();\n\n      if (p.type === 'affine')\n        acc = acc.mixedAdd(p);\n      else\n        acc = acc.add(p);\n    }\n  }\n  // Zeroify references\n  for (i = 0; i < len; i++)\n    wnd[i] = null;\n\n  if (jacobianResult)\n    return acc;\n  else\n    return acc.toP();\n};\n\nfunction BasePoint(curve, type) {\n  this.curve = curve;\n  this.type = type;\n  this.precomputed = null;\n}\nBaseCurve.BasePoint = BasePoint;\n\nBasePoint.prototype.eq = function eq(/*other*/) {\n  throw new Error('Not implemented');\n};\n\nBasePoint.prototype.validate = function validate() {\n  return this.curve.validate(this);\n};\n\nBaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  bytes = utils.toArray(bytes, enc);\n\n  var len = this.p.byteLength();\n\n  // uncompressed, hybrid-odd, hybrid-even\n  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&\n      bytes.length - 1 === 2 * len) {\n    if (bytes[0] === 0x06)\n      assert(bytes[bytes.length - 1] % 2 === 0);\n    else if (bytes[0] === 0x07)\n      assert(bytes[bytes.length - 1] % 2 === 1);\n\n    var res =  this.point(bytes.slice(1, 1 + len),\n      bytes.slice(1 + len, 1 + 2 * len));\n\n    return res;\n  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&\n              bytes.length - 1 === len) {\n    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n  }\n  throw new Error('Unknown point format');\n};\n\nBasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n  return this.encode(enc, true);\n};\n\nBasePoint.prototype._encode = function _encode(compact) {\n  var len = this.curve.p.byteLength();\n  var x = this.getX().toArray('be', len);\n\n  if (compact)\n    return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);\n\n  return [ 0x04 ].concat(x, this.getY().toArray('be', len));\n};\n\nBasePoint.prototype.encode = function encode(enc, compact) {\n  return utils.encode(this._encode(compact), enc);\n};\n\nBasePoint.prototype.precompute = function precompute(power) {\n  if (this.precomputed)\n    return this;\n\n  var precomputed = {\n    doubles: null,\n    naf: null,\n    beta: null,\n  };\n  precomputed.naf = this._getNAFPoints(8);\n  precomputed.doubles = this._getDoubles(4, power);\n  precomputed.beta = this._getBeta();\n  this.precomputed = precomputed;\n\n  return this;\n};\n\nBasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n  if (!this.precomputed)\n    return false;\n\n  var doubles = this.precomputed.doubles;\n  if (!doubles)\n    return false;\n\n  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n};\n\nBasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n  if (this.precomputed && this.precomputed.doubles)\n    return this.precomputed.doubles;\n\n  var doubles = [ this ];\n  var acc = this;\n  for (var i = 0; i < power; i += step) {\n    for (var j = 0; j < step; j++)\n      acc = acc.dbl();\n    doubles.push(acc);\n  }\n  return {\n    step: step,\n    points: doubles,\n  };\n};\n\nBasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n  if (this.precomputed && this.precomputed.naf)\n    return this.precomputed.naf;\n\n  var res = [ this ];\n  var max = (1 << wnd) - 1;\n  var dbl = max === 1 ? null : this.dbl();\n  for (var i = 1; i < max; i++)\n    res[i] = res[i - 1].add(dbl);\n  return {\n    wnd: wnd,\n    points: res,\n  };\n};\n\nBasePoint.prototype._getBeta = function _getBeta() {\n  return null;\n};\n\nBasePoint.prototype.dblp = function dblp(k) {\n  var r = this;\n  for (var i = 0; i < k; i++)\n    r = r.dbl();\n  return r;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction EdwardsCurve(conf) {\n  // NOTE: Important as we are creating point in Base.call()\n  this.twisted = (conf.a | 0) !== 1;\n  this.mOneA = this.twisted && (conf.a | 0) === -1;\n  this.extended = this.mOneA;\n\n  Base.call(this, 'edwards', conf);\n\n  this.a = new BN(conf.a, 16).umod(this.red.m);\n  this.a = this.a.toRed(this.red);\n  this.c = new BN(conf.c, 16).toRed(this.red);\n  this.c2 = this.c.redSqr();\n  this.d = new BN(conf.d, 16).toRed(this.red);\n  this.dd = this.d.redAdd(this.d);\n\n  assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);\n  this.oneC = (conf.c | 0) === 1;\n}\ninherits(EdwardsCurve, Base);\nmodule.exports = EdwardsCurve;\n\nEdwardsCurve.prototype._mulA = function _mulA(num) {\n  if (this.mOneA)\n    return num.redNeg();\n  else\n    return this.a.redMul(num);\n};\n\nEdwardsCurve.prototype._mulC = function _mulC(num) {\n  if (this.oneC)\n    return num;\n  else\n    return this.c.redMul(num);\n};\n\n// Just for compatibility with Short curve\nEdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {\n  return this.point(x, y, z, t);\n};\n\nEdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var x2 = x.redSqr();\n  var rhs = this.c2.redSub(this.a.redMul(x2));\n  var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));\n\n  var y2 = rhs.redMul(lhs.redInvm());\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {\n  y = new BN(y, 16);\n  if (!y.red)\n    y = y.toRed(this.red);\n\n  // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)\n  var y2 = y.redSqr();\n  var lhs = y2.redSub(this.c2);\n  var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);\n  var x2 = lhs.redMul(rhs.redInvm());\n\n  if (x2.cmp(this.zero) === 0) {\n    if (odd)\n      throw new Error('invalid point');\n    else\n      return this.point(this.zero, y);\n  }\n\n  var x = x2.redSqrt();\n  if (x.redSqr().redSub(x2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  if (x.fromRed().isOdd() !== odd)\n    x = x.redNeg();\n\n  return this.point(x, y);\n};\n\nEdwardsCurve.prototype.validate = function validate(point) {\n  if (point.isInfinity())\n    return true;\n\n  // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)\n  point.normalize();\n\n  var x2 = point.x.redSqr();\n  var y2 = point.y.redSqr();\n  var lhs = x2.redMul(this.a).redAdd(y2);\n  var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));\n\n  return lhs.cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, y, z, t) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.zero;\n    this.y = this.curve.one;\n    this.z = this.curve.one;\n    this.t = this.curve.zero;\n    this.zOne = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = z ? new BN(z, 16) : this.curve.one;\n    this.t = t && new BN(t, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n    if (this.t && !this.t.red)\n      this.t = this.t.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n\n    // Use extended coordinates\n    if (this.curve.extended && !this.t) {\n      this.t = this.x.redMul(this.y);\n      if (!this.zOne)\n        this.t = this.t.redMul(this.z.redInvm());\n    }\n  }\n}\ninherits(Point, Base.BasePoint);\n\nEdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nEdwardsCurve.prototype.point = function point(x, y, z, t) {\n  return new Point(this, x, y, z, t);\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1], obj[2]);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.x.cmpn(0) === 0 &&\n    (this.y.cmp(this.z) === 0 ||\n    (this.zOne && this.y.cmp(this.curve.c) === 0));\n};\n\nPoint.prototype._extDbl = function _extDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #doubling-dbl-2008-hwcd\n  // 4M + 4S\n\n  // A = X1^2\n  var a = this.x.redSqr();\n  // B = Y1^2\n  var b = this.y.redSqr();\n  // C = 2 * Z1^2\n  var c = this.z.redSqr();\n  c = c.redIAdd(c);\n  // D = a * A\n  var d = this.curve._mulA(a);\n  // E = (X1 + Y1)^2 - A - B\n  var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);\n  // G = D + B\n  var g = d.redAdd(b);\n  // F = G - C\n  var f = g.redSub(c);\n  // H = D - B\n  var h = d.redSub(b);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projDbl = function _projDbl() {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #doubling-dbl-2008-bbjlp\n  //     #doubling-dbl-2007-bl\n  // and others\n  // Generally 3M + 4S or 2M + 4S\n\n  // B = (X1 + Y1)^2\n  var b = this.x.redAdd(this.y).redSqr();\n  // C = X1^2\n  var c = this.x.redSqr();\n  // D = Y1^2\n  var d = this.y.redSqr();\n\n  var nx;\n  var ny;\n  var nz;\n  var e;\n  var h;\n  var j;\n  if (this.curve.twisted) {\n    // E = a * C\n    e = this.curve._mulA(c);\n    // F = E + D\n    var f = e.redAdd(d);\n    if (this.zOne) {\n      // X3 = (B - C - D) * (F - 2)\n      nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F^2 - 2 * F\n      nz = f.redSqr().redSub(f).redSub(f);\n    } else {\n      // H = Z1^2\n      h = this.z.redSqr();\n      // J = F - 2 * H\n      j = f.redSub(h).redISub(h);\n      // X3 = (B-C-D)*J\n      nx = b.redSub(c).redISub(d).redMul(j);\n      // Y3 = F * (E - D)\n      ny = f.redMul(e.redSub(d));\n      // Z3 = F * J\n      nz = f.redMul(j);\n    }\n  } else {\n    // E = C + D\n    e = c.redAdd(d);\n    // H = (c * Z1)^2\n    h = this.curve._mulC(this.z).redSqr();\n    // J = E - 2 * H\n    j = e.redSub(h).redSub(h);\n    // X3 = c * (B - E) * J\n    nx = this.curve._mulC(b.redISub(e)).redMul(j);\n    // Y3 = c * E * (C - D)\n    ny = this.curve._mulC(e).redMul(c.redISub(d));\n    // Z3 = E * J\n    nz = e.redMul(j);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  // Double in extended coordinates\n  if (this.curve.extended)\n    return this._extDbl();\n  else\n    return this._projDbl();\n};\n\nPoint.prototype._extAdd = function _extAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html\n  //     #addition-add-2008-hwcd-3\n  // 8M\n\n  // A = (Y1 - X1) * (Y2 - X2)\n  var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));\n  // B = (Y1 + X1) * (Y2 + X2)\n  var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));\n  // C = T1 * k * T2\n  var c = this.t.redMul(this.curve.dd).redMul(p.t);\n  // D = Z1 * 2 * Z2\n  var d = this.z.redMul(p.z.redAdd(p.z));\n  // E = B - A\n  var e = b.redSub(a);\n  // F = D - C\n  var f = d.redSub(c);\n  // G = D + C\n  var g = d.redAdd(c);\n  // H = B + A\n  var h = b.redAdd(a);\n  // X3 = E * F\n  var nx = e.redMul(f);\n  // Y3 = G * H\n  var ny = g.redMul(h);\n  // T3 = E * H\n  var nt = e.redMul(h);\n  // Z3 = F * G\n  var nz = f.redMul(g);\n  return this.curve.point(nx, ny, nz, nt);\n};\n\nPoint.prototype._projAdd = function _projAdd(p) {\n  // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html\n  //     #addition-add-2008-bbjlp\n  //     #addition-add-2007-bl\n  // 10M + 1S\n\n  // A = Z1 * Z2\n  var a = this.z.redMul(p.z);\n  // B = A^2\n  var b = a.redSqr();\n  // C = X1 * X2\n  var c = this.x.redMul(p.x);\n  // D = Y1 * Y2\n  var d = this.y.redMul(p.y);\n  // E = d * C * D\n  var e = this.curve.d.redMul(c).redMul(d);\n  // F = B - E\n  var f = b.redSub(e);\n  // G = B + E\n  var g = b.redAdd(e);\n  // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)\n  var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);\n  var nx = a.redMul(f).redMul(tmp);\n  var ny;\n  var nz;\n  if (this.curve.twisted) {\n    // Y3 = A * G * (D - a * C)\n    ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));\n    // Z3 = F * G\n    nz = f.redMul(g);\n  } else {\n    // Y3 = A * G * (D - C)\n    ny = a.redMul(g).redMul(d.redSub(c));\n    // Z3 = c * F * G\n    nz = this.curve._mulC(f).redMul(g);\n  }\n  return this.curve.point(nx, ny, nz);\n};\n\nPoint.prototype.add = function add(p) {\n  if (this.isInfinity())\n    return p;\n  if (p.isInfinity())\n    return this;\n\n  if (this.curve.extended)\n    return this._extAdd(p);\n  else\n    return this._projAdd(p);\n};\n\nPoint.prototype.mul = function mul(k) {\n  if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, false);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p, k2) {\n  return this.curve._wnafMulAdd(1, [ this, p ], [ k1, k2 ], 2, true);\n};\n\nPoint.prototype.normalize = function normalize() {\n  if (this.zOne)\n    return this;\n\n  // Normalize coordinates\n  var zi = this.z.redInvm();\n  this.x = this.x.redMul(zi);\n  this.y = this.y.redMul(zi);\n  if (this.t)\n    this.t = this.t.redMul(zi);\n  this.z = this.curve.one;\n  this.zOne = true;\n  return this;\n};\n\nPoint.prototype.neg = function neg() {\n  return this.curve.point(this.x.redNeg(),\n    this.y,\n    this.z,\n    this.t && this.t.redNeg());\n};\n\nPoint.prototype.getX = function getX() {\n  this.normalize();\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  this.normalize();\n  return this.y.fromRed();\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this === other ||\n         this.getX().cmp(other.getX()) === 0 &&\n         this.getY().cmp(other.getY()) === 0;\n};\n\nPoint.prototype.eqXToP = function eqXToP(x) {\n  var rx = x.toRed(this.curve.red).redMul(this.z);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(this.z);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\n// Compatibility with BaseCurve\nPoint.prototype.toP = Point.prototype.normalize;\nPoint.prototype.mixedAdd = Point.prototype.add;\n","'use strict';\n\nvar curve = exports;\n\ncurve.base = require('./base');\ncurve.short = require('./short');\ncurve.mont = require('./mont');\ncurve.edwards = require('./edwards');\n","'use strict';\n\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar utils = require('../utils');\n\nfunction MontCurve(conf) {\n  Base.call(this, 'mont', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.i4 = new BN(4).toRed(this.red).redInvm();\n  this.two = new BN(2).toRed(this.red);\n  this.a24 = this.i4.redMul(this.a.redAdd(this.two));\n}\ninherits(MontCurve, Base);\nmodule.exports = MontCurve;\n\nMontCurve.prototype.validate = function validate(point) {\n  var x = point.normalize().x;\n  var x2 = x.redSqr();\n  var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);\n  var y = rhs.redSqrt();\n\n  return y.redSqr().cmp(rhs) === 0;\n};\n\nfunction Point(curve, x, z) {\n  Base.BasePoint.call(this, curve, 'projective');\n  if (x === null && z === null) {\n    this.x = this.curve.one;\n    this.z = this.curve.zero;\n  } else {\n    this.x = new BN(x, 16);\n    this.z = new BN(z, 16);\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.z.red)\n      this.z = this.z.toRed(this.curve.red);\n  }\n}\ninherits(Point, Base.BasePoint);\n\nMontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n  return this.point(utils.toArray(bytes, enc), 1);\n};\n\nMontCurve.prototype.point = function point(x, z) {\n  return new Point(this, x, z);\n};\n\nMontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {\n  return Point.fromJSON(this, obj);\n};\n\nPoint.prototype.precompute = function precompute() {\n  // No-op\n};\n\nPoint.prototype._encode = function _encode() {\n  return this.getX().toArray('be', this.curve.p.byteLength());\n};\n\nPoint.fromJSON = function fromJSON(curve, obj) {\n  return new Point(curve, obj[0], obj[1] || curve.one);\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' z: ' + this.z.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n\nPoint.prototype.dbl = function dbl() {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3\n  // 2M + 2S + 4A\n\n  // A = X1 + Z1\n  var a = this.x.redAdd(this.z);\n  // AA = A^2\n  var aa = a.redSqr();\n  // B = X1 - Z1\n  var b = this.x.redSub(this.z);\n  // BB = B^2\n  var bb = b.redSqr();\n  // C = AA - BB\n  var c = aa.redSub(bb);\n  // X3 = AA * BB\n  var nx = aa.redMul(bb);\n  // Z3 = C * (BB + A24 * C)\n  var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.add = function add() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.diffAdd = function diffAdd(p, diff) {\n  // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3\n  // 4M + 2S + 6A\n\n  // A = X2 + Z2\n  var a = this.x.redAdd(this.z);\n  // B = X2 - Z2\n  var b = this.x.redSub(this.z);\n  // C = X3 + Z3\n  var c = p.x.redAdd(p.z);\n  // D = X3 - Z3\n  var d = p.x.redSub(p.z);\n  // DA = D * A\n  var da = d.redMul(a);\n  // CB = C * B\n  var cb = c.redMul(b);\n  // X5 = Z1 * (DA + CB)^2\n  var nx = diff.z.redMul(da.redAdd(cb).redSqr());\n  // Z5 = X1 * (DA - CB)^2\n  var nz = diff.x.redMul(da.redISub(cb).redSqr());\n  return this.curve.point(nx, nz);\n};\n\nPoint.prototype.mul = function mul(k) {\n  var t = k.clone();\n  var a = this; // (N / 2) * Q + Q\n  var b = this.curve.point(null, null); // (N / 2) * Q\n  var c = this; // Q\n\n  for (var bits = []; t.cmpn(0) !== 0; t.iushrn(1))\n    bits.push(t.andln(1));\n\n  for (var i = bits.length - 1; i >= 0; i--) {\n    if (bits[i] === 0) {\n      // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q\n      a = a.diffAdd(b, c);\n      // N * Q = 2 * ((N / 2) * Q + Q))\n      b = b.dbl();\n    } else {\n      // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)\n      b = a.diffAdd(b, c);\n      // N * Q + Q = 2 * ((N / 2) * Q + Q)\n      a = a.dbl();\n    }\n  }\n  return b;\n};\n\nPoint.prototype.mulAdd = function mulAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.jumlAdd = function jumlAdd() {\n  throw new Error('Not supported on Montgomery curve');\n};\n\nPoint.prototype.eq = function eq(other) {\n  return this.getX().cmp(other.getX()) === 0;\n};\n\nPoint.prototype.normalize = function normalize() {\n  this.x = this.x.redMul(this.z.redInvm());\n  this.z = this.curve.one;\n  return this;\n};\n\nPoint.prototype.getX = function getX() {\n  // Normalize coordinates\n  this.normalize();\n\n  return this.x.fromRed();\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar BN = require('bn.js');\nvar inherits = require('inherits');\nvar Base = require('./base');\n\nvar assert = utils.assert;\n\nfunction ShortCurve(conf) {\n  Base.call(this, 'short', conf);\n\n  this.a = new BN(conf.a, 16).toRed(this.red);\n  this.b = new BN(conf.b, 16).toRed(this.red);\n  this.tinv = this.two.redInvm();\n\n  this.zeroA = this.a.fromRed().cmpn(0) === 0;\n  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;\n\n  // If the curve is endomorphic, precalculate beta and lambda\n  this.endo = this._getEndomorphism(conf);\n  this._endoWnafT1 = new Array(4);\n  this._endoWnafT2 = new Array(4);\n}\ninherits(ShortCurve, Base);\nmodule.exports = ShortCurve;\n\nShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n  // No efficient endomorphism\n  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)\n    return;\n\n  // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n  var beta;\n  var lambda;\n  if (conf.beta) {\n    beta = new BN(conf.beta, 16).toRed(this.red);\n  } else {\n    var betas = this._getEndoRoots(this.p);\n    // Choose the smallest beta\n    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n    beta = beta.toRed(this.red);\n  }\n  if (conf.lambda) {\n    lambda = new BN(conf.lambda, 16);\n  } else {\n    // Choose the lambda that is matching selected beta\n    var lambdas = this._getEndoRoots(this.n);\n    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n      lambda = lambdas[0];\n    } else {\n      lambda = lambdas[1];\n      assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n    }\n  }\n\n  // Get basis vectors, used for balanced length-two representation\n  var basis;\n  if (conf.basis) {\n    basis = conf.basis.map(function(vec) {\n      return {\n        a: new BN(vec.a, 16),\n        b: new BN(vec.b, 16),\n      };\n    });\n  } else {\n    basis = this._getEndoBasis(lambda);\n  }\n\n  return {\n    beta: beta,\n    lambda: lambda,\n    basis: basis,\n  };\n};\n\nShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n  // Find roots of for x^2 + x + 1 in F\n  // Root = (-1 +- Sqrt(-3)) / 2\n  //\n  var red = num === this.p ? this.red : BN.mont(num);\n  var tinv = new BN(2).toRed(red).redInvm();\n  var ntinv = tinv.redNeg();\n\n  var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n\n  var l1 = ntinv.redAdd(s).fromRed();\n  var l2 = ntinv.redSub(s).fromRed();\n  return [ l1, l2 ];\n};\n\nShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n  // aprxSqrt >= sqrt(this.n)\n  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));\n\n  // 3.74\n  // Run EGCD, until r(L + 1) < aprxSqrt\n  var u = lambda;\n  var v = this.n.clone();\n  var x1 = new BN(1);\n  var y1 = new BN(0);\n  var x2 = new BN(0);\n  var y2 = new BN(1);\n\n  // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n  var a0;\n  var b0;\n  // First vector\n  var a1;\n  var b1;\n  // Second vector\n  var a2;\n  var b2;\n\n  var prevR;\n  var i = 0;\n  var r;\n  var x;\n  while (u.cmpn(0) !== 0) {\n    var q = v.div(u);\n    r = v.sub(q.mul(u));\n    x = x2.sub(q.mul(x1));\n    var y = y2.sub(q.mul(y1));\n\n    if (!a1 && r.cmp(aprxSqrt) < 0) {\n      a0 = prevR.neg();\n      b0 = x1;\n      a1 = r.neg();\n      b1 = x;\n    } else if (a1 && ++i === 2) {\n      break;\n    }\n    prevR = r;\n\n    v = u;\n    u = r;\n    x2 = x1;\n    x1 = x;\n    y2 = y1;\n    y1 = y;\n  }\n  a2 = r.neg();\n  b2 = x;\n\n  var len1 = a1.sqr().add(b1.sqr());\n  var len2 = a2.sqr().add(b2.sqr());\n  if (len2.cmp(len1) >= 0) {\n    a2 = a0;\n    b2 = b0;\n  }\n\n  // Normalize signs\n  if (a1.negative) {\n    a1 = a1.neg();\n    b1 = b1.neg();\n  }\n  if (a2.negative) {\n    a2 = a2.neg();\n    b2 = b2.neg();\n  }\n\n  return [\n    { a: a1, b: b1 },\n    { a: a2, b: b2 },\n  ];\n};\n\nShortCurve.prototype._endoSplit = function _endoSplit(k) {\n  var basis = this.endo.basis;\n  var v1 = basis[0];\n  var v2 = basis[1];\n\n  var c1 = v2.b.mul(k).divRound(this.n);\n  var c2 = v1.b.neg().mul(k).divRound(this.n);\n\n  var p1 = c1.mul(v1.a);\n  var p2 = c2.mul(v2.a);\n  var q1 = c1.mul(v1.b);\n  var q2 = c2.mul(v2.b);\n\n  // Calculate answer\n  var k1 = k.sub(p1).sub(p2);\n  var k2 = q1.add(q2).neg();\n  return { k1: k1, k2: k2 };\n};\n\nShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n  x = new BN(x, 16);\n  if (!x.red)\n    x = x.toRed(this.red);\n\n  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n  var y = y2.redSqrt();\n  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)\n    throw new Error('invalid point');\n\n  // XXX Is there any way to tell if the number is odd without converting it\n  // to non-red form?\n  var isOdd = y.fromRed().isOdd();\n  if (odd && !isOdd || !odd && isOdd)\n    y = y.redNeg();\n\n  return this.point(x, y);\n};\n\nShortCurve.prototype.validate = function validate(point) {\n  if (point.inf)\n    return true;\n\n  var x = point.x;\n  var y = point.y;\n\n  var ax = this.a.redMul(x);\n  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n  return y.redSqr().redISub(rhs).cmpn(0) === 0;\n};\n\nShortCurve.prototype._endoWnafMulAdd =\n    function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n      var npoints = this._endoWnafT1;\n      var ncoeffs = this._endoWnafT2;\n      for (var i = 0; i < points.length; i++) {\n        var split = this._endoSplit(coeffs[i]);\n        var p = points[i];\n        var beta = p._getBeta();\n\n        if (split.k1.negative) {\n          split.k1.ineg();\n          p = p.neg(true);\n        }\n        if (split.k2.negative) {\n          split.k2.ineg();\n          beta = beta.neg(true);\n        }\n\n        npoints[i * 2] = p;\n        npoints[i * 2 + 1] = beta;\n        ncoeffs[i * 2] = split.k1;\n        ncoeffs[i * 2 + 1] = split.k2;\n      }\n      var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);\n\n      // Clean-up references to points and coefficients\n      for (var j = 0; j < i * 2; j++) {\n        npoints[j] = null;\n        ncoeffs[j] = null;\n      }\n      return res;\n    };\n\nfunction Point(curve, x, y, isRed) {\n  Base.BasePoint.call(this, curve, 'affine');\n  if (x === null && y === null) {\n    this.x = null;\n    this.y = null;\n    this.inf = true;\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    // Force redgomery representation when loading from JSON\n    if (isRed) {\n      this.x.forceRed(this.curve.red);\n      this.y.forceRed(this.curve.red);\n    }\n    if (!this.x.red)\n      this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red)\n      this.y = this.y.toRed(this.curve.red);\n    this.inf = false;\n  }\n}\ninherits(Point, Base.BasePoint);\n\nShortCurve.prototype.point = function point(x, y, isRed) {\n  return new Point(this, x, y, isRed);\n};\n\nShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n  return Point.fromJSON(this, obj, red);\n};\n\nPoint.prototype._getBeta = function _getBeta() {\n  if (!this.curve.endo)\n    return;\n\n  var pre = this.precomputed;\n  if (pre && pre.beta)\n    return pre.beta;\n\n  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n  if (pre) {\n    var curve = this.curve;\n    var endoMul = function(p) {\n      return curve.point(p.x.redMul(curve.endo.beta), p.y);\n    };\n    pre.beta = beta;\n    beta.precomputed = {\n      beta: null,\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(endoMul),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(endoMul),\n      },\n    };\n  }\n  return beta;\n};\n\nPoint.prototype.toJSON = function toJSON() {\n  if (!this.precomputed)\n    return [ this.x, this.y ];\n\n  return [ this.x, this.y, this.precomputed && {\n    doubles: this.precomputed.doubles && {\n      step: this.precomputed.doubles.step,\n      points: this.precomputed.doubles.points.slice(1),\n    },\n    naf: this.precomputed.naf && {\n      wnd: this.precomputed.naf.wnd,\n      points: this.precomputed.naf.points.slice(1),\n    },\n  } ];\n};\n\nPoint.fromJSON = function fromJSON(curve, obj, red) {\n  if (typeof obj === 'string')\n    obj = JSON.parse(obj);\n  var res = curve.point(obj[0], obj[1], red);\n  if (!obj[2])\n    return res;\n\n  function obj2point(obj) {\n    return curve.point(obj[0], obj[1], red);\n  }\n\n  var pre = obj[2];\n  res.precomputed = {\n    beta: null,\n    doubles: pre.doubles && {\n      step: pre.doubles.step,\n      points: [ res ].concat(pre.doubles.points.map(obj2point)),\n    },\n    naf: pre.naf && {\n      wnd: pre.naf.wnd,\n      points: [ res ].concat(pre.naf.points.map(obj2point)),\n    },\n  };\n  return res;\n};\n\nPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC Point Infinity>';\n  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +\n      ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n};\n\nPoint.prototype.isInfinity = function isInfinity() {\n  return this.inf;\n};\n\nPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.inf)\n    return p;\n\n  // P + O = P\n  if (p.inf)\n    return this;\n\n  // P + P = 2P\n  if (this.eq(p))\n    return this.dbl();\n\n  // P + (-P) = O\n  if (this.neg().eq(p))\n    return this.curve.point(null, null);\n\n  // P + Q = O\n  if (this.x.cmp(p.x) === 0)\n    return this.curve.point(null, null);\n\n  var c = this.y.redSub(p.y);\n  if (c.cmpn(0) !== 0)\n    c = c.redMul(this.x.redSub(p.x).redInvm());\n  var nx = c.redSqr().redISub(this.x).redISub(p.x);\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.dbl = function dbl() {\n  if (this.inf)\n    return this;\n\n  // 2P = O\n  var ys1 = this.y.redAdd(this.y);\n  if (ys1.cmpn(0) === 0)\n    return this.curve.point(null, null);\n\n  var a = this.curve.a;\n\n  var x2 = this.x.redSqr();\n  var dyinv = ys1.redInvm();\n  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n\n  var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n  return this.curve.point(nx, ny);\n};\n\nPoint.prototype.getX = function getX() {\n  return this.x.fromRed();\n};\n\nPoint.prototype.getY = function getY() {\n  return this.y.fromRed();\n};\n\nPoint.prototype.mul = function mul(k) {\n  k = new BN(k, 16);\n  if (this.isInfinity())\n    return this;\n  else if (this._hasDoubles(k))\n    return this.curve._fixedNafMul(this, k);\n  else if (this.curve.endo)\n    return this.curve._endoWnafMulAdd([ this ], [ k ]);\n  else\n    return this.curve._wnafMul(this, k);\n};\n\nPoint.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2);\n};\n\nPoint.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n  var points = [ this, p2 ];\n  var coeffs = [ k1, k2 ];\n  if (this.curve.endo)\n    return this.curve._endoWnafMulAdd(points, coeffs, true);\n  else\n    return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n};\n\nPoint.prototype.eq = function eq(p) {\n  return this === p ||\n         this.inf === p.inf &&\n             (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n};\n\nPoint.prototype.neg = function neg(_precompute) {\n  if (this.inf)\n    return this;\n\n  var res = this.curve.point(this.x, this.y.redNeg());\n  if (_precompute && this.precomputed) {\n    var pre = this.precomputed;\n    var negate = function(p) {\n      return p.neg();\n    };\n    res.precomputed = {\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: pre.naf.points.map(negate),\n      },\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: pre.doubles.points.map(negate),\n      },\n    };\n  }\n  return res;\n};\n\nPoint.prototype.toJ = function toJ() {\n  if (this.inf)\n    return this.curve.jpoint(null, null, null);\n\n  var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n  return res;\n};\n\nfunction JPoint(curve, x, y, z) {\n  Base.BasePoint.call(this, curve, 'jacobian');\n  if (x === null && y === null && z === null) {\n    this.x = this.curve.one;\n    this.y = this.curve.one;\n    this.z = new BN(0);\n  } else {\n    this.x = new BN(x, 16);\n    this.y = new BN(y, 16);\n    this.z = new BN(z, 16);\n  }\n  if (!this.x.red)\n    this.x = this.x.toRed(this.curve.red);\n  if (!this.y.red)\n    this.y = this.y.toRed(this.curve.red);\n  if (!this.z.red)\n    this.z = this.z.toRed(this.curve.red);\n\n  this.zOne = this.z === this.curve.one;\n}\ninherits(JPoint, Base.BasePoint);\n\nShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n  return new JPoint(this, x, y, z);\n};\n\nJPoint.prototype.toP = function toP() {\n  if (this.isInfinity())\n    return this.curve.point(null, null);\n\n  var zinv = this.z.redInvm();\n  var zinv2 = zinv.redSqr();\n  var ax = this.x.redMul(zinv2);\n  var ay = this.y.redMul(zinv2).redMul(zinv);\n\n  return this.curve.point(ax, ay);\n};\n\nJPoint.prototype.neg = function neg() {\n  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n};\n\nJPoint.prototype.add = function add(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p;\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 12M + 4S + 7A\n  var pz2 = p.z.redSqr();\n  var z2 = this.z.redSqr();\n  var u1 = this.x.redMul(pz2);\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y.redMul(pz2.redMul(p.z));\n  var s2 = p.y.redMul(z2.redMul(this.z));\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(p.z).redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mixedAdd = function mixedAdd(p) {\n  // O + P = P\n  if (this.isInfinity())\n    return p.toJ();\n\n  // P + O = P\n  if (p.isInfinity())\n    return this;\n\n  // 8M + 3S + 7A\n  var z2 = this.z.redSqr();\n  var u1 = this.x;\n  var u2 = p.x.redMul(z2);\n  var s1 = this.y;\n  var s2 = p.y.redMul(z2).redMul(this.z);\n\n  var h = u1.redSub(u2);\n  var r = s1.redSub(s2);\n  if (h.cmpn(0) === 0) {\n    if (r.cmpn(0) !== 0)\n      return this.curve.jpoint(null, null, null);\n    else\n      return this.dbl();\n  }\n\n  var h2 = h.redSqr();\n  var h3 = h2.redMul(h);\n  var v = u1.redMul(h2);\n\n  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n  var nz = this.z.redMul(h);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.dblp = function dblp(pow) {\n  if (pow === 0)\n    return this;\n  if (this.isInfinity())\n    return this;\n  if (!pow)\n    return this.dbl();\n\n  var i;\n  if (this.curve.zeroA || this.curve.threeA) {\n    var r = this;\n    for (i = 0; i < pow; i++)\n      r = r.dbl();\n    return r;\n  }\n\n  // 1M + 2S + 1A + N * (4S + 5M + 8A)\n  // N = 1 => 6M + 6S + 9A\n  var a = this.curve.a;\n  var tinv = this.curve.tinv;\n\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  // Reuse results\n  var jyd = jy.redAdd(jy);\n  for (i = 0; i < pow; i++) {\n    var jx2 = jx.redSqr();\n    var jyd2 = jyd.redSqr();\n    var jyd4 = jyd2.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n    var t1 = jx.redMul(jyd2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var dny = c.redMul(t2);\n    dny = dny.redIAdd(dny).redISub(jyd4);\n    var nz = jyd.redMul(jz);\n    if (i + 1 < pow)\n      jz4 = jz4.redMul(jyd4);\n\n    jx = nx;\n    jz = nz;\n    jyd = dny;\n  }\n\n  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n};\n\nJPoint.prototype.dbl = function dbl() {\n  if (this.isInfinity())\n    return this;\n\n  if (this.curve.zeroA)\n    return this._zeroDbl();\n  else if (this.curve.threeA)\n    return this._threeDbl();\n  else\n    return this._dbl();\n};\n\nJPoint.prototype._zeroDbl = function _zeroDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 14A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a; a = 0\n    var m = xx.redAdd(xx).redIAdd(xx);\n    // T = M ^ 2 - 2*S\n    var t = m.redSqr().redISub(s).redISub(s);\n\n    // 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2*Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n    //     #doubling-dbl-2009-l\n    // 2M + 5S + 13A\n\n    // A = X1^2\n    var a = this.x.redSqr();\n    // B = Y1^2\n    var b = this.y.redSqr();\n    // C = B^2\n    var c = b.redSqr();\n    // D = 2 * ((X1 + B)^2 - A - C)\n    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n    d = d.redIAdd(d);\n    // E = 3 * A\n    var e = a.redAdd(a).redIAdd(a);\n    // F = E^2\n    var f = e.redSqr();\n\n    // 8 * C\n    var c8 = c.redIAdd(c);\n    c8 = c8.redIAdd(c8);\n    c8 = c8.redIAdd(c8);\n\n    // X3 = F - 2 * D\n    nx = f.redISub(d).redISub(d);\n    // Y3 = E * (D - X3) - 8 * C\n    ny = e.redMul(d.redISub(nx)).redISub(c8);\n    // Z3 = 2 * Y1 * Z1\n    nz = this.y.redMul(this.z);\n    nz = nz.redIAdd(nz);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._threeDbl = function _threeDbl() {\n  var nx;\n  var ny;\n  var nz;\n  // Z = 1\n  if (this.zOne) {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n    //     #doubling-mdbl-2007-bl\n    // 1M + 5S + 15A\n\n    // XX = X1^2\n    var xx = this.x.redSqr();\n    // YY = Y1^2\n    var yy = this.y.redSqr();\n    // YYYY = YY^2\n    var yyyy = yy.redSqr();\n    // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    s = s.redIAdd(s);\n    // M = 3 * XX + a\n    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);\n    // T = M^2 - 2 * S\n    var t = m.redSqr().redISub(s).redISub(s);\n    // X3 = T\n    nx = t;\n    // Y3 = M * (S - T) - 8 * YYYY\n    var yyyy8 = yyyy.redIAdd(yyyy);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    yyyy8 = yyyy8.redIAdd(yyyy8);\n    ny = m.redMul(s.redISub(t)).redISub(yyyy8);\n    // Z3 = 2 * Y1\n    nz = this.y.redAdd(this.y);\n  } else {\n    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n    // 3M + 5S\n\n    // delta = Z1^2\n    var delta = this.z.redSqr();\n    // gamma = Y1^2\n    var gamma = this.y.redSqr();\n    // beta = X1 * gamma\n    var beta = this.x.redMul(gamma);\n    // alpha = 3 * (X1 - delta) * (X1 + delta)\n    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n    alpha = alpha.redAdd(alpha).redIAdd(alpha);\n    // X3 = alpha^2 - 8 * beta\n    var beta4 = beta.redIAdd(beta);\n    beta4 = beta4.redIAdd(beta4);\n    var beta8 = beta4.redAdd(beta4);\n    nx = alpha.redSqr().redISub(beta8);\n    // Z3 = (Y1 + Z1)^2 - gamma - delta\n    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);\n    // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n    var ggamma8 = gamma.redSqr();\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ggamma8 = ggamma8.redIAdd(ggamma8);\n    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n  }\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype._dbl = function _dbl() {\n  var a = this.curve.a;\n\n  // 4M + 6S + 10A\n  var jx = this.x;\n  var jy = this.y;\n  var jz = this.z;\n  var jz4 = jz.redSqr().redSqr();\n\n  var jx2 = jx.redSqr();\n  var jy2 = jy.redSqr();\n\n  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n\n  var jxd4 = jx.redAdd(jx);\n  jxd4 = jxd4.redIAdd(jxd4);\n  var t1 = jxd4.redMul(jy2);\n  var nx = c.redSqr().redISub(t1.redAdd(t1));\n  var t2 = t1.redISub(nx);\n\n  var jyd8 = jy2.redSqr();\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  jyd8 = jyd8.redIAdd(jyd8);\n  var ny = c.redMul(t2).redISub(jyd8);\n  var nz = jy.redAdd(jy).redMul(jz);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.trpl = function trpl() {\n  if (!this.curve.zeroA)\n    return this.dbl().add(this);\n\n  // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n  // 5M + 10S + ...\n\n  // XX = X1^2\n  var xx = this.x.redSqr();\n  // YY = Y1^2\n  var yy = this.y.redSqr();\n  // ZZ = Z1^2\n  var zz = this.z.redSqr();\n  // YYYY = YY^2\n  var yyyy = yy.redSqr();\n  // M = 3 * XX + a * ZZ2; a = 0\n  var m = xx.redAdd(xx).redIAdd(xx);\n  // MM = M^2\n  var mm = m.redSqr();\n  // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n  e = e.redIAdd(e);\n  e = e.redAdd(e).redIAdd(e);\n  e = e.redISub(mm);\n  // EE = E^2\n  var ee = e.redSqr();\n  // T = 16*YYYY\n  var t = yyyy.redIAdd(yyyy);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  t = t.redIAdd(t);\n  // U = (M + E)^2 - MM - EE - T\n  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);\n  // X3 = 4 * (X1 * EE - 4 * YY * U)\n  var yyu4 = yy.redMul(u);\n  yyu4 = yyu4.redIAdd(yyu4);\n  yyu4 = yyu4.redIAdd(yyu4);\n  var nx = this.x.redMul(ee).redISub(yyu4);\n  nx = nx.redIAdd(nx);\n  nx = nx.redIAdd(nx);\n  // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  ny = ny.redIAdd(ny);\n  // Z3 = (Z1 + E)^2 - ZZ - EE\n  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n\n  return this.curve.jpoint(nx, ny, nz);\n};\n\nJPoint.prototype.mul = function mul(k, kbase) {\n  k = new BN(k, kbase);\n\n  return this.curve._wnafMul(this, k);\n};\n\nJPoint.prototype.eq = function eq(p) {\n  if (p.type === 'affine')\n    return this.eq(p.toJ());\n\n  if (this === p)\n    return true;\n\n  // x1 * z2^2 == x2 * z1^2\n  var z2 = this.z.redSqr();\n  var pz2 = p.z.redSqr();\n  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)\n    return false;\n\n  // y1 * z2^3 == y2 * z1^3\n  var z3 = z2.redMul(this.z);\n  var pz3 = pz2.redMul(p.z);\n  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n};\n\nJPoint.prototype.eqXToP = function eqXToP(x) {\n  var zs = this.z.redSqr();\n  var rx = x.toRed(this.curve.red).redMul(zs);\n  if (this.x.cmp(rx) === 0)\n    return true;\n\n  var xc = x.clone();\n  var t = this.curve.redN.redMul(zs);\n  for (;;) {\n    xc.iadd(this.curve.n);\n    if (xc.cmp(this.curve.p) >= 0)\n      return false;\n\n    rx.redIAdd(t);\n    if (this.x.cmp(rx) === 0)\n      return true;\n  }\n};\n\nJPoint.prototype.inspect = function inspect() {\n  if (this.isInfinity())\n    return '<EC JPoint Infinity>';\n  return '<EC JPoint x: ' + this.x.toString(16, 2) +\n      ' y: ' + this.y.toString(16, 2) +\n      ' z: ' + this.z.toString(16, 2) + '>';\n};\n\nJPoint.prototype.isInfinity = function isInfinity() {\n  // XXX This code assumes that zero is always zero in red\n  return this.z.cmpn(0) === 0;\n};\n","'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar curve = require('./curve');\nvar utils = require('./utils');\n\nvar assert = utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new curve.edwards(options);\n  else\n    this.curve = new curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve,\n      });\n      return curve;\n    },\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',\n  ],\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',\n  ],\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',\n  ],\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',\n  ],\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650',\n  ],\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9',\n  ],\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658',\n  ],\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3',\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15',\n    },\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre,\n  ],\n});\n","'use strict';\n\nvar BN = require('bn.js');\nvar HmacDRBG = require('hmac-drbg');\nvar utils = require('../utils');\nvar curves = require('../curves');\nvar rand = require('brorand');\nvar assert = utils.assert;\n\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EC(options) {\n  if (!(this instanceof EC))\n    return new EC(options);\n\n  // Shortcut `elliptic.ec(curve-name)`\n  if (typeof options === 'string') {\n    assert(Object.prototype.hasOwnProperty.call(curves, options),\n      'Unknown curve ' + options);\n\n    options = curves[options];\n  }\n\n  // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n  if (options instanceof curves.PresetCurve)\n    options = { curve: options };\n\n  this.curve = options.curve.curve;\n  this.n = this.curve.n;\n  this.nh = this.n.ushrn(1);\n  this.g = this.curve.g;\n\n  // Point on curve\n  this.g = options.curve.g;\n  this.g.precompute(options.curve.n.bitLength() + 1);\n\n  // Hash for function for DRBG\n  this.hash = options.hash || options.curve.hash;\n}\nmodule.exports = EC;\n\nEC.prototype.keyPair = function keyPair(options) {\n  return new KeyPair(this, options);\n};\n\nEC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n  return KeyPair.fromPrivate(this, priv, enc);\n};\n\nEC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n  return KeyPair.fromPublic(this, pub, enc);\n};\n\nEC.prototype.genKeyPair = function genKeyPair(options) {\n  if (!options)\n    options = {};\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n    entropy: options.entropy || rand(this.hash.hmacStrength),\n    entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n    nonce: this.n.toArray(),\n  });\n\n  var bytes = this.n.byteLength();\n  var ns2 = this.n.sub(new BN(2));\n  for (;;) {\n    var priv = new BN(drbg.generate(bytes));\n    if (priv.cmp(ns2) > 0)\n      continue;\n\n    priv.iaddn(1);\n    return this.keyFromPrivate(priv);\n  }\n};\n\nEC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {\n  var delta = msg.byteLength() * 8 - this.n.bitLength();\n  if (delta > 0)\n    msg = msg.ushrn(delta);\n  if (!truncOnly && msg.cmp(this.n) >= 0)\n    return msg.sub(this.n);\n  else\n    return msg;\n};\n\nEC.prototype.sign = function sign(msg, key, enc, options) {\n  if (typeof enc === 'object') {\n    options = enc;\n    enc = null;\n  }\n  if (!options)\n    options = {};\n\n  key = this.keyFromPrivate(key, enc);\n  msg = this._truncateToN(new BN(msg, 16));\n\n  // Zero-extend key to provide enough entropy\n  var bytes = this.n.byteLength();\n  var bkey = key.getPrivate().toArray('be', bytes);\n\n  // Zero-extend nonce to have the same byte size as N\n  var nonce = msg.toArray('be', bytes);\n\n  // Instantiate Hmac_DRBG\n  var drbg = new HmacDRBG({\n    hash: this.hash,\n    entropy: bkey,\n    nonce: nonce,\n    pers: options.pers,\n    persEnc: options.persEnc || 'utf8',\n  });\n\n  // Number of bytes to generate\n  var ns1 = this.n.sub(new BN(1));\n\n  for (var iter = 0; ; iter++) {\n    var k = options.k ?\n      options.k(iter) :\n      new BN(drbg.generate(this.n.byteLength()));\n    k = this._truncateToN(k, true);\n    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)\n      continue;\n\n    var kp = this.g.mul(k);\n    if (kp.isInfinity())\n      continue;\n\n    var kpX = kp.getX();\n    var r = kpX.umod(this.n);\n    if (r.cmpn(0) === 0)\n      continue;\n\n    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n    s = s.umod(this.n);\n    if (s.cmpn(0) === 0)\n      continue;\n\n    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |\n                        (kpX.cmp(r) !== 0 ? 2 : 0);\n\n    // Use complement of `s`, if it is > `n / 2`\n    if (options.canonical && s.cmp(this.nh) > 0) {\n      s = this.n.sub(s);\n      recoveryParam ^= 1;\n    }\n\n    return new Signature({ r: r, s: s, recoveryParam: recoveryParam });\n  }\n};\n\nEC.prototype.verify = function verify(msg, signature, key, enc) {\n  msg = this._truncateToN(new BN(msg, 16));\n  key = this.keyFromPublic(key, enc);\n  signature = new Signature(signature, 'hex');\n\n  // Perform primitive values validation\n  var r = signature.r;\n  var s = signature.s;\n  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)\n    return false;\n  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)\n    return false;\n\n  // Validate signature\n  var sinv = s.invm(this.n);\n  var u1 = sinv.mul(msg).umod(this.n);\n  var u2 = sinv.mul(r).umod(this.n);\n  var p;\n\n  if (!this.curve._maxwellTrick) {\n    p = this.g.mulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity())\n      return false;\n\n    return p.getX().umod(this.n).cmp(r) === 0;\n  }\n\n  // NOTE: Greg Maxwell's trick, inspired by:\n  // https://git.io/vad3K\n\n  p = this.g.jmulAdd(u1, key.getPublic(), u2);\n  if (p.isInfinity())\n    return false;\n\n  // Compare `p.x` of Jacobian point with `r`,\n  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n  // inverse of `p.z^2`\n  return p.eqXToP(r);\n};\n\nEC.prototype.recoverPubKey = function(msg, signature, j, enc) {\n  assert((3 & j) === j, 'The recovery param is more than two bits');\n  signature = new Signature(signature, enc);\n\n  var n = this.n;\n  var e = new BN(msg);\n  var r = signature.r;\n  var s = signature.s;\n\n  // A set LSB signifies that the y-coordinate is odd\n  var isYOdd = j & 1;\n  var isSecondKey = j >> 1;\n  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)\n    throw new Error('Unable to find sencond key candinate');\n\n  // 1.1. Let x = r + jn.\n  if (isSecondKey)\n    r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);\n  else\n    r = this.curve.pointFromX(r, isYOdd);\n\n  var rInv = signature.r.invm(n);\n  var s1 = n.sub(e).mul(rInv).umod(n);\n  var s2 = s.mul(rInv).umod(n);\n\n  // 1.6.1 Compute Q = r^-1 (sR -  eG)\n  //               Q = r^-1 (sR + -eG)\n  return this.g.mulAdd(s1, r, s2);\n};\n\nEC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {\n  signature = new Signature(signature, enc);\n  if (signature.recoveryParam !== null)\n    return signature.recoveryParam;\n\n  for (var i = 0; i < 4; i++) {\n    var Qprime;\n    try {\n      Qprime = this.recoverPubKey(e, signature, i);\n    } catch (e) {\n      continue;\n    }\n\n    if (Qprime.eq(Q))\n      return i;\n  }\n  throw new Error('Unable to find valid recovery factor');\n};\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction KeyPair(ec, options) {\n  this.ec = ec;\n  this.priv = null;\n  this.pub = null;\n\n  // KeyPair(ec, { priv: ..., pub: ... })\n  if (options.priv)\n    this._importPrivate(options.priv, options.privEnc);\n  if (options.pub)\n    this._importPublic(options.pub, options.pubEnc);\n}\nmodule.exports = KeyPair;\n\nKeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n  if (pub instanceof KeyPair)\n    return pub;\n\n  return new KeyPair(ec, {\n    pub: pub,\n    pubEnc: enc,\n  });\n};\n\nKeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n  if (priv instanceof KeyPair)\n    return priv;\n\n  return new KeyPair(ec, {\n    priv: priv,\n    privEnc: enc,\n  });\n};\n\nKeyPair.prototype.validate = function validate() {\n  var pub = this.getPublic();\n\n  if (pub.isInfinity())\n    return { result: false, reason: 'Invalid public key' };\n  if (!pub.validate())\n    return { result: false, reason: 'Public key is not a point' };\n  if (!pub.mul(this.ec.curve.n).isInfinity())\n    return { result: false, reason: 'Public key * N != O' };\n\n  return { result: true, reason: null };\n};\n\nKeyPair.prototype.getPublic = function getPublic(compact, enc) {\n  // compact is optional argument\n  if (typeof compact === 'string') {\n    enc = compact;\n    compact = null;\n  }\n\n  if (!this.pub)\n    this.pub = this.ec.g.mul(this.priv);\n\n  if (!enc)\n    return this.pub;\n\n  return this.pub.encode(enc, compact);\n};\n\nKeyPair.prototype.getPrivate = function getPrivate(enc) {\n  if (enc === 'hex')\n    return this.priv.toString(16, 2);\n  else\n    return this.priv;\n};\n\nKeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n  this.priv = new BN(key, enc || 16);\n\n  // Ensure that the priv won't be bigger than n, otherwise we may fail\n  // in fixed multiplication method\n  this.priv = this.priv.umod(this.ec.curve.n);\n};\n\nKeyPair.prototype._importPublic = function _importPublic(key, enc) {\n  if (key.x || key.y) {\n    // Montgomery points only have an `x` coordinate.\n    // Weierstrass/Edwards points on the other hand have both `x` and\n    // `y` coordinates.\n    if (this.ec.curve.type === 'mont') {\n      assert(key.x, 'Need x coordinate');\n    } else if (this.ec.curve.type === 'short' ||\n               this.ec.curve.type === 'edwards') {\n      assert(key.x && key.y, 'Need both x and y coordinate');\n    }\n    this.pub = this.ec.curve.point(key.x, key.y);\n    return;\n  }\n  this.pub = this.ec.curve.decodePoint(key, enc);\n};\n\n// ECDH\nKeyPair.prototype.derive = function derive(pub) {\n  if(!pub.validate()) {\n    assert(pub.validate(), 'public point not validated');\n  }\n  return pub.mul(this.priv).getX();\n};\n\n// ECDSA\nKeyPair.prototype.sign = function sign(msg, enc, options) {\n  return this.ec.sign(msg, this, enc, options);\n};\n\nKeyPair.prototype.verify = function verify(msg, signature) {\n  return this.ec.verify(msg, signature, this);\n};\n\nKeyPair.prototype.inspect = function inspect() {\n  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +\n         ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n};\n","'use strict';\n\nvar BN = require('bn.js');\n\nvar utils = require('../utils');\nvar assert = utils.assert;\n\nfunction Signature(options, enc) {\n  if (options instanceof Signature)\n    return options;\n\n  if (this._importDER(options, enc))\n    return;\n\n  assert(options.r && options.s, 'Signature without r or s');\n  this.r = new BN(options.r, 16);\n  this.s = new BN(options.s, 16);\n  if (options.recoveryParam === undefined)\n    this.recoveryParam = null;\n  else\n    this.recoveryParam = options.recoveryParam;\n}\nmodule.exports = Signature;\n\nfunction Position() {\n  this.place = 0;\n}\n\nfunction getLength(buf, p) {\n  var initial = buf[p.place++];\n  if (!(initial & 0x80)) {\n    return initial;\n  }\n  var octetLen = initial & 0xf;\n\n  // Indefinite length or overflow\n  if (octetLen === 0 || octetLen > 4) {\n    return false;\n  }\n\n  var val = 0;\n  for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n    val <<= 8;\n    val |= buf[off];\n    val >>>= 0;\n  }\n\n  // Leading zeroes\n  if (val <= 0x7f) {\n    return false;\n  }\n\n  p.place = off;\n  return val;\n}\n\nfunction rmPadding(buf) {\n  var i = 0;\n  var len = buf.length - 1;\n  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n    i++;\n  }\n  if (i === 0) {\n    return buf;\n  }\n  return buf.slice(i);\n}\n\nSignature.prototype._importDER = function _importDER(data, enc) {\n  data = utils.toArray(data, enc);\n  var p = new Position();\n  if (data[p.place++] !== 0x30) {\n    return false;\n  }\n  var len = getLength(data, p);\n  if (len === false) {\n    return false;\n  }\n  if ((len + p.place) !== data.length) {\n    return false;\n  }\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var rlen = getLength(data, p);\n  if (rlen === false) {\n    return false;\n  }\n  var r = data.slice(p.place, rlen + p.place);\n  p.place += rlen;\n  if (data[p.place++] !== 0x02) {\n    return false;\n  }\n  var slen = getLength(data, p);\n  if (slen === false) {\n    return false;\n  }\n  if (data.length !== slen + p.place) {\n    return false;\n  }\n  var s = data.slice(p.place, slen + p.place);\n  if (r[0] === 0) {\n    if (r[1] & 0x80) {\n      r = r.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n  if (s[0] === 0) {\n    if (s[1] & 0x80) {\n      s = s.slice(1);\n    } else {\n      // Leading zeroes\n      return false;\n    }\n  }\n\n  this.r = new BN(r);\n  this.s = new BN(s);\n  this.recoveryParam = null;\n\n  return true;\n};\n\nfunction constructLength(arr, len) {\n  if (len < 0x80) {\n    arr.push(len);\n    return;\n  }\n  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n  arr.push(octets | 0x80);\n  while (--octets) {\n    arr.push((len >>> (octets << 3)) & 0xff);\n  }\n  arr.push(len);\n}\n\nSignature.prototype.toDER = function toDER(enc) {\n  var r = this.r.toArray();\n  var s = this.s.toArray();\n\n  // Pad values\n  if (r[0] & 0x80)\n    r = [ 0 ].concat(r);\n  // Pad values\n  if (s[0] & 0x80)\n    s = [ 0 ].concat(s);\n\n  r = rmPadding(r);\n  s = rmPadding(s);\n\n  while (!s[0] && !(s[1] & 0x80)) {\n    s = s.slice(1);\n  }\n  var arr = [ 0x02 ];\n  constructLength(arr, r.length);\n  arr = arr.concat(r);\n  arr.push(0x02);\n  constructLength(arr, s.length);\n  var backHalf = arr.concat(s);\n  var res = [ 0x30 ];\n  constructLength(res, backHalf.length);\n  res = res.concat(backHalf);\n  return utils.encode(res, enc);\n};\n","'use strict';\n\nvar hash = require('hash.js');\nvar curves = require('../curves');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  curve = curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n    .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar cachedProperty = utils.cachedProperty;\n\n/**\n* @param {EDDSA} eddsa - instance\n* @param {Object} params - public/private key parameters\n*\n* @param {Array<Byte>} [params.secret] - secret seed bytes\n* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)\n* @param {Array<Byte>} [params.pub] - public key point encoded as bytes\n*\n*/\nfunction KeyPair(eddsa, params) {\n  this.eddsa = eddsa;\n  this._secret = parseBytes(params.secret);\n  if (eddsa.isPoint(params.pub))\n    this._pub = params.pub;\n  else\n    this._pubBytes = parseBytes(params.pub);\n}\n\nKeyPair.fromPublic = function fromPublic(eddsa, pub) {\n  if (pub instanceof KeyPair)\n    return pub;\n  return new KeyPair(eddsa, { pub: pub });\n};\n\nKeyPair.fromSecret = function fromSecret(eddsa, secret) {\n  if (secret instanceof KeyPair)\n    return secret;\n  return new KeyPair(eddsa, { secret: secret });\n};\n\nKeyPair.prototype.secret = function secret() {\n  return this._secret;\n};\n\ncachedProperty(KeyPair, 'pubBytes', function pubBytes() {\n  return this.eddsa.encodePoint(this.pub());\n});\n\ncachedProperty(KeyPair, 'pub', function pub() {\n  if (this._pubBytes)\n    return this.eddsa.decodePoint(this._pubBytes);\n  return this.eddsa.g.mul(this.priv());\n});\n\ncachedProperty(KeyPair, 'privBytes', function privBytes() {\n  var eddsa = this.eddsa;\n  var hash = this.hash();\n  var lastIx = eddsa.encodingLength - 1;\n\n  var a = hash.slice(0, eddsa.encodingLength);\n  a[0] &= 248;\n  a[lastIx] &= 127;\n  a[lastIx] |= 64;\n\n  return a;\n});\n\ncachedProperty(KeyPair, 'priv', function priv() {\n  return this.eddsa.decodeInt(this.privBytes());\n});\n\ncachedProperty(KeyPair, 'hash', function hash() {\n  return this.eddsa.hash().update(this.secret()).digest();\n});\n\ncachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {\n  return this.hash().slice(this.eddsa.encodingLength);\n});\n\nKeyPair.prototype.sign = function sign(message) {\n  assert(this._secret, 'KeyPair can only verify');\n  return this.eddsa.sign(message, this);\n};\n\nKeyPair.prototype.verify = function verify(message, sig) {\n  return this.eddsa.verify(message, sig, this);\n};\n\nKeyPair.prototype.getSecret = function getSecret(enc) {\n  assert(this._secret, 'KeyPair is public only');\n  return utils.encode(this.secret(), enc);\n};\n\nKeyPair.prototype.getPublic = function getPublic(enc) {\n  return utils.encode(this.pubBytes(), enc);\n};\n\nmodule.exports = KeyPair;\n","'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength),\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n","module.exports = {\n  doubles: {\n    step: 4,\n    points: [\n      [\n        'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',\n        'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821',\n      ],\n      [\n        '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',\n        '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf',\n      ],\n      [\n        '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',\n        'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695',\n      ],\n      [\n        '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',\n        '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9',\n      ],\n      [\n        '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',\n        '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36',\n      ],\n      [\n        '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',\n        '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f',\n      ],\n      [\n        'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',\n        '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999',\n      ],\n      [\n        '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',\n        'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09',\n      ],\n      [\n        'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',\n        '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d',\n      ],\n      [\n        'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',\n        'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088',\n      ],\n      [\n        'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',\n        '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d',\n      ],\n      [\n        '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',\n        '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8',\n      ],\n      [\n        '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',\n        '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a',\n      ],\n      [\n        '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',\n        '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453',\n      ],\n      [\n        '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',\n        '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160',\n      ],\n      [\n        '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',\n        '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0',\n      ],\n      [\n        '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',\n        '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6',\n      ],\n      [\n        '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',\n        '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589',\n      ],\n      [\n        '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',\n        'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17',\n      ],\n      [\n        'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',\n        '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda',\n      ],\n      [\n        'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',\n        '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd',\n      ],\n      [\n        '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',\n        '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2',\n      ],\n      [\n        '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',\n        '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6',\n      ],\n      [\n        'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',\n        '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f',\n      ],\n      [\n        '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',\n        'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01',\n      ],\n      [\n        'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',\n        '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3',\n      ],\n      [\n        'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',\n        'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f',\n      ],\n      [\n        'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',\n        '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7',\n      ],\n      [\n        'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',\n        'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78',\n      ],\n      [\n        'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',\n        '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1',\n      ],\n      [\n        '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',\n        'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150',\n      ],\n      [\n        '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',\n        '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82',\n      ],\n      [\n        'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',\n        '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc',\n      ],\n      [\n        '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',\n        'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b',\n      ],\n      [\n        'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',\n        '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51',\n      ],\n      [\n        'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',\n        '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45',\n      ],\n      [\n        'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',\n        'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120',\n      ],\n      [\n        '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',\n        '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84',\n      ],\n      [\n        '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',\n        '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d',\n      ],\n      [\n        '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',\n        'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d',\n      ],\n      [\n        '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',\n        '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8',\n      ],\n      [\n        'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',\n        '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8',\n      ],\n      [\n        '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',\n        '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac',\n      ],\n      [\n        '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',\n        'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f',\n      ],\n      [\n        '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',\n        '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962',\n      ],\n      [\n        'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',\n        '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907',\n      ],\n      [\n        '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',\n        'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec',\n      ],\n      [\n        'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',\n        'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d',\n      ],\n      [\n        'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',\n        '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414',\n      ],\n      [\n        '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',\n        'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd',\n      ],\n      [\n        '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',\n        'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0',\n      ],\n      [\n        'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',\n        '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811',\n      ],\n      [\n        'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',\n        '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1',\n      ],\n      [\n        'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',\n        '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c',\n      ],\n      [\n        '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',\n        'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73',\n      ],\n      [\n        '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',\n        '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd',\n      ],\n      [\n        'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',\n        'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405',\n      ],\n      [\n        '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',\n        'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589',\n      ],\n      [\n        '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',\n        '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e',\n      ],\n      [\n        '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',\n        '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27',\n      ],\n      [\n        'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',\n        'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1',\n      ],\n      [\n        '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',\n        '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482',\n      ],\n      [\n        '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',\n        '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945',\n      ],\n      [\n        'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',\n        '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573',\n      ],\n      [\n        'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',\n        'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82',\n      ],\n    ],\n  },\n  naf: {\n    wnd: 7,\n    points: [\n      [\n        'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',\n        '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672',\n      ],\n      [\n        '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',\n        'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6',\n      ],\n      [\n        '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',\n        '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da',\n      ],\n      [\n        'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',\n        'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37',\n      ],\n      [\n        '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',\n        'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b',\n      ],\n      [\n        'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',\n        'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81',\n      ],\n      [\n        'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',\n        '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58',\n      ],\n      [\n        'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',\n        '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77',\n      ],\n      [\n        '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',\n        '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a',\n      ],\n      [\n        '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',\n        '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c',\n      ],\n      [\n        '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',\n        '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67',\n      ],\n      [\n        '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',\n        '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402',\n      ],\n      [\n        'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',\n        'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55',\n      ],\n      [\n        'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',\n        '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482',\n      ],\n      [\n        '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',\n        'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82',\n      ],\n      [\n        '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',\n        'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396',\n      ],\n      [\n        '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',\n        '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49',\n      ],\n      [\n        '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',\n        '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf',\n      ],\n      [\n        '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',\n        '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a',\n      ],\n      [\n        '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',\n        'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7',\n      ],\n      [\n        'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',\n        'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933',\n      ],\n      [\n        '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',\n        '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a',\n      ],\n      [\n        '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',\n        '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6',\n      ],\n      [\n        'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',\n        'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37',\n      ],\n      [\n        '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',\n        '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e',\n      ],\n      [\n        'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',\n        'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6',\n      ],\n      [\n        'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',\n        'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476',\n      ],\n      [\n        '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',\n        '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40',\n      ],\n      [\n        '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',\n        '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61',\n      ],\n      [\n        '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',\n        '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683',\n      ],\n      [\n        'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',\n        '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5',\n      ],\n      [\n        '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',\n        '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b',\n      ],\n      [\n        'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',\n        '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417',\n      ],\n      [\n        '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',\n        'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868',\n      ],\n      [\n        '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',\n        'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a',\n      ],\n      [\n        'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',\n        'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6',\n      ],\n      [\n        '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',\n        '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996',\n      ],\n      [\n        '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',\n        'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e',\n      ],\n      [\n        'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',\n        'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d',\n      ],\n      [\n        '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',\n        '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2',\n      ],\n      [\n        '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',\n        'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e',\n      ],\n      [\n        '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',\n        '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437',\n      ],\n      [\n        '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',\n        'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311',\n      ],\n      [\n        'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',\n        '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4',\n      ],\n      [\n        '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',\n        '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575',\n      ],\n      [\n        '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',\n        'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d',\n      ],\n      [\n        '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',\n        'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d',\n      ],\n      [\n        'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',\n        'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629',\n      ],\n      [\n        'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',\n        'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06',\n      ],\n      [\n        '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',\n        '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374',\n      ],\n      [\n        '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',\n        '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee',\n      ],\n      [\n        'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',\n        '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1',\n      ],\n      [\n        'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',\n        'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b',\n      ],\n      [\n        '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',\n        '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661',\n      ],\n      [\n        '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',\n        '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6',\n      ],\n      [\n        'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',\n        '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e',\n      ],\n      [\n        '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',\n        '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d',\n      ],\n      [\n        'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',\n        'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc',\n      ],\n      [\n        '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',\n        'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4',\n      ],\n      [\n        '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',\n        '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c',\n      ],\n      [\n        'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',\n        '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b',\n      ],\n      [\n        'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',\n        '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913',\n      ],\n      [\n        '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',\n        '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154',\n      ],\n      [\n        '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',\n        '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865',\n      ],\n      [\n        '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',\n        'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc',\n      ],\n      [\n        '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',\n        'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224',\n      ],\n      [\n        '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',\n        '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e',\n      ],\n      [\n        '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',\n        '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6',\n      ],\n      [\n        '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',\n        '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511',\n      ],\n      [\n        '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',\n        'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b',\n      ],\n      [\n        'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',\n        'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2',\n      ],\n      [\n        '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',\n        'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c',\n      ],\n      [\n        'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',\n        '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3',\n      ],\n      [\n        'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',\n        '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d',\n      ],\n      [\n        'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',\n        '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700',\n      ],\n      [\n        'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',\n        '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4',\n      ],\n      [\n        '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',\n        'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196',\n      ],\n      [\n        '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',\n        '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4',\n      ],\n      [\n        '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',\n        'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257',\n      ],\n      [\n        'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',\n        'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13',\n      ],\n      [\n        'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',\n        '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096',\n      ],\n      [\n        'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',\n        'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38',\n      ],\n      [\n        'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',\n        '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f',\n      ],\n      [\n        '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',\n        '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448',\n      ],\n      [\n        'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',\n        '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a',\n      ],\n      [\n        'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',\n        '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4',\n      ],\n      [\n        '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',\n        '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437',\n      ],\n      [\n        '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',\n        'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7',\n      ],\n      [\n        'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',\n        '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d',\n      ],\n      [\n        'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',\n        '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a',\n      ],\n      [\n        'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',\n        '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54',\n      ],\n      [\n        '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',\n        '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77',\n      ],\n      [\n        'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',\n        'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517',\n      ],\n      [\n        '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',\n        'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10',\n      ],\n      [\n        'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',\n        'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125',\n      ],\n      [\n        'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',\n        '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e',\n      ],\n      [\n        '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',\n        'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1',\n      ],\n      [\n        'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',\n        '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2',\n      ],\n      [\n        'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',\n        '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423',\n      ],\n      [\n        'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',\n        '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8',\n      ],\n      [\n        '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',\n        'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758',\n      ],\n      [\n        '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',\n        'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375',\n      ],\n      [\n        'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',\n        '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d',\n      ],\n      [\n        '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',\n        'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec',\n      ],\n      [\n        '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',\n        '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0',\n      ],\n      [\n        '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',\n        'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c',\n      ],\n      [\n        'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',\n        'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4',\n      ],\n      [\n        '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',\n        'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f',\n      ],\n      [\n        '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',\n        '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649',\n      ],\n      [\n        '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',\n        'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826',\n      ],\n      [\n        '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',\n        '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5',\n      ],\n      [\n        'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',\n        'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87',\n      ],\n      [\n        '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',\n        '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b',\n      ],\n      [\n        'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',\n        '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc',\n      ],\n      [\n        '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',\n        '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c',\n      ],\n      [\n        'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',\n        'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f',\n      ],\n      [\n        'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',\n        '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a',\n      ],\n      [\n        'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',\n        'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46',\n      ],\n      [\n        '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',\n        'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f',\n      ],\n      [\n        '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',\n        '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03',\n      ],\n      [\n        '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',\n        'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08',\n      ],\n      [\n        '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',\n        '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8',\n      ],\n      [\n        '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',\n        '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373',\n      ],\n      [\n        '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',\n        'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3',\n      ],\n      [\n        '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',\n        '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8',\n      ],\n      [\n        '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',\n        '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1',\n      ],\n      [\n        '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',\n        '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9',\n      ],\n    ],\n  },\n};\n","'use strict';\n\nvar utils = exports;\nvar BN = require('bn.js');\nvar minAssert = require('minimalistic-assert');\nvar minUtils = require('minimalistic-crypto-utils');\n\nutils.assert = minAssert;\nutils.toArray = minUtils.toArray;\nutils.zero2 = minUtils.zero2;\nutils.toHex = minUtils.toHex;\nutils.encode = minUtils.encode;\n\n// Represent num in a w-NAF form\nfunction getNAF(num, w, bits) {\n  var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n  naf.fill(0);\n\n  var ws = 1 << (w + 1);\n  var k = num.clone();\n\n  for (var i = 0; i < naf.length; i++) {\n    var z;\n    var mod = k.andln(ws - 1);\n    if (k.isOdd()) {\n      if (mod > (ws >> 1) - 1)\n        z = (ws >> 1) - mod;\n      else\n        z = mod;\n      k.isubn(z);\n    } else {\n      z = 0;\n    }\n\n    naf[i] = z;\n    k.iushrn(1);\n  }\n\n  return naf;\n}\nutils.getNAF = getNAF;\n\n// Represent k1, k2 in a Joint Sparse Form\nfunction getJSF(k1, k2) {\n  var jsf = [\n    [],\n    [],\n  ];\n\n  k1 = k1.clone();\n  k2 = k2.clone();\n  var d1 = 0;\n  var d2 = 0;\n  var m8;\n  while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n    // First phase\n    var m14 = (k1.andln(3) + d1) & 3;\n    var m24 = (k2.andln(3) + d2) & 3;\n    if (m14 === 3)\n      m14 = -1;\n    if (m24 === 3)\n      m24 = -1;\n    var u1;\n    if ((m14 & 1) === 0) {\n      u1 = 0;\n    } else {\n      m8 = (k1.andln(7) + d1) & 7;\n      if ((m8 === 3 || m8 === 5) && m24 === 2)\n        u1 = -m14;\n      else\n        u1 = m14;\n    }\n    jsf[0].push(u1);\n\n    var u2;\n    if ((m24 & 1) === 0) {\n      u2 = 0;\n    } else {\n      m8 = (k2.andln(7) + d2) & 7;\n      if ((m8 === 3 || m8 === 5) && m14 === 2)\n        u2 = -m24;\n      else\n        u2 = m24;\n    }\n    jsf[1].push(u2);\n\n    // Second phase\n    if (2 * d1 === u1 + 1)\n      d1 = 1 - d1;\n    if (2 * d2 === u2 + 1)\n      d2 = 1 - d2;\n    k1.iushrn(1);\n    k2.iushrn(1);\n  }\n\n  return jsf;\n}\nutils.getJSF = getJSF;\n\nfunction cachedProperty(obj, name, computer) {\n  var key = '_' + name;\n  obj.prototype[name] = function cachedProperty() {\n    return this[key] !== undefined ? this[key] :\n      this[key] = computer.call(this);\n  };\n}\nutils.cachedProperty = cachedProperty;\n\nfunction parseBytes(bytes) {\n  return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :\n    bytes;\n}\nutils.parseBytes = parseBytes;\n\nfunction intFromLE(bytes) {\n  return new BN(bytes, 'hex', 'le');\n}\nutils.intFromLE = intFromLE;\n\n","(function (module, exports) {\n  'use strict';\n\n  // Utils\n  function assert (val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  // Could use `inherits` module, but don't want to move from single file\n  // architecture yet.\n  function inherits (ctor, superCtor) {\n    ctor.super_ = superCtor;\n    var TempCtor = function () {};\n    TempCtor.prototype = superCtor.prototype;\n    ctor.prototype = new TempCtor();\n    ctor.prototype.constructor = ctor;\n  }\n\n  // BN\n\n  function BN (number, base, endian) {\n    if (BN.isBN(number)) {\n      return number;\n    }\n\n    this.negative = 0;\n    this.words = null;\n    this.length = 0;\n\n    // Reduction context\n    this.red = null;\n\n    if (number !== null) {\n      if (base === 'le' || base === 'be') {\n        endian = base;\n        base = 10;\n      }\n\n      this._init(number || 0, base || 10, endian || 'be');\n    }\n  }\n  if (typeof module === 'object') {\n    module.exports = BN;\n  } else {\n    exports.BN = BN;\n  }\n\n  BN.BN = BN;\n  BN.wordSize = 26;\n\n  var Buffer;\n  try {\n    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {\n      Buffer = window.Buffer;\n    } else {\n      Buffer = require('buffer').Buffer;\n    }\n  } catch (e) {\n  }\n\n  BN.isBN = function isBN (num) {\n    if (num instanceof BN) {\n      return true;\n    }\n\n    return num !== null && typeof num === 'object' &&\n      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n  };\n\n  BN.max = function max (left, right) {\n    if (left.cmp(right) > 0) return left;\n    return right;\n  };\n\n  BN.min = function min (left, right) {\n    if (left.cmp(right) < 0) return left;\n    return right;\n  };\n\n  BN.prototype._init = function init (number, base, endian) {\n    if (typeof number === 'number') {\n      return this._initNumber(number, base, endian);\n    }\n\n    if (typeof number === 'object') {\n      return this._initArray(number, base, endian);\n    }\n\n    if (base === 'hex') {\n      base = 16;\n    }\n    assert(base === (base | 0) && base >= 2 && base <= 36);\n\n    number = number.toString().replace(/\\s+/g, '');\n    var start = 0;\n    if (number[0] === '-') {\n      start++;\n      this.negative = 1;\n    }\n\n    if (start < number.length) {\n      if (base === 16) {\n        this._parseHex(number, start, endian);\n      } else {\n        this._parseBase(number, base, start);\n        if (endian === 'le') {\n          this._initArray(this.toArray(), base, endian);\n        }\n      }\n    }\n  };\n\n  BN.prototype._initNumber = function _initNumber (number, base, endian) {\n    if (number < 0) {\n      this.negative = 1;\n      number = -number;\n    }\n    if (number < 0x4000000) {\n      this.words = [ number & 0x3ffffff ];\n      this.length = 1;\n    } else if (number < 0x10000000000000) {\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff\n      ];\n      this.length = 2;\n    } else {\n      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n      this.words = [\n        number & 0x3ffffff,\n        (number / 0x4000000) & 0x3ffffff,\n        1\n      ];\n      this.length = 3;\n    }\n\n    if (endian !== 'le') return;\n\n    // Reverse the bytes\n    this._initArray(this.toArray(), base, endian);\n  };\n\n  BN.prototype._initArray = function _initArray (number, base, endian) {\n    // Perhaps a Uint8Array\n    assert(typeof number.length === 'number');\n    if (number.length <= 0) {\n      this.words = [ 0 ];\n      this.length = 1;\n      return this;\n    }\n\n    this.length = Math.ceil(number.length / 3);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    var j, w;\n    var off = 0;\n    if (endian === 'be') {\n      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    } else if (endian === 'le') {\n      for (i = 0, j = 0; i < number.length; i += 3) {\n        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);\n        this.words[j] |= (w << off) & 0x3ffffff;\n        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;\n        off += 24;\n        if (off >= 26) {\n          off -= 26;\n          j++;\n        }\n      }\n    }\n    return this.strip();\n  };\n\n  function parseHex4Bits (string, index) {\n    var c = string.charCodeAt(index);\n    // 'A' - 'F'\n    if (c >= 65 && c <= 70) {\n      return c - 55;\n    // 'a' - 'f'\n    } else if (c >= 97 && c <= 102) {\n      return c - 87;\n    // '0' - '9'\n    } else {\n      return (c - 48) & 0xf;\n    }\n  }\n\n  function parseHexByte (string, lowerBound, index) {\n    var r = parseHex4Bits(string, index);\n    if (index - 1 >= lowerBound) {\n      r |= parseHex4Bits(string, index - 1) << 4;\n    }\n    return r;\n  }\n\n  BN.prototype._parseHex = function _parseHex (number, start, endian) {\n    // Create possibly bigger array to ensure that it fits the number\n    this.length = Math.ceil((number.length - start) / 6);\n    this.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      this.words[i] = 0;\n    }\n\n    // 24-bits chunks\n    var off = 0;\n    var j = 0;\n\n    var w;\n    if (endian === 'be') {\n      for (i = number.length - 1; i >= start; i -= 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    } else {\n      var parseLength = number.length - start;\n      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {\n        w = parseHexByte(number, start, i) << off;\n        this.words[j] |= w & 0x3ffffff;\n        if (off >= 18) {\n          off -= 18;\n          j += 1;\n          this.words[j] |= w >>> 26;\n        } else {\n          off += 8;\n        }\n      }\n    }\n\n    this.strip();\n  };\n\n  function parseBase (str, start, end, mul) {\n    var r = 0;\n    var len = Math.min(str.length, end);\n    for (var i = start; i < len; i++) {\n      var c = str.charCodeAt(i) - 48;\n\n      r *= mul;\n\n      // 'a'\n      if (c >= 49) {\n        r += c - 49 + 0xa;\n\n      // 'A'\n      } else if (c >= 17) {\n        r += c - 17 + 0xa;\n\n      // '0' - '9'\n      } else {\n        r += c;\n      }\n    }\n    return r;\n  }\n\n  BN.prototype._parseBase = function _parseBase (number, base, start) {\n    // Initialize as zero\n    this.words = [ 0 ];\n    this.length = 1;\n\n    // Find length of limb in base\n    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n      limbLen++;\n    }\n    limbLen--;\n    limbPow = (limbPow / base) | 0;\n\n    var total = number.length - start;\n    var mod = total % limbLen;\n    var end = Math.min(total, total - mod) + start;\n\n    var word = 0;\n    for (var i = start; i < end; i += limbLen) {\n      word = parseBase(number, i, i + limbLen, base);\n\n      this.imuln(limbPow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    if (mod !== 0) {\n      var pow = 1;\n      word = parseBase(number, i, number.length, base);\n\n      for (i = 0; i < mod; i++) {\n        pow *= base;\n      }\n\n      this.imuln(pow);\n      if (this.words[0] + word < 0x4000000) {\n        this.words[0] += word;\n      } else {\n        this._iaddn(word);\n      }\n    }\n\n    this.strip();\n  };\n\n  BN.prototype.copy = function copy (dest) {\n    dest.words = new Array(this.length);\n    for (var i = 0; i < this.length; i++) {\n      dest.words[i] = this.words[i];\n    }\n    dest.length = this.length;\n    dest.negative = this.negative;\n    dest.red = this.red;\n  };\n\n  BN.prototype.clone = function clone () {\n    var r = new BN(null);\n    this.copy(r);\n    return r;\n  };\n\n  BN.prototype._expand = function _expand (size) {\n    while (this.length < size) {\n      this.words[this.length++] = 0;\n    }\n    return this;\n  };\n\n  // Remove leading `0` from `this`\n  BN.prototype.strip = function strip () {\n    while (this.length > 1 && this.words[this.length - 1] === 0) {\n      this.length--;\n    }\n    return this._normSign();\n  };\n\n  BN.prototype._normSign = function _normSign () {\n    // -0 = 0\n    if (this.length === 1 && this.words[0] === 0) {\n      this.negative = 0;\n    }\n    return this;\n  };\n\n  BN.prototype.inspect = function inspect () {\n    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n  };\n\n  /*\n\n  var zeros = [];\n  var groupSizes = [];\n  var groupBases = [];\n\n  var s = '';\n  var i = -1;\n  while (++i < BN.wordSize) {\n    zeros[i] = s;\n    s += '0';\n  }\n  groupSizes[0] = 0;\n  groupSizes[1] = 0;\n  groupBases[0] = 0;\n  groupBases[1] = 0;\n  var base = 2 - 1;\n  while (++base < 36 + 1) {\n    var groupSize = 0;\n    var groupBase = 1;\n    while (groupBase < (1 << BN.wordSize) / base) {\n      groupBase *= base;\n      groupSize += 1;\n    }\n    groupSizes[base] = groupSize;\n    groupBases[base] = groupBase;\n  }\n\n  */\n\n  var zeros = [\n    '',\n    '0',\n    '00',\n    '000',\n    '0000',\n    '00000',\n    '000000',\n    '0000000',\n    '00000000',\n    '000000000',\n    '0000000000',\n    '00000000000',\n    '000000000000',\n    '0000000000000',\n    '00000000000000',\n    '000000000000000',\n    '0000000000000000',\n    '00000000000000000',\n    '000000000000000000',\n    '0000000000000000000',\n    '00000000000000000000',\n    '000000000000000000000',\n    '0000000000000000000000',\n    '00000000000000000000000',\n    '000000000000000000000000',\n    '0000000000000000000000000'\n  ];\n\n  var groupSizes = [\n    0, 0,\n    25, 16, 12, 11, 10, 9, 8,\n    8, 7, 7, 7, 7, 6, 6,\n    6, 6, 6, 6, 6, 5, 5,\n    5, 5, 5, 5, 5, 5, 5,\n    5, 5, 5, 5, 5, 5, 5\n  ];\n\n  var groupBases = [\n    0, 0,\n    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,\n    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,\n    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,\n    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,\n    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176\n  ];\n\n  BN.prototype.toString = function toString (base, padding) {\n    base = base || 10;\n    padding = padding | 0 || 1;\n\n    var out;\n    if (base === 16 || base === 'hex') {\n      out = '';\n      var off = 0;\n      var carry = 0;\n      for (var i = 0; i < this.length; i++) {\n        var w = this.words[i];\n        var word = (((w << off) | carry) & 0xffffff).toString(16);\n        carry = (w >>> (24 - off)) & 0xffffff;\n        if (carry !== 0 || i !== this.length - 1) {\n          out = zeros[6 - word.length] + word + out;\n        } else {\n          out = word + out;\n        }\n        off += 2;\n        if (off >= 26) {\n          off -= 26;\n          i--;\n        }\n      }\n      if (carry !== 0) {\n        out = carry.toString(16) + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    if (base === (base | 0) && base >= 2 && base <= 36) {\n      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n      var groupSize = groupSizes[base];\n      // var groupBase = Math.pow(base, groupSize);\n      var groupBase = groupBases[base];\n      out = '';\n      var c = this.clone();\n      c.negative = 0;\n      while (!c.isZero()) {\n        var r = c.modn(groupBase).toString(base);\n        c = c.idivn(groupBase);\n\n        if (!c.isZero()) {\n          out = zeros[groupSize - r.length] + r + out;\n        } else {\n          out = r + out;\n        }\n      }\n      if (this.isZero()) {\n        out = '0' + out;\n      }\n      while (out.length % padding !== 0) {\n        out = '0' + out;\n      }\n      if (this.negative !== 0) {\n        out = '-' + out;\n      }\n      return out;\n    }\n\n    assert(false, 'Base should be between 2 and 36');\n  };\n\n  BN.prototype.toNumber = function toNumber () {\n    var ret = this.words[0];\n    if (this.length === 2) {\n      ret += this.words[1] * 0x4000000;\n    } else if (this.length === 3 && this.words[2] === 0x01) {\n      // NOTE: at this stage it is known that the top bit is set\n      ret += 0x10000000000000 + (this.words[1] * 0x4000000);\n    } else if (this.length > 2) {\n      assert(false, 'Number can only safely store up to 53 bits');\n    }\n    return (this.negative !== 0) ? -ret : ret;\n  };\n\n  BN.prototype.toJSON = function toJSON () {\n    return this.toString(16);\n  };\n\n  BN.prototype.toBuffer = function toBuffer (endian, length) {\n    assert(typeof Buffer !== 'undefined');\n    return this.toArrayLike(Buffer, endian, length);\n  };\n\n  BN.prototype.toArray = function toArray (endian, length) {\n    return this.toArrayLike(Array, endian, length);\n  };\n\n  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {\n    var byteLength = this.byteLength();\n    var reqLength = length || Math.max(1, byteLength);\n    assert(byteLength <= reqLength, 'byte array longer than desired length');\n    assert(reqLength > 0, 'Requested array length <= 0');\n\n    this.strip();\n    var littleEndian = endian === 'le';\n    var res = new ArrayType(reqLength);\n\n    var b, i;\n    var q = this.clone();\n    if (!littleEndian) {\n      // Assume big-endian\n      for (i = 0; i < reqLength - byteLength; i++) {\n        res[i] = 0;\n      }\n\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[reqLength - i - 1] = b;\n      }\n    } else {\n      for (i = 0; !q.isZero(); i++) {\n        b = q.andln(0xff);\n        q.iushrn(8);\n\n        res[i] = b;\n      }\n\n      for (; i < reqLength; i++) {\n        res[i] = 0;\n      }\n    }\n\n    return res;\n  };\n\n  if (Math.clz32) {\n    BN.prototype._countBits = function _countBits (w) {\n      return 32 - Math.clz32(w);\n    };\n  } else {\n    BN.prototype._countBits = function _countBits (w) {\n      var t = w;\n      var r = 0;\n      if (t >= 0x1000) {\n        r += 13;\n        t >>>= 13;\n      }\n      if (t >= 0x40) {\n        r += 7;\n        t >>>= 7;\n      }\n      if (t >= 0x8) {\n        r += 4;\n        t >>>= 4;\n      }\n      if (t >= 0x02) {\n        r += 2;\n        t >>>= 2;\n      }\n      return r + t;\n    };\n  }\n\n  BN.prototype._zeroBits = function _zeroBits (w) {\n    // Short-cut\n    if (w === 0) return 26;\n\n    var t = w;\n    var r = 0;\n    if ((t & 0x1fff) === 0) {\n      r += 13;\n      t >>>= 13;\n    }\n    if ((t & 0x7f) === 0) {\n      r += 7;\n      t >>>= 7;\n    }\n    if ((t & 0xf) === 0) {\n      r += 4;\n      t >>>= 4;\n    }\n    if ((t & 0x3) === 0) {\n      r += 2;\n      t >>>= 2;\n    }\n    if ((t & 0x1) === 0) {\n      r++;\n    }\n    return r;\n  };\n\n  // Return number of used bits in a BN\n  BN.prototype.bitLength = function bitLength () {\n    var w = this.words[this.length - 1];\n    var hi = this._countBits(w);\n    return (this.length - 1) * 26 + hi;\n  };\n\n  function toBitArray (num) {\n    var w = new Array(num.bitLength());\n\n    for (var bit = 0; bit < w.length; bit++) {\n      var off = (bit / 26) | 0;\n      var wbit = bit % 26;\n\n      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;\n    }\n\n    return w;\n  }\n\n  // Number of trailing zero bits\n  BN.prototype.zeroBits = function zeroBits () {\n    if (this.isZero()) return 0;\n\n    var r = 0;\n    for (var i = 0; i < this.length; i++) {\n      var b = this._zeroBits(this.words[i]);\n      r += b;\n      if (b !== 26) break;\n    }\n    return r;\n  };\n\n  BN.prototype.byteLength = function byteLength () {\n    return Math.ceil(this.bitLength() / 8);\n  };\n\n  BN.prototype.toTwos = function toTwos (width) {\n    if (this.negative !== 0) {\n      return this.abs().inotn(width).iaddn(1);\n    }\n    return this.clone();\n  };\n\n  BN.prototype.fromTwos = function fromTwos (width) {\n    if (this.testn(width - 1)) {\n      return this.notn(width).iaddn(1).ineg();\n    }\n    return this.clone();\n  };\n\n  BN.prototype.isNeg = function isNeg () {\n    return this.negative !== 0;\n  };\n\n  // Return negative clone of `this`\n  BN.prototype.neg = function neg () {\n    return this.clone().ineg();\n  };\n\n  BN.prototype.ineg = function ineg () {\n    if (!this.isZero()) {\n      this.negative ^= 1;\n    }\n\n    return this;\n  };\n\n  // Or `num` with `this` in-place\n  BN.prototype.iuor = function iuor (num) {\n    while (this.length < num.length) {\n      this.words[this.length++] = 0;\n    }\n\n    for (var i = 0; i < num.length; i++) {\n      this.words[i] = this.words[i] | num.words[i];\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ior = function ior (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuor(num);\n  };\n\n  // Or `num` with `this`\n  BN.prototype.or = function or (num) {\n    if (this.length > num.length) return this.clone().ior(num);\n    return num.clone().ior(this);\n  };\n\n  BN.prototype.uor = function uor (num) {\n    if (this.length > num.length) return this.clone().iuor(num);\n    return num.clone().iuor(this);\n  };\n\n  // And `num` with `this` in-place\n  BN.prototype.iuand = function iuand (num) {\n    // b = min-length(num, this)\n    var b;\n    if (this.length > num.length) {\n      b = num;\n    } else {\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = this.words[i] & num.words[i];\n    }\n\n    this.length = b.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.iand = function iand (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuand(num);\n  };\n\n  // And `num` with `this`\n  BN.prototype.and = function and (num) {\n    if (this.length > num.length) return this.clone().iand(num);\n    return num.clone().iand(this);\n  };\n\n  BN.prototype.uand = function uand (num) {\n    if (this.length > num.length) return this.clone().iuand(num);\n    return num.clone().iuand(this);\n  };\n\n  // Xor `num` with `this` in-place\n  BN.prototype.iuxor = function iuxor (num) {\n    // a.length > b.length\n    var a;\n    var b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    for (var i = 0; i < b.length; i++) {\n      this.words[i] = a.words[i] ^ b.words[i];\n    }\n\n    if (this !== a) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = a.length;\n\n    return this.strip();\n  };\n\n  BN.prototype.ixor = function ixor (num) {\n    assert((this.negative | num.negative) === 0);\n    return this.iuxor(num);\n  };\n\n  // Xor `num` with `this`\n  BN.prototype.xor = function xor (num) {\n    if (this.length > num.length) return this.clone().ixor(num);\n    return num.clone().ixor(this);\n  };\n\n  BN.prototype.uxor = function uxor (num) {\n    if (this.length > num.length) return this.clone().iuxor(num);\n    return num.clone().iuxor(this);\n  };\n\n  // Not ``this`` with ``width`` bitwidth\n  BN.prototype.inotn = function inotn (width) {\n    assert(typeof width === 'number' && width >= 0);\n\n    var bytesNeeded = Math.ceil(width / 26) | 0;\n    var bitsLeft = width % 26;\n\n    // Extend the buffer with leading zeroes\n    this._expand(bytesNeeded);\n\n    if (bitsLeft > 0) {\n      bytesNeeded--;\n    }\n\n    // Handle complete words\n    for (var i = 0; i < bytesNeeded; i++) {\n      this.words[i] = ~this.words[i] & 0x3ffffff;\n    }\n\n    // Handle the residue\n    if (bitsLeft > 0) {\n      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));\n    }\n\n    // And remove leading zeroes\n    return this.strip();\n  };\n\n  BN.prototype.notn = function notn (width) {\n    return this.clone().inotn(width);\n  };\n\n  // Set `bit` of `this`\n  BN.prototype.setn = function setn (bit, val) {\n    assert(typeof bit === 'number' && bit >= 0);\n\n    var off = (bit / 26) | 0;\n    var wbit = bit % 26;\n\n    this._expand(off + 1);\n\n    if (val) {\n      this.words[off] = this.words[off] | (1 << wbit);\n    } else {\n      this.words[off] = this.words[off] & ~(1 << wbit);\n    }\n\n    return this.strip();\n  };\n\n  // Add `num` to `this` in-place\n  BN.prototype.iadd = function iadd (num) {\n    var r;\n\n    // negative + positive\n    if (this.negative !== 0 && num.negative === 0) {\n      this.negative = 0;\n      r = this.isub(num);\n      this.negative ^= 1;\n      return this._normSign();\n\n    // positive + negative\n    } else if (this.negative === 0 && num.negative !== 0) {\n      num.negative = 0;\n      r = this.isub(num);\n      num.negative = 1;\n      return r._normSign();\n    }\n\n    // a.length > b.length\n    var a, b;\n    if (this.length > num.length) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      this.words[i] = r & 0x3ffffff;\n      carry = r >>> 26;\n    }\n\n    this.length = a.length;\n    if (carry !== 0) {\n      this.words[this.length] = carry;\n      this.length++;\n    // Copy the rest of the words\n    } else if (a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    return this;\n  };\n\n  // Add `num` to `this`\n  BN.prototype.add = function add (num) {\n    var res;\n    if (num.negative !== 0 && this.negative === 0) {\n      num.negative = 0;\n      res = this.sub(num);\n      num.negative ^= 1;\n      return res;\n    } else if (num.negative === 0 && this.negative !== 0) {\n      this.negative = 0;\n      res = num.sub(this);\n      this.negative = 1;\n      return res;\n    }\n\n    if (this.length > num.length) return this.clone().iadd(num);\n\n    return num.clone().iadd(this);\n  };\n\n  // Subtract `num` from `this` in-place\n  BN.prototype.isub = function isub (num) {\n    // this - (-num) = this + num\n    if (num.negative !== 0) {\n      num.negative = 0;\n      var r = this.iadd(num);\n      num.negative = 1;\n      return r._normSign();\n\n    // -this - num = -(this + num)\n    } else if (this.negative !== 0) {\n      this.negative = 0;\n      this.iadd(num);\n      this.negative = 1;\n      return this._normSign();\n    }\n\n    // At this point both numbers are positive\n    var cmp = this.cmp(num);\n\n    // Optimization - zeroify\n    if (cmp === 0) {\n      this.negative = 0;\n      this.length = 1;\n      this.words[0] = 0;\n      return this;\n    }\n\n    // a > b\n    var a, b;\n    if (cmp > 0) {\n      a = this;\n      b = num;\n    } else {\n      a = num;\n      b = this;\n    }\n\n    var carry = 0;\n    for (var i = 0; i < b.length; i++) {\n      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n    for (; carry !== 0 && i < a.length; i++) {\n      r = (a.words[i] | 0) + carry;\n      carry = r >> 26;\n      this.words[i] = r & 0x3ffffff;\n    }\n\n    // Copy rest of the words\n    if (carry === 0 && i < a.length && a !== this) {\n      for (; i < a.length; i++) {\n        this.words[i] = a.words[i];\n      }\n    }\n\n    this.length = Math.max(this.length, i);\n\n    if (a !== this) {\n      this.negative = 1;\n    }\n\n    return this.strip();\n  };\n\n  // Subtract `num` from `this`\n  BN.prototype.sub = function sub (num) {\n    return this.clone().isub(num);\n  };\n\n  function smallMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    var len = (self.length + num.length) | 0;\n    out.length = len;\n    len = (len - 1) | 0;\n\n    // Peel one iteration (compiler can't do it, because of code complexity)\n    var a = self.words[0] | 0;\n    var b = num.words[0] | 0;\n    var r = a * b;\n\n    var lo = r & 0x3ffffff;\n    var carry = (r / 0x4000000) | 0;\n    out.words[0] = lo;\n\n    for (var k = 1; k < len; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = carry >>> 26;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = (k - j) | 0;\n        a = self.words[i] | 0;\n        b = num.words[j] | 0;\n        r = a * b + rword;\n        ncarry += (r / 0x4000000) | 0;\n        rword = r & 0x3ffffff;\n      }\n      out.words[k] = rword | 0;\n      carry = ncarry | 0;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry | 0;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  // TODO(indutny): it may be reasonable to omit it for users who don't need\n  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n  // multiplication (like elliptic secp256k1).\n  var comb10MulTo = function comb10MulTo (self, num, out) {\n    var a = self.words;\n    var b = num.words;\n    var o = out.words;\n    var c = 0;\n    var lo;\n    var mid;\n    var hi;\n    var a0 = a[0] | 0;\n    var al0 = a0 & 0x1fff;\n    var ah0 = a0 >>> 13;\n    var a1 = a[1] | 0;\n    var al1 = a1 & 0x1fff;\n    var ah1 = a1 >>> 13;\n    var a2 = a[2] | 0;\n    var al2 = a2 & 0x1fff;\n    var ah2 = a2 >>> 13;\n    var a3 = a[3] | 0;\n    var al3 = a3 & 0x1fff;\n    var ah3 = a3 >>> 13;\n    var a4 = a[4] | 0;\n    var al4 = a4 & 0x1fff;\n    var ah4 = a4 >>> 13;\n    var a5 = a[5] | 0;\n    var al5 = a5 & 0x1fff;\n    var ah5 = a5 >>> 13;\n    var a6 = a[6] | 0;\n    var al6 = a6 & 0x1fff;\n    var ah6 = a6 >>> 13;\n    var a7 = a[7] | 0;\n    var al7 = a7 & 0x1fff;\n    var ah7 = a7 >>> 13;\n    var a8 = a[8] | 0;\n    var al8 = a8 & 0x1fff;\n    var ah8 = a8 >>> 13;\n    var a9 = a[9] | 0;\n    var al9 = a9 & 0x1fff;\n    var ah9 = a9 >>> 13;\n    var b0 = b[0] | 0;\n    var bl0 = b0 & 0x1fff;\n    var bh0 = b0 >>> 13;\n    var b1 = b[1] | 0;\n    var bl1 = b1 & 0x1fff;\n    var bh1 = b1 >>> 13;\n    var b2 = b[2] | 0;\n    var bl2 = b2 & 0x1fff;\n    var bh2 = b2 >>> 13;\n    var b3 = b[3] | 0;\n    var bl3 = b3 & 0x1fff;\n    var bh3 = b3 >>> 13;\n    var b4 = b[4] | 0;\n    var bl4 = b4 & 0x1fff;\n    var bh4 = b4 >>> 13;\n    var b5 = b[5] | 0;\n    var bl5 = b5 & 0x1fff;\n    var bh5 = b5 >>> 13;\n    var b6 = b[6] | 0;\n    var bl6 = b6 & 0x1fff;\n    var bh6 = b6 >>> 13;\n    var b7 = b[7] | 0;\n    var bl7 = b7 & 0x1fff;\n    var bh7 = b7 >>> 13;\n    var b8 = b[8] | 0;\n    var bl8 = b8 & 0x1fff;\n    var bh8 = b8 >>> 13;\n    var b9 = b[9] | 0;\n    var bl9 = b9 & 0x1fff;\n    var bh9 = b9 >>> 13;\n\n    out.negative = self.negative ^ num.negative;\n    out.length = 19;\n    /* k = 0 */\n    lo = Math.imul(al0, bl0);\n    mid = Math.imul(al0, bh0);\n    mid = (mid + Math.imul(ah0, bl0)) | 0;\n    hi = Math.imul(ah0, bh0);\n    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;\n    w0 &= 0x3ffffff;\n    /* k = 1 */\n    lo = Math.imul(al1, bl0);\n    mid = Math.imul(al1, bh0);\n    mid = (mid + Math.imul(ah1, bl0)) | 0;\n    hi = Math.imul(ah1, bh0);\n    lo = (lo + Math.imul(al0, bl1)) | 0;\n    mid = (mid + Math.imul(al0, bh1)) | 0;\n    mid = (mid + Math.imul(ah0, bl1)) | 0;\n    hi = (hi + Math.imul(ah0, bh1)) | 0;\n    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;\n    w1 &= 0x3ffffff;\n    /* k = 2 */\n    lo = Math.imul(al2, bl0);\n    mid = Math.imul(al2, bh0);\n    mid = (mid + Math.imul(ah2, bl0)) | 0;\n    hi = Math.imul(ah2, bh0);\n    lo = (lo + Math.imul(al1, bl1)) | 0;\n    mid = (mid + Math.imul(al1, bh1)) | 0;\n    mid = (mid + Math.imul(ah1, bl1)) | 0;\n    hi = (hi + Math.imul(ah1, bh1)) | 0;\n    lo = (lo + Math.imul(al0, bl2)) | 0;\n    mid = (mid + Math.imul(al0, bh2)) | 0;\n    mid = (mid + Math.imul(ah0, bl2)) | 0;\n    hi = (hi + Math.imul(ah0, bh2)) | 0;\n    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;\n    w2 &= 0x3ffffff;\n    /* k = 3 */\n    lo = Math.imul(al3, bl0);\n    mid = Math.imul(al3, bh0);\n    mid = (mid + Math.imul(ah3, bl0)) | 0;\n    hi = Math.imul(ah3, bh0);\n    lo = (lo + Math.imul(al2, bl1)) | 0;\n    mid = (mid + Math.imul(al2, bh1)) | 0;\n    mid = (mid + Math.imul(ah2, bl1)) | 0;\n    hi = (hi + Math.imul(ah2, bh1)) | 0;\n    lo = (lo + Math.imul(al1, bl2)) | 0;\n    mid = (mid + Math.imul(al1, bh2)) | 0;\n    mid = (mid + Math.imul(ah1, bl2)) | 0;\n    hi = (hi + Math.imul(ah1, bh2)) | 0;\n    lo = (lo + Math.imul(al0, bl3)) | 0;\n    mid = (mid + Math.imul(al0, bh3)) | 0;\n    mid = (mid + Math.imul(ah0, bl3)) | 0;\n    hi = (hi + Math.imul(ah0, bh3)) | 0;\n    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;\n    w3 &= 0x3ffffff;\n    /* k = 4 */\n    lo = Math.imul(al4, bl0);\n    mid = Math.imul(al4, bh0);\n    mid = (mid + Math.imul(ah4, bl0)) | 0;\n    hi = Math.imul(ah4, bh0);\n    lo = (lo + Math.imul(al3, bl1)) | 0;\n    mid = (mid + Math.imul(al3, bh1)) | 0;\n    mid = (mid + Math.imul(ah3, bl1)) | 0;\n    hi = (hi + Math.imul(ah3, bh1)) | 0;\n    lo = (lo + Math.imul(al2, bl2)) | 0;\n    mid = (mid + Math.imul(al2, bh2)) | 0;\n    mid = (mid + Math.imul(ah2, bl2)) | 0;\n    hi = (hi + Math.imul(ah2, bh2)) | 0;\n    lo = (lo + Math.imul(al1, bl3)) | 0;\n    mid = (mid + Math.imul(al1, bh3)) | 0;\n    mid = (mid + Math.imul(ah1, bl3)) | 0;\n    hi = (hi + Math.imul(ah1, bh3)) | 0;\n    lo = (lo + Math.imul(al0, bl4)) | 0;\n    mid = (mid + Math.imul(al0, bh4)) | 0;\n    mid = (mid + Math.imul(ah0, bl4)) | 0;\n    hi = (hi + Math.imul(ah0, bh4)) | 0;\n    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;\n    w4 &= 0x3ffffff;\n    /* k = 5 */\n    lo = Math.imul(al5, bl0);\n    mid = Math.imul(al5, bh0);\n    mid = (mid + Math.imul(ah5, bl0)) | 0;\n    hi = Math.imul(ah5, bh0);\n    lo = (lo + Math.imul(al4, bl1)) | 0;\n    mid = (mid + Math.imul(al4, bh1)) | 0;\n    mid = (mid + Math.imul(ah4, bl1)) | 0;\n    hi = (hi + Math.imul(ah4, bh1)) | 0;\n    lo = (lo + Math.imul(al3, bl2)) | 0;\n    mid = (mid + Math.imul(al3, bh2)) | 0;\n    mid = (mid + Math.imul(ah3, bl2)) | 0;\n    hi = (hi + Math.imul(ah3, bh2)) | 0;\n    lo = (lo + Math.imul(al2, bl3)) | 0;\n    mid = (mid + Math.imul(al2, bh3)) | 0;\n    mid = (mid + Math.imul(ah2, bl3)) | 0;\n    hi = (hi + Math.imul(ah2, bh3)) | 0;\n    lo = (lo + Math.imul(al1, bl4)) | 0;\n    mid = (mid + Math.imul(al1, bh4)) | 0;\n    mid = (mid + Math.imul(ah1, bl4)) | 0;\n    hi = (hi + Math.imul(ah1, bh4)) | 0;\n    lo = (lo + Math.imul(al0, bl5)) | 0;\n    mid = (mid + Math.imul(al0, bh5)) | 0;\n    mid = (mid + Math.imul(ah0, bl5)) | 0;\n    hi = (hi + Math.imul(ah0, bh5)) | 0;\n    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;\n    w5 &= 0x3ffffff;\n    /* k = 6 */\n    lo = Math.imul(al6, bl0);\n    mid = Math.imul(al6, bh0);\n    mid = (mid + Math.imul(ah6, bl0)) | 0;\n    hi = Math.imul(ah6, bh0);\n    lo = (lo + Math.imul(al5, bl1)) | 0;\n    mid = (mid + Math.imul(al5, bh1)) | 0;\n    mid = (mid + Math.imul(ah5, bl1)) | 0;\n    hi = (hi + Math.imul(ah5, bh1)) | 0;\n    lo = (lo + Math.imul(al4, bl2)) | 0;\n    mid = (mid + Math.imul(al4, bh2)) | 0;\n    mid = (mid + Math.imul(ah4, bl2)) | 0;\n    hi = (hi + Math.imul(ah4, bh2)) | 0;\n    lo = (lo + Math.imul(al3, bl3)) | 0;\n    mid = (mid + Math.imul(al3, bh3)) | 0;\n    mid = (mid + Math.imul(ah3, bl3)) | 0;\n    hi = (hi + Math.imul(ah3, bh3)) | 0;\n    lo = (lo + Math.imul(al2, bl4)) | 0;\n    mid = (mid + Math.imul(al2, bh4)) | 0;\n    mid = (mid + Math.imul(ah2, bl4)) | 0;\n    hi = (hi + Math.imul(ah2, bh4)) | 0;\n    lo = (lo + Math.imul(al1, bl5)) | 0;\n    mid = (mid + Math.imul(al1, bh5)) | 0;\n    mid = (mid + Math.imul(ah1, bl5)) | 0;\n    hi = (hi + Math.imul(ah1, bh5)) | 0;\n    lo = (lo + Math.imul(al0, bl6)) | 0;\n    mid = (mid + Math.imul(al0, bh6)) | 0;\n    mid = (mid + Math.imul(ah0, bl6)) | 0;\n    hi = (hi + Math.imul(ah0, bh6)) | 0;\n    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;\n    w6 &= 0x3ffffff;\n    /* k = 7 */\n    lo = Math.imul(al7, bl0);\n    mid = Math.imul(al7, bh0);\n    mid = (mid + Math.imul(ah7, bl0)) | 0;\n    hi = Math.imul(ah7, bh0);\n    lo = (lo + Math.imul(al6, bl1)) | 0;\n    mid = (mid + Math.imul(al6, bh1)) | 0;\n    mid = (mid + Math.imul(ah6, bl1)) | 0;\n    hi = (hi + Math.imul(ah6, bh1)) | 0;\n    lo = (lo + Math.imul(al5, bl2)) | 0;\n    mid = (mid + Math.imul(al5, bh2)) | 0;\n    mid = (mid + Math.imul(ah5, bl2)) | 0;\n    hi = (hi + Math.imul(ah5, bh2)) | 0;\n    lo = (lo + Math.imul(al4, bl3)) | 0;\n    mid = (mid + Math.imul(al4, bh3)) | 0;\n    mid = (mid + Math.imul(ah4, bl3)) | 0;\n    hi = (hi + Math.imul(ah4, bh3)) | 0;\n    lo = (lo + Math.imul(al3, bl4)) | 0;\n    mid = (mid + Math.imul(al3, bh4)) | 0;\n    mid = (mid + Math.imul(ah3, bl4)) | 0;\n    hi = (hi + Math.imul(ah3, bh4)) | 0;\n    lo = (lo + Math.imul(al2, bl5)) | 0;\n    mid = (mid + Math.imul(al2, bh5)) | 0;\n    mid = (mid + Math.imul(ah2, bl5)) | 0;\n    hi = (hi + Math.imul(ah2, bh5)) | 0;\n    lo = (lo + Math.imul(al1, bl6)) | 0;\n    mid = (mid + Math.imul(al1, bh6)) | 0;\n    mid = (mid + Math.imul(ah1, bl6)) | 0;\n    hi = (hi + Math.imul(ah1, bh6)) | 0;\n    lo = (lo + Math.imul(al0, bl7)) | 0;\n    mid = (mid + Math.imul(al0, bh7)) | 0;\n    mid = (mid + Math.imul(ah0, bl7)) | 0;\n    hi = (hi + Math.imul(ah0, bh7)) | 0;\n    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;\n    w7 &= 0x3ffffff;\n    /* k = 8 */\n    lo = Math.imul(al8, bl0);\n    mid = Math.imul(al8, bh0);\n    mid = (mid + Math.imul(ah8, bl0)) | 0;\n    hi = Math.imul(ah8, bh0);\n    lo = (lo + Math.imul(al7, bl1)) | 0;\n    mid = (mid + Math.imul(al7, bh1)) | 0;\n    mid = (mid + Math.imul(ah7, bl1)) | 0;\n    hi = (hi + Math.imul(ah7, bh1)) | 0;\n    lo = (lo + Math.imul(al6, bl2)) | 0;\n    mid = (mid + Math.imul(al6, bh2)) | 0;\n    mid = (mid + Math.imul(ah6, bl2)) | 0;\n    hi = (hi + Math.imul(ah6, bh2)) | 0;\n    lo = (lo + Math.imul(al5, bl3)) | 0;\n    mid = (mid + Math.imul(al5, bh3)) | 0;\n    mid = (mid + Math.imul(ah5, bl3)) | 0;\n    hi = (hi + Math.imul(ah5, bh3)) | 0;\n    lo = (lo + Math.imul(al4, bl4)) | 0;\n    mid = (mid + Math.imul(al4, bh4)) | 0;\n    mid = (mid + Math.imul(ah4, bl4)) | 0;\n    hi = (hi + Math.imul(ah4, bh4)) | 0;\n    lo = (lo + Math.imul(al3, bl5)) | 0;\n    mid = (mid + Math.imul(al3, bh5)) | 0;\n    mid = (mid + Math.imul(ah3, bl5)) | 0;\n    hi = (hi + Math.imul(ah3, bh5)) | 0;\n    lo = (lo + Math.imul(al2, bl6)) | 0;\n    mid = (mid + Math.imul(al2, bh6)) | 0;\n    mid = (mid + Math.imul(ah2, bl6)) | 0;\n    hi = (hi + Math.imul(ah2, bh6)) | 0;\n    lo = (lo + Math.imul(al1, bl7)) | 0;\n    mid = (mid + Math.imul(al1, bh7)) | 0;\n    mid = (mid + Math.imul(ah1, bl7)) | 0;\n    hi = (hi + Math.imul(ah1, bh7)) | 0;\n    lo = (lo + Math.imul(al0, bl8)) | 0;\n    mid = (mid + Math.imul(al0, bh8)) | 0;\n    mid = (mid + Math.imul(ah0, bl8)) | 0;\n    hi = (hi + Math.imul(ah0, bh8)) | 0;\n    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;\n    w8 &= 0x3ffffff;\n    /* k = 9 */\n    lo = Math.imul(al9, bl0);\n    mid = Math.imul(al9, bh0);\n    mid = (mid + Math.imul(ah9, bl0)) | 0;\n    hi = Math.imul(ah9, bh0);\n    lo = (lo + Math.imul(al8, bl1)) | 0;\n    mid = (mid + Math.imul(al8, bh1)) | 0;\n    mid = (mid + Math.imul(ah8, bl1)) | 0;\n    hi = (hi + Math.imul(ah8, bh1)) | 0;\n    lo = (lo + Math.imul(al7, bl2)) | 0;\n    mid = (mid + Math.imul(al7, bh2)) | 0;\n    mid = (mid + Math.imul(ah7, bl2)) | 0;\n    hi = (hi + Math.imul(ah7, bh2)) | 0;\n    lo = (lo + Math.imul(al6, bl3)) | 0;\n    mid = (mid + Math.imul(al6, bh3)) | 0;\n    mid = (mid + Math.imul(ah6, bl3)) | 0;\n    hi = (hi + Math.imul(ah6, bh3)) | 0;\n    lo = (lo + Math.imul(al5, bl4)) | 0;\n    mid = (mid + Math.imul(al5, bh4)) | 0;\n    mid = (mid + Math.imul(ah5, bl4)) | 0;\n    hi = (hi + Math.imul(ah5, bh4)) | 0;\n    lo = (lo + Math.imul(al4, bl5)) | 0;\n    mid = (mid + Math.imul(al4, bh5)) | 0;\n    mid = (mid + Math.imul(ah4, bl5)) | 0;\n    hi = (hi + Math.imul(ah4, bh5)) | 0;\n    lo = (lo + Math.imul(al3, bl6)) | 0;\n    mid = (mid + Math.imul(al3, bh6)) | 0;\n    mid = (mid + Math.imul(ah3, bl6)) | 0;\n    hi = (hi + Math.imul(ah3, bh6)) | 0;\n    lo = (lo + Math.imul(al2, bl7)) | 0;\n    mid = (mid + Math.imul(al2, bh7)) | 0;\n    mid = (mid + Math.imul(ah2, bl7)) | 0;\n    hi = (hi + Math.imul(ah2, bh7)) | 0;\n    lo = (lo + Math.imul(al1, bl8)) | 0;\n    mid = (mid + Math.imul(al1, bh8)) | 0;\n    mid = (mid + Math.imul(ah1, bl8)) | 0;\n    hi = (hi + Math.imul(ah1, bh8)) | 0;\n    lo = (lo + Math.imul(al0, bl9)) | 0;\n    mid = (mid + Math.imul(al0, bh9)) | 0;\n    mid = (mid + Math.imul(ah0, bl9)) | 0;\n    hi = (hi + Math.imul(ah0, bh9)) | 0;\n    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;\n    w9 &= 0x3ffffff;\n    /* k = 10 */\n    lo = Math.imul(al9, bl1);\n    mid = Math.imul(al9, bh1);\n    mid = (mid + Math.imul(ah9, bl1)) | 0;\n    hi = Math.imul(ah9, bh1);\n    lo = (lo + Math.imul(al8, bl2)) | 0;\n    mid = (mid + Math.imul(al8, bh2)) | 0;\n    mid = (mid + Math.imul(ah8, bl2)) | 0;\n    hi = (hi + Math.imul(ah8, bh2)) | 0;\n    lo = (lo + Math.imul(al7, bl3)) | 0;\n    mid = (mid + Math.imul(al7, bh3)) | 0;\n    mid = (mid + Math.imul(ah7, bl3)) | 0;\n    hi = (hi + Math.imul(ah7, bh3)) | 0;\n    lo = (lo + Math.imul(al6, bl4)) | 0;\n    mid = (mid + Math.imul(al6, bh4)) | 0;\n    mid = (mid + Math.imul(ah6, bl4)) | 0;\n    hi = (hi + Math.imul(ah6, bh4)) | 0;\n    lo = (lo + Math.imul(al5, bl5)) | 0;\n    mid = (mid + Math.imul(al5, bh5)) | 0;\n    mid = (mid + Math.imul(ah5, bl5)) | 0;\n    hi = (hi + Math.imul(ah5, bh5)) | 0;\n    lo = (lo + Math.imul(al4, bl6)) | 0;\n    mid = (mid + Math.imul(al4, bh6)) | 0;\n    mid = (mid + Math.imul(ah4, bl6)) | 0;\n    hi = (hi + Math.imul(ah4, bh6)) | 0;\n    lo = (lo + Math.imul(al3, bl7)) | 0;\n    mid = (mid + Math.imul(al3, bh7)) | 0;\n    mid = (mid + Math.imul(ah3, bl7)) | 0;\n    hi = (hi + Math.imul(ah3, bh7)) | 0;\n    lo = (lo + Math.imul(al2, bl8)) | 0;\n    mid = (mid + Math.imul(al2, bh8)) | 0;\n    mid = (mid + Math.imul(ah2, bl8)) | 0;\n    hi = (hi + Math.imul(ah2, bh8)) | 0;\n    lo = (lo + Math.imul(al1, bl9)) | 0;\n    mid = (mid + Math.imul(al1, bh9)) | 0;\n    mid = (mid + Math.imul(ah1, bl9)) | 0;\n    hi = (hi + Math.imul(ah1, bh9)) | 0;\n    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;\n    w10 &= 0x3ffffff;\n    /* k = 11 */\n    lo = Math.imul(al9, bl2);\n    mid = Math.imul(al9, bh2);\n    mid = (mid + Math.imul(ah9, bl2)) | 0;\n    hi = Math.imul(ah9, bh2);\n    lo = (lo + Math.imul(al8, bl3)) | 0;\n    mid = (mid + Math.imul(al8, bh3)) | 0;\n    mid = (mid + Math.imul(ah8, bl3)) | 0;\n    hi = (hi + Math.imul(ah8, bh3)) | 0;\n    lo = (lo + Math.imul(al7, bl4)) | 0;\n    mid = (mid + Math.imul(al7, bh4)) | 0;\n    mid = (mid + Math.imul(ah7, bl4)) | 0;\n    hi = (hi + Math.imul(ah7, bh4)) | 0;\n    lo = (lo + Math.imul(al6, bl5)) | 0;\n    mid = (mid + Math.imul(al6, bh5)) | 0;\n    mid = (mid + Math.imul(ah6, bl5)) | 0;\n    hi = (hi + Math.imul(ah6, bh5)) | 0;\n    lo = (lo + Math.imul(al5, bl6)) | 0;\n    mid = (mid + Math.imul(al5, bh6)) | 0;\n    mid = (mid + Math.imul(ah5, bl6)) | 0;\n    hi = (hi + Math.imul(ah5, bh6)) | 0;\n    lo = (lo + Math.imul(al4, bl7)) | 0;\n    mid = (mid + Math.imul(al4, bh7)) | 0;\n    mid = (mid + Math.imul(ah4, bl7)) | 0;\n    hi = (hi + Math.imul(ah4, bh7)) | 0;\n    lo = (lo + Math.imul(al3, bl8)) | 0;\n    mid = (mid + Math.imul(al3, bh8)) | 0;\n    mid = (mid + Math.imul(ah3, bl8)) | 0;\n    hi = (hi + Math.imul(ah3, bh8)) | 0;\n    lo = (lo + Math.imul(al2, bl9)) | 0;\n    mid = (mid + Math.imul(al2, bh9)) | 0;\n    mid = (mid + Math.imul(ah2, bl9)) | 0;\n    hi = (hi + Math.imul(ah2, bh9)) | 0;\n    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;\n    w11 &= 0x3ffffff;\n    /* k = 12 */\n    lo = Math.imul(al9, bl3);\n    mid = Math.imul(al9, bh3);\n    mid = (mid + Math.imul(ah9, bl3)) | 0;\n    hi = Math.imul(ah9, bh3);\n    lo = (lo + Math.imul(al8, bl4)) | 0;\n    mid = (mid + Math.imul(al8, bh4)) | 0;\n    mid = (mid + Math.imul(ah8, bl4)) | 0;\n    hi = (hi + Math.imul(ah8, bh4)) | 0;\n    lo = (lo + Math.imul(al7, bl5)) | 0;\n    mid = (mid + Math.imul(al7, bh5)) | 0;\n    mid = (mid + Math.imul(ah7, bl5)) | 0;\n    hi = (hi + Math.imul(ah7, bh5)) | 0;\n    lo = (lo + Math.imul(al6, bl6)) | 0;\n    mid = (mid + Math.imul(al6, bh6)) | 0;\n    mid = (mid + Math.imul(ah6, bl6)) | 0;\n    hi = (hi + Math.imul(ah6, bh6)) | 0;\n    lo = (lo + Math.imul(al5, bl7)) | 0;\n    mid = (mid + Math.imul(al5, bh7)) | 0;\n    mid = (mid + Math.imul(ah5, bl7)) | 0;\n    hi = (hi + Math.imul(ah5, bh7)) | 0;\n    lo = (lo + Math.imul(al4, bl8)) | 0;\n    mid = (mid + Math.imul(al4, bh8)) | 0;\n    mid = (mid + Math.imul(ah4, bl8)) | 0;\n    hi = (hi + Math.imul(ah4, bh8)) | 0;\n    lo = (lo + Math.imul(al3, bl9)) | 0;\n    mid = (mid + Math.imul(al3, bh9)) | 0;\n    mid = (mid + Math.imul(ah3, bl9)) | 0;\n    hi = (hi + Math.imul(ah3, bh9)) | 0;\n    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;\n    w12 &= 0x3ffffff;\n    /* k = 13 */\n    lo = Math.imul(al9, bl4);\n    mid = Math.imul(al9, bh4);\n    mid = (mid + Math.imul(ah9, bl4)) | 0;\n    hi = Math.imul(ah9, bh4);\n    lo = (lo + Math.imul(al8, bl5)) | 0;\n    mid = (mid + Math.imul(al8, bh5)) | 0;\n    mid = (mid + Math.imul(ah8, bl5)) | 0;\n    hi = (hi + Math.imul(ah8, bh5)) | 0;\n    lo = (lo + Math.imul(al7, bl6)) | 0;\n    mid = (mid + Math.imul(al7, bh6)) | 0;\n    mid = (mid + Math.imul(ah7, bl6)) | 0;\n    hi = (hi + Math.imul(ah7, bh6)) | 0;\n    lo = (lo + Math.imul(al6, bl7)) | 0;\n    mid = (mid + Math.imul(al6, bh7)) | 0;\n    mid = (mid + Math.imul(ah6, bl7)) | 0;\n    hi = (hi + Math.imul(ah6, bh7)) | 0;\n    lo = (lo + Math.imul(al5, bl8)) | 0;\n    mid = (mid + Math.imul(al5, bh8)) | 0;\n    mid = (mid + Math.imul(ah5, bl8)) | 0;\n    hi = (hi + Math.imul(ah5, bh8)) | 0;\n    lo = (lo + Math.imul(al4, bl9)) | 0;\n    mid = (mid + Math.imul(al4, bh9)) | 0;\n    mid = (mid + Math.imul(ah4, bl9)) | 0;\n    hi = (hi + Math.imul(ah4, bh9)) | 0;\n    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;\n    w13 &= 0x3ffffff;\n    /* k = 14 */\n    lo = Math.imul(al9, bl5);\n    mid = Math.imul(al9, bh5);\n    mid = (mid + Math.imul(ah9, bl5)) | 0;\n    hi = Math.imul(ah9, bh5);\n    lo = (lo + Math.imul(al8, bl6)) | 0;\n    mid = (mid + Math.imul(al8, bh6)) | 0;\n    mid = (mid + Math.imul(ah8, bl6)) | 0;\n    hi = (hi + Math.imul(ah8, bh6)) | 0;\n    lo = (lo + Math.imul(al7, bl7)) | 0;\n    mid = (mid + Math.imul(al7, bh7)) | 0;\n    mid = (mid + Math.imul(ah7, bl7)) | 0;\n    hi = (hi + Math.imul(ah7, bh7)) | 0;\n    lo = (lo + Math.imul(al6, bl8)) | 0;\n    mid = (mid + Math.imul(al6, bh8)) | 0;\n    mid = (mid + Math.imul(ah6, bl8)) | 0;\n    hi = (hi + Math.imul(ah6, bh8)) | 0;\n    lo = (lo + Math.imul(al5, bl9)) | 0;\n    mid = (mid + Math.imul(al5, bh9)) | 0;\n    mid = (mid + Math.imul(ah5, bl9)) | 0;\n    hi = (hi + Math.imul(ah5, bh9)) | 0;\n    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;\n    w14 &= 0x3ffffff;\n    /* k = 15 */\n    lo = Math.imul(al9, bl6);\n    mid = Math.imul(al9, bh6);\n    mid = (mid + Math.imul(ah9, bl6)) | 0;\n    hi = Math.imul(ah9, bh6);\n    lo = (lo + Math.imul(al8, bl7)) | 0;\n    mid = (mid + Math.imul(al8, bh7)) | 0;\n    mid = (mid + Math.imul(ah8, bl7)) | 0;\n    hi = (hi + Math.imul(ah8, bh7)) | 0;\n    lo = (lo + Math.imul(al7, bl8)) | 0;\n    mid = (mid + Math.imul(al7, bh8)) | 0;\n    mid = (mid + Math.imul(ah7, bl8)) | 0;\n    hi = (hi + Math.imul(ah7, bh8)) | 0;\n    lo = (lo + Math.imul(al6, bl9)) | 0;\n    mid = (mid + Math.imul(al6, bh9)) | 0;\n    mid = (mid + Math.imul(ah6, bl9)) | 0;\n    hi = (hi + Math.imul(ah6, bh9)) | 0;\n    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;\n    w15 &= 0x3ffffff;\n    /* k = 16 */\n    lo = Math.imul(al9, bl7);\n    mid = Math.imul(al9, bh7);\n    mid = (mid + Math.imul(ah9, bl7)) | 0;\n    hi = Math.imul(ah9, bh7);\n    lo = (lo + Math.imul(al8, bl8)) | 0;\n    mid = (mid + Math.imul(al8, bh8)) | 0;\n    mid = (mid + Math.imul(ah8, bl8)) | 0;\n    hi = (hi + Math.imul(ah8, bh8)) | 0;\n    lo = (lo + Math.imul(al7, bl9)) | 0;\n    mid = (mid + Math.imul(al7, bh9)) | 0;\n    mid = (mid + Math.imul(ah7, bl9)) | 0;\n    hi = (hi + Math.imul(ah7, bh9)) | 0;\n    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;\n    w16 &= 0x3ffffff;\n    /* k = 17 */\n    lo = Math.imul(al9, bl8);\n    mid = Math.imul(al9, bh8);\n    mid = (mid + Math.imul(ah9, bl8)) | 0;\n    hi = Math.imul(ah9, bh8);\n    lo = (lo + Math.imul(al8, bl9)) | 0;\n    mid = (mid + Math.imul(al8, bh9)) | 0;\n    mid = (mid + Math.imul(ah8, bl9)) | 0;\n    hi = (hi + Math.imul(ah8, bh9)) | 0;\n    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;\n    w17 &= 0x3ffffff;\n    /* k = 18 */\n    lo = Math.imul(al9, bl9);\n    mid = Math.imul(al9, bh9);\n    mid = (mid + Math.imul(ah9, bl9)) | 0;\n    hi = Math.imul(ah9, bh9);\n    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;\n    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;\n    w18 &= 0x3ffffff;\n    o[0] = w0;\n    o[1] = w1;\n    o[2] = w2;\n    o[3] = w3;\n    o[4] = w4;\n    o[5] = w5;\n    o[6] = w6;\n    o[7] = w7;\n    o[8] = w8;\n    o[9] = w9;\n    o[10] = w10;\n    o[11] = w11;\n    o[12] = w12;\n    o[13] = w13;\n    o[14] = w14;\n    o[15] = w15;\n    o[16] = w16;\n    o[17] = w17;\n    o[18] = w18;\n    if (c !== 0) {\n      o[19] = c;\n      out.length++;\n    }\n    return out;\n  };\n\n  // Polyfill comb\n  if (!Math.imul) {\n    comb10MulTo = smallMulTo;\n  }\n\n  function bigMulTo (self, num, out) {\n    out.negative = num.negative ^ self.negative;\n    out.length = self.length + num.length;\n\n    var carry = 0;\n    var hncarry = 0;\n    for (var k = 0; k < out.length - 1; k++) {\n      // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n      // note that ncarry could be >= 0x3ffffff\n      var ncarry = hncarry;\n      hncarry = 0;\n      var rword = carry & 0x3ffffff;\n      var maxJ = Math.min(k, num.length - 1);\n      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n        var i = k - j;\n        var a = self.words[i] | 0;\n        var b = num.words[j] | 0;\n        var r = a * b;\n\n        var lo = r & 0x3ffffff;\n        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;\n        lo = (lo + rword) | 0;\n        rword = lo & 0x3ffffff;\n        ncarry = (ncarry + (lo >>> 26)) | 0;\n\n        hncarry += ncarry >>> 26;\n        ncarry &= 0x3ffffff;\n      }\n      out.words[k] = rword;\n      carry = ncarry;\n      ncarry = hncarry;\n    }\n    if (carry !== 0) {\n      out.words[k] = carry;\n    } else {\n      out.length--;\n    }\n\n    return out.strip();\n  }\n\n  function jumboMulTo (self, num, out) {\n    var fftm = new FFTM();\n    return fftm.mulp(self, num, out);\n  }\n\n  BN.prototype.mulTo = function mulTo (num, out) {\n    var res;\n    var len = this.length + num.length;\n    if (this.length === 10 && num.length === 10) {\n      res = comb10MulTo(this, num, out);\n    } else if (len < 63) {\n      res = smallMulTo(this, num, out);\n    } else if (len < 1024) {\n      res = bigMulTo(this, num, out);\n    } else {\n      res = jumboMulTo(this, num, out);\n    }\n\n    return res;\n  };\n\n  // Cooley-Tukey algorithm for FFT\n  // slightly revisited to rely on looping instead of recursion\n\n  function FFTM (x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  FFTM.prototype.makeRBT = function makeRBT (N) {\n    var t = new Array(N);\n    var l = BN.prototype._countBits(N) - 1;\n    for (var i = 0; i < N; i++) {\n      t[i] = this.revBin(i, l, N);\n    }\n\n    return t;\n  };\n\n  // Returns binary-reversed representation of `x`\n  FFTM.prototype.revBin = function revBin (x, l, N) {\n    if (x === 0 || x === N - 1) return x;\n\n    var rb = 0;\n    for (var i = 0; i < l; i++) {\n      rb |= (x & 1) << (l - i - 1);\n      x >>= 1;\n    }\n\n    return rb;\n  };\n\n  // Performs \"tweedling\" phase, therefore 'emulating'\n  // behaviour of the recursive algorithm\n  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {\n    for (var i = 0; i < N; i++) {\n      rtws[i] = rws[rbt[i]];\n      itws[i] = iws[rbt[i]];\n    }\n  };\n\n  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {\n    this.permute(rbt, rws, iws, rtws, itws, N);\n\n    for (var s = 1; s < N; s <<= 1) {\n      var l = s << 1;\n\n      var rtwdf = Math.cos(2 * Math.PI / l);\n      var itwdf = Math.sin(2 * Math.PI / l);\n\n      for (var p = 0; p < N; p += l) {\n        var rtwdf_ = rtwdf;\n        var itwdf_ = itwdf;\n\n        for (var j = 0; j < s; j++) {\n          var re = rtws[p + j];\n          var ie = itws[p + j];\n\n          var ro = rtws[p + j + s];\n          var io = itws[p + j + s];\n\n          var rx = rtwdf_ * ro - itwdf_ * io;\n\n          io = rtwdf_ * io + itwdf_ * ro;\n          ro = rx;\n\n          rtws[p + j] = re + ro;\n          itws[p + j] = ie + io;\n\n          rtws[p + j + s] = re - ro;\n          itws[p + j + s] = ie - io;\n\n          /* jshint maxdepth : false */\n          if (j !== l) {\n            rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n\n            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n            rtwdf_ = rx;\n          }\n        }\n      }\n    }\n  };\n\n  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {\n    var N = Math.max(m, n) | 1;\n    var odd = N & 1;\n    var i = 0;\n    for (N = N / 2 | 0; N; N = N >>> 1) {\n      i++;\n    }\n\n    return 1 << i + 1 + odd;\n  };\n\n  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {\n    if (N <= 1) return;\n\n    for (var i = 0; i < N / 2; i++) {\n      var t = rws[i];\n\n      rws[i] = rws[N - i - 1];\n      rws[N - i - 1] = t;\n\n      t = iws[i];\n\n      iws[i] = -iws[N - i - 1];\n      iws[N - i - 1] = -t;\n    }\n  };\n\n  FFTM.prototype.normalize13b = function normalize13b (ws, N) {\n    var carry = 0;\n    for (var i = 0; i < N / 2; i++) {\n      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +\n        Math.round(ws[2 * i] / N) +\n        carry;\n\n      ws[i] = w & 0x3ffffff;\n\n      if (w < 0x4000000) {\n        carry = 0;\n      } else {\n        carry = w / 0x4000000 | 0;\n      }\n    }\n\n    return ws;\n  };\n\n  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {\n    var carry = 0;\n    for (var i = 0; i < len; i++) {\n      carry = carry + (ws[i] | 0);\n\n      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;\n      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;\n    }\n\n    // Pad with zeroes\n    for (i = 2 * len; i < N; ++i) {\n      rws[i] = 0;\n    }\n\n    assert(carry === 0);\n    assert((carry & ~0x1fff) === 0);\n  };\n\n  FFTM.prototype.stub = function stub (N) {\n    var ph = new Array(N);\n    for (var i = 0; i < N; i++) {\n      ph[i] = 0;\n    }\n\n    return ph;\n  };\n\n  FFTM.prototype.mulp = function mulp (x, y, out) {\n    var N = 2 * this.guessLen13b(x.length, y.length);\n\n    var rbt = this.makeRBT(N);\n\n    var _ = this.stub(N);\n\n    var rws = new Array(N);\n    var rwst = new Array(N);\n    var iwst = new Array(N);\n\n    var nrws = new Array(N);\n    var nrwst = new Array(N);\n    var niwst = new Array(N);\n\n    var rmws = out.words;\n    rmws.length = N;\n\n    this.convert13b(x.words, x.length, rws, N);\n    this.convert13b(y.words, y.length, nrws, N);\n\n    this.transform(rws, _, rwst, iwst, N, rbt);\n    this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n    for (var i = 0; i < N; i++) {\n      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n      rwst[i] = rx;\n    }\n\n    this.conjugate(rwst, iwst, N);\n    this.transform(rwst, iwst, rmws, _, N, rbt);\n    this.conjugate(rmws, _, N);\n    this.normalize13b(rmws, N);\n\n    out.negative = x.negative ^ y.negative;\n    out.length = x.length + y.length;\n    return out.strip();\n  };\n\n  // Multiply `this` by `num`\n  BN.prototype.mul = function mul (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return this.mulTo(num, out);\n  };\n\n  // Multiply employing FFT\n  BN.prototype.mulf = function mulf (num) {\n    var out = new BN(null);\n    out.words = new Array(this.length + num.length);\n    return jumboMulTo(this, num, out);\n  };\n\n  // In-place Multiplication\n  BN.prototype.imul = function imul (num) {\n    return this.clone().mulTo(num, this);\n  };\n\n  BN.prototype.imuln = function imuln (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n\n    // Carry\n    var carry = 0;\n    for (var i = 0; i < this.length; i++) {\n      var w = (this.words[i] | 0) * num;\n      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n      carry >>= 26;\n      carry += (w / 0x4000000) | 0;\n      // NOTE: lo is 27bit maximum\n      carry += lo >>> 26;\n      this.words[i] = lo & 0x3ffffff;\n    }\n\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n\n    return this;\n  };\n\n  BN.prototype.muln = function muln (num) {\n    return this.clone().imuln(num);\n  };\n\n  // `this` * `this`\n  BN.prototype.sqr = function sqr () {\n    return this.mul(this);\n  };\n\n  // `this` * `this` in-place\n  BN.prototype.isqr = function isqr () {\n    return this.imul(this.clone());\n  };\n\n  // Math.pow(`this`, `num`)\n  BN.prototype.pow = function pow (num) {\n    var w = toBitArray(num);\n    if (w.length === 0) return new BN(1);\n\n    // Skip leading zeroes\n    var res = this;\n    for (var i = 0; i < w.length; i++, res = res.sqr()) {\n      if (w[i] !== 0) break;\n    }\n\n    if (++i < w.length) {\n      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n        if (w[i] === 0) continue;\n\n        res = res.mul(q);\n      }\n    }\n\n    return res;\n  };\n\n  // Shift-left in-place\n  BN.prototype.iushln = function iushln (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);\n    var i;\n\n    if (r !== 0) {\n      var carry = 0;\n\n      for (i = 0; i < this.length; i++) {\n        var newCarry = this.words[i] & carryMask;\n        var c = ((this.words[i] | 0) - newCarry) << r;\n        this.words[i] = c | carry;\n        carry = newCarry >>> (26 - r);\n      }\n\n      if (carry) {\n        this.words[i] = carry;\n        this.length++;\n      }\n    }\n\n    if (s !== 0) {\n      for (i = this.length - 1; i >= 0; i--) {\n        this.words[i + s] = this.words[i];\n      }\n\n      for (i = 0; i < s; i++) {\n        this.words[i] = 0;\n      }\n\n      this.length += s;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishln = function ishln (bits) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushln(bits);\n  };\n\n  // Shift-right in-place\n  // NOTE: `hint` is a lowest bit before trailing zeroes\n  // NOTE: if `extended` is present - it will be filled with destroyed bits\n  BN.prototype.iushrn = function iushrn (bits, hint, extended) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var h;\n    if (hint) {\n      h = (hint - (hint % 26)) / 26;\n    } else {\n      h = 0;\n    }\n\n    var r = bits % 26;\n    var s = Math.min((bits - r) / 26, this.length);\n    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n    var maskedWords = extended;\n\n    h -= s;\n    h = Math.max(0, h);\n\n    // Extended mode, copy masked part\n    if (maskedWords) {\n      for (var i = 0; i < s; i++) {\n        maskedWords.words[i] = this.words[i];\n      }\n      maskedWords.length = s;\n    }\n\n    if (s === 0) {\n      // No-op, we should not move anything at all\n    } else if (this.length > s) {\n      this.length -= s;\n      for (i = 0; i < this.length; i++) {\n        this.words[i] = this.words[i + s];\n      }\n    } else {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    var carry = 0;\n    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n      var word = this.words[i] | 0;\n      this.words[i] = (carry << (26 - r)) | (word >>> r);\n      carry = word & mask;\n    }\n\n    // Push carried bits as a mask\n    if (maskedWords && carry !== 0) {\n      maskedWords.words[maskedWords.length++] = carry;\n    }\n\n    if (this.length === 0) {\n      this.words[0] = 0;\n      this.length = 1;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.ishrn = function ishrn (bits, hint, extended) {\n    // TODO(indutny): implement me\n    assert(this.negative === 0);\n    return this.iushrn(bits, hint, extended);\n  };\n\n  // Shift-left\n  BN.prototype.shln = function shln (bits) {\n    return this.clone().ishln(bits);\n  };\n\n  BN.prototype.ushln = function ushln (bits) {\n    return this.clone().iushln(bits);\n  };\n\n  // Shift-right\n  BN.prototype.shrn = function shrn (bits) {\n    return this.clone().ishrn(bits);\n  };\n\n  BN.prototype.ushrn = function ushrn (bits) {\n    return this.clone().iushrn(bits);\n  };\n\n  // Test if n bit is set\n  BN.prototype.testn = function testn (bit) {\n    assert(typeof bit === 'number' && bit >= 0);\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) return false;\n\n    // Check bit and return\n    var w = this.words[s];\n\n    return !!(w & q);\n  };\n\n  // Return only lowers bits of number (in-place)\n  BN.prototype.imaskn = function imaskn (bits) {\n    assert(typeof bits === 'number' && bits >= 0);\n    var r = bits % 26;\n    var s = (bits - r) / 26;\n\n    assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n    if (this.length <= s) {\n      return this;\n    }\n\n    if (r !== 0) {\n      s++;\n    }\n    this.length = Math.min(s, this.length);\n\n    if (r !== 0) {\n      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);\n      this.words[this.length - 1] &= mask;\n    }\n\n    return this.strip();\n  };\n\n  // Return only lowers bits of number\n  BN.prototype.maskn = function maskn (bits) {\n    return this.clone().imaskn(bits);\n  };\n\n  // Add plain number `num` to `this`\n  BN.prototype.iaddn = function iaddn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.isubn(-num);\n\n    // Possible sign change\n    if (this.negative !== 0) {\n      if (this.length === 1 && (this.words[0] | 0) < num) {\n        this.words[0] = num - (this.words[0] | 0);\n        this.negative = 0;\n        return this;\n      }\n\n      this.negative = 0;\n      this.isubn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    // Add without checks\n    return this._iaddn(num);\n  };\n\n  BN.prototype._iaddn = function _iaddn (num) {\n    this.words[0] += num;\n\n    // Carry\n    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n      this.words[i] -= 0x4000000;\n      if (i === this.length - 1) {\n        this.words[i + 1] = 1;\n      } else {\n        this.words[i + 1]++;\n      }\n    }\n    this.length = Math.max(this.length, i + 1);\n\n    return this;\n  };\n\n  // Subtract plain number `num` from `this`\n  BN.prototype.isubn = function isubn (num) {\n    assert(typeof num === 'number');\n    assert(num < 0x4000000);\n    if (num < 0) return this.iaddn(-num);\n\n    if (this.negative !== 0) {\n      this.negative = 0;\n      this.iaddn(num);\n      this.negative = 1;\n      return this;\n    }\n\n    this.words[0] -= num;\n\n    if (this.length === 1 && this.words[0] < 0) {\n      this.words[0] = -this.words[0];\n      this.negative = 1;\n    } else {\n      // Carry\n      for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n        this.words[i] += 0x4000000;\n        this.words[i + 1] -= 1;\n      }\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.addn = function addn (num) {\n    return this.clone().iaddn(num);\n  };\n\n  BN.prototype.subn = function subn (num) {\n    return this.clone().isubn(num);\n  };\n\n  BN.prototype.iabs = function iabs () {\n    this.negative = 0;\n\n    return this;\n  };\n\n  BN.prototype.abs = function abs () {\n    return this.clone().iabs();\n  };\n\n  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {\n    var len = num.length + shift;\n    var i;\n\n    this._expand(len);\n\n    var w;\n    var carry = 0;\n    for (i = 0; i < num.length; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      var right = (num.words[i] | 0) * mul;\n      w -= right & 0x3ffffff;\n      carry = (w >> 26) - ((right / 0x4000000) | 0);\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n    for (; i < this.length - shift; i++) {\n      w = (this.words[i + shift] | 0) + carry;\n      carry = w >> 26;\n      this.words[i + shift] = w & 0x3ffffff;\n    }\n\n    if (carry === 0) return this.strip();\n\n    // Subtraction overflow\n    assert(carry === -1);\n    carry = 0;\n    for (i = 0; i < this.length; i++) {\n      w = -(this.words[i] | 0) + carry;\n      carry = w >> 26;\n      this.words[i] = w & 0x3ffffff;\n    }\n    this.negative = 1;\n\n    return this.strip();\n  };\n\n  BN.prototype._wordDiv = function _wordDiv (num, mode) {\n    var shift = this.length - num.length;\n\n    var a = this.clone();\n    var b = num;\n\n    // Normalize\n    var bhi = b.words[b.length - 1] | 0;\n    var bhiBits = this._countBits(bhi);\n    shift = 26 - bhiBits;\n    if (shift !== 0) {\n      b = b.ushln(shift);\n      a.iushln(shift);\n      bhi = b.words[b.length - 1] | 0;\n    }\n\n    // Initialize quotient\n    var m = a.length - b.length;\n    var q;\n\n    if (mode !== 'mod') {\n      q = new BN(null);\n      q.length = m + 1;\n      q.words = new Array(q.length);\n      for (var i = 0; i < q.length; i++) {\n        q.words[i] = 0;\n      }\n    }\n\n    var diff = a.clone()._ishlnsubmul(b, 1, m);\n    if (diff.negative === 0) {\n      a = diff;\n      if (q) {\n        q.words[m] = 1;\n      }\n    }\n\n    for (var j = m - 1; j >= 0; j--) {\n      var qj = (a.words[b.length + j] | 0) * 0x4000000 +\n        (a.words[b.length + j - 1] | 0);\n\n      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n      // (0x7ffffff)\n      qj = Math.min((qj / bhi) | 0, 0x3ffffff);\n\n      a._ishlnsubmul(b, qj, j);\n      while (a.negative !== 0) {\n        qj--;\n        a.negative = 0;\n        a._ishlnsubmul(b, 1, j);\n        if (!a.isZero()) {\n          a.negative ^= 1;\n        }\n      }\n      if (q) {\n        q.words[j] = qj;\n      }\n    }\n    if (q) {\n      q.strip();\n    }\n    a.strip();\n\n    // Denormalize\n    if (mode !== 'div' && shift !== 0) {\n      a.iushrn(shift);\n    }\n\n    return {\n      div: q || null,\n      mod: a\n    };\n  };\n\n  // NOTE: 1) `mode` can be set to `mod` to request mod only,\n  //       to `div` to request div only, or be absent to\n  //       request both div & mod\n  //       2) `positive` is true if unsigned mod is requested\n  BN.prototype.divmod = function divmod (num, mode, positive) {\n    assert(!num.isZero());\n\n    if (this.isZero()) {\n      return {\n        div: new BN(0),\n        mod: new BN(0)\n      };\n    }\n\n    var div, mod, res;\n    if (this.negative !== 0 && num.negative === 0) {\n      res = this.neg().divmod(num, mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.iadd(num);\n        }\n      }\n\n      return {\n        div: div,\n        mod: mod\n      };\n    }\n\n    if (this.negative === 0 && num.negative !== 0) {\n      res = this.divmod(num.neg(), mode);\n\n      if (mode !== 'mod') {\n        div = res.div.neg();\n      }\n\n      return {\n        div: div,\n        mod: res.mod\n      };\n    }\n\n    if ((this.negative & num.negative) !== 0) {\n      res = this.neg().divmod(num.neg(), mode);\n\n      if (mode !== 'div') {\n        mod = res.mod.neg();\n        if (positive && mod.negative !== 0) {\n          mod.isub(num);\n        }\n      }\n\n      return {\n        div: res.div,\n        mod: mod\n      };\n    }\n\n    // Both numbers are positive at this point\n\n    // Strip both numbers to approximate shift value\n    if (num.length > this.length || this.cmp(num) < 0) {\n      return {\n        div: new BN(0),\n        mod: this\n      };\n    }\n\n    // Very short reduction\n    if (num.length === 1) {\n      if (mode === 'div') {\n        return {\n          div: this.divn(num.words[0]),\n          mod: null\n        };\n      }\n\n      if (mode === 'mod') {\n        return {\n          div: null,\n          mod: new BN(this.modn(num.words[0]))\n        };\n      }\n\n      return {\n        div: this.divn(num.words[0]),\n        mod: new BN(this.modn(num.words[0]))\n      };\n    }\n\n    return this._wordDiv(num, mode);\n  };\n\n  // Find `this` / `num`\n  BN.prototype.div = function div (num) {\n    return this.divmod(num, 'div', false).div;\n  };\n\n  // Find `this` % `num`\n  BN.prototype.mod = function mod (num) {\n    return this.divmod(num, 'mod', false).mod;\n  };\n\n  BN.prototype.umod = function umod (num) {\n    return this.divmod(num, 'mod', true).mod;\n  };\n\n  // Find Round(`this` / `num`)\n  BN.prototype.divRound = function divRound (num) {\n    var dm = this.divmod(num);\n\n    // Fast case - exact division\n    if (dm.mod.isZero()) return dm.div;\n\n    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n\n    var half = num.ushrn(1);\n    var r2 = num.andln(1);\n    var cmp = mod.cmp(half);\n\n    // Round down\n    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;\n\n    // Round up\n    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n  };\n\n  BN.prototype.modn = function modn (num) {\n    assert(num <= 0x3ffffff);\n    var p = (1 << 26) % num;\n\n    var acc = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      acc = (p * acc + (this.words[i] | 0)) % num;\n    }\n\n    return acc;\n  };\n\n  // In-place division by number\n  BN.prototype.idivn = function idivn (num) {\n    assert(num <= 0x3ffffff);\n\n    var carry = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var w = (this.words[i] | 0) + carry * 0x4000000;\n      this.words[i] = (w / num) | 0;\n      carry = w % num;\n    }\n\n    return this.strip();\n  };\n\n  BN.prototype.divn = function divn (num) {\n    return this.clone().idivn(num);\n  };\n\n  BN.prototype.egcd = function egcd (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var x = this;\n    var y = p.clone();\n\n    if (x.negative !== 0) {\n      x = x.umod(p);\n    } else {\n      x = x.clone();\n    }\n\n    // A * x + B * y = x\n    var A = new BN(1);\n    var B = new BN(0);\n\n    // C * x + D * y = y\n    var C = new BN(0);\n    var D = new BN(1);\n\n    var g = 0;\n\n    while (x.isEven() && y.isEven()) {\n      x.iushrn(1);\n      y.iushrn(1);\n      ++g;\n    }\n\n    var yp = y.clone();\n    var xp = x.clone();\n\n    while (!x.isZero()) {\n      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        x.iushrn(i);\n        while (i-- > 0) {\n          if (A.isOdd() || B.isOdd()) {\n            A.iadd(yp);\n            B.isub(xp);\n          }\n\n          A.iushrn(1);\n          B.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        y.iushrn(j);\n        while (j-- > 0) {\n          if (C.isOdd() || D.isOdd()) {\n            C.iadd(yp);\n            D.isub(xp);\n          }\n\n          C.iushrn(1);\n          D.iushrn(1);\n        }\n      }\n\n      if (x.cmp(y) >= 0) {\n        x.isub(y);\n        A.isub(C);\n        B.isub(D);\n      } else {\n        y.isub(x);\n        C.isub(A);\n        D.isub(B);\n      }\n    }\n\n    return {\n      a: C,\n      b: D,\n      gcd: y.iushln(g)\n    };\n  };\n\n  // This is reduced incarnation of the binary EEA\n  // above, designated to invert members of the\n  // _prime_ fields F(p) at a maximal speed\n  BN.prototype._invmp = function _invmp (p) {\n    assert(p.negative === 0);\n    assert(!p.isZero());\n\n    var a = this;\n    var b = p.clone();\n\n    if (a.negative !== 0) {\n      a = a.umod(p);\n    } else {\n      a = a.clone();\n    }\n\n    var x1 = new BN(1);\n    var x2 = new BN(0);\n\n    var delta = b.clone();\n\n    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n      if (i > 0) {\n        a.iushrn(i);\n        while (i-- > 0) {\n          if (x1.isOdd()) {\n            x1.iadd(delta);\n          }\n\n          x1.iushrn(1);\n        }\n      }\n\n      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n      if (j > 0) {\n        b.iushrn(j);\n        while (j-- > 0) {\n          if (x2.isOdd()) {\n            x2.iadd(delta);\n          }\n\n          x2.iushrn(1);\n        }\n      }\n\n      if (a.cmp(b) >= 0) {\n        a.isub(b);\n        x1.isub(x2);\n      } else {\n        b.isub(a);\n        x2.isub(x1);\n      }\n    }\n\n    var res;\n    if (a.cmpn(1) === 0) {\n      res = x1;\n    } else {\n      res = x2;\n    }\n\n    if (res.cmpn(0) < 0) {\n      res.iadd(p);\n    }\n\n    return res;\n  };\n\n  BN.prototype.gcd = function gcd (num) {\n    if (this.isZero()) return num.abs();\n    if (num.isZero()) return this.abs();\n\n    var a = this.clone();\n    var b = num.clone();\n    a.negative = 0;\n    b.negative = 0;\n\n    // Remove common factor of two\n    for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n      a.iushrn(1);\n      b.iushrn(1);\n    }\n\n    do {\n      while (a.isEven()) {\n        a.iushrn(1);\n      }\n      while (b.isEven()) {\n        b.iushrn(1);\n      }\n\n      var r = a.cmp(b);\n      if (r < 0) {\n        // Swap `a` and `b` to make `a` always bigger than `b`\n        var t = a;\n        a = b;\n        b = t;\n      } else if (r === 0 || b.cmpn(1) === 0) {\n        break;\n      }\n\n      a.isub(b);\n    } while (true);\n\n    return b.iushln(shift);\n  };\n\n  // Invert number in the field F(num)\n  BN.prototype.invm = function invm (num) {\n    return this.egcd(num).a.umod(num);\n  };\n\n  BN.prototype.isEven = function isEven () {\n    return (this.words[0] & 1) === 0;\n  };\n\n  BN.prototype.isOdd = function isOdd () {\n    return (this.words[0] & 1) === 1;\n  };\n\n  // And first word and num\n  BN.prototype.andln = function andln (num) {\n    return this.words[0] & num;\n  };\n\n  // Increment at the bit position in-line\n  BN.prototype.bincn = function bincn (bit) {\n    assert(typeof bit === 'number');\n    var r = bit % 26;\n    var s = (bit - r) / 26;\n    var q = 1 << r;\n\n    // Fast case: bit is much higher than all existing words\n    if (this.length <= s) {\n      this._expand(s + 1);\n      this.words[s] |= q;\n      return this;\n    }\n\n    // Add bit and propagate, if needed\n    var carry = q;\n    for (var i = s; carry !== 0 && i < this.length; i++) {\n      var w = this.words[i] | 0;\n      w += carry;\n      carry = w >>> 26;\n      w &= 0x3ffffff;\n      this.words[i] = w;\n    }\n    if (carry !== 0) {\n      this.words[i] = carry;\n      this.length++;\n    }\n    return this;\n  };\n\n  BN.prototype.isZero = function isZero () {\n    return this.length === 1 && this.words[0] === 0;\n  };\n\n  BN.prototype.cmpn = function cmpn (num) {\n    var negative = num < 0;\n\n    if (this.negative !== 0 && !negative) return -1;\n    if (this.negative === 0 && negative) return 1;\n\n    this.strip();\n\n    var res;\n    if (this.length > 1) {\n      res = 1;\n    } else {\n      if (negative) {\n        num = -num;\n      }\n\n      assert(num <= 0x3ffffff, 'Number is too big');\n\n      var w = this.words[0] | 0;\n      res = w === num ? 0 : w < num ? -1 : 1;\n    }\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Compare two numbers and return:\n  // 1 - if `this` > `num`\n  // 0 - if `this` == `num`\n  // -1 - if `this` < `num`\n  BN.prototype.cmp = function cmp (num) {\n    if (this.negative !== 0 && num.negative === 0) return -1;\n    if (this.negative === 0 && num.negative !== 0) return 1;\n\n    var res = this.ucmp(num);\n    if (this.negative !== 0) return -res | 0;\n    return res;\n  };\n\n  // Unsigned comparison\n  BN.prototype.ucmp = function ucmp (num) {\n    // At this point both numbers have the same sign\n    if (this.length > num.length) return 1;\n    if (this.length < num.length) return -1;\n\n    var res = 0;\n    for (var i = this.length - 1; i >= 0; i--) {\n      var a = this.words[i] | 0;\n      var b = num.words[i] | 0;\n\n      if (a === b) continue;\n      if (a < b) {\n        res = -1;\n      } else if (a > b) {\n        res = 1;\n      }\n      break;\n    }\n    return res;\n  };\n\n  BN.prototype.gtn = function gtn (num) {\n    return this.cmpn(num) === 1;\n  };\n\n  BN.prototype.gt = function gt (num) {\n    return this.cmp(num) === 1;\n  };\n\n  BN.prototype.gten = function gten (num) {\n    return this.cmpn(num) >= 0;\n  };\n\n  BN.prototype.gte = function gte (num) {\n    return this.cmp(num) >= 0;\n  };\n\n  BN.prototype.ltn = function ltn (num) {\n    return this.cmpn(num) === -1;\n  };\n\n  BN.prototype.lt = function lt (num) {\n    return this.cmp(num) === -1;\n  };\n\n  BN.prototype.lten = function lten (num) {\n    return this.cmpn(num) <= 0;\n  };\n\n  BN.prototype.lte = function lte (num) {\n    return this.cmp(num) <= 0;\n  };\n\n  BN.prototype.eqn = function eqn (num) {\n    return this.cmpn(num) === 0;\n  };\n\n  BN.prototype.eq = function eq (num) {\n    return this.cmp(num) === 0;\n  };\n\n  //\n  // A reduce context, could be using montgomery or something better, depending\n  // on the `m` itself.\n  //\n  BN.red = function red (num) {\n    return new Red(num);\n  };\n\n  BN.prototype.toRed = function toRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    assert(this.negative === 0, 'red works only with positives');\n    return ctx.convertTo(this)._forceRed(ctx);\n  };\n\n  BN.prototype.fromRed = function fromRed () {\n    assert(this.red, 'fromRed works only with numbers in reduction context');\n    return this.red.convertFrom(this);\n  };\n\n  BN.prototype._forceRed = function _forceRed (ctx) {\n    this.red = ctx;\n    return this;\n  };\n\n  BN.prototype.forceRed = function forceRed (ctx) {\n    assert(!this.red, 'Already a number in reduction context');\n    return this._forceRed(ctx);\n  };\n\n  BN.prototype.redAdd = function redAdd (num) {\n    assert(this.red, 'redAdd works only with red numbers');\n    return this.red.add(this, num);\n  };\n\n  BN.prototype.redIAdd = function redIAdd (num) {\n    assert(this.red, 'redIAdd works only with red numbers');\n    return this.red.iadd(this, num);\n  };\n\n  BN.prototype.redSub = function redSub (num) {\n    assert(this.red, 'redSub works only with red numbers');\n    return this.red.sub(this, num);\n  };\n\n  BN.prototype.redISub = function redISub (num) {\n    assert(this.red, 'redISub works only with red numbers');\n    return this.red.isub(this, num);\n  };\n\n  BN.prototype.redShl = function redShl (num) {\n    assert(this.red, 'redShl works only with red numbers');\n    return this.red.shl(this, num);\n  };\n\n  BN.prototype.redMul = function redMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.mul(this, num);\n  };\n\n  BN.prototype.redIMul = function redIMul (num) {\n    assert(this.red, 'redMul works only with red numbers');\n    this.red._verify2(this, num);\n    return this.red.imul(this, num);\n  };\n\n  BN.prototype.redSqr = function redSqr () {\n    assert(this.red, 'redSqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqr(this);\n  };\n\n  BN.prototype.redISqr = function redISqr () {\n    assert(this.red, 'redISqr works only with red numbers');\n    this.red._verify1(this);\n    return this.red.isqr(this);\n  };\n\n  // Square root over p\n  BN.prototype.redSqrt = function redSqrt () {\n    assert(this.red, 'redSqrt works only with red numbers');\n    this.red._verify1(this);\n    return this.red.sqrt(this);\n  };\n\n  BN.prototype.redInvm = function redInvm () {\n    assert(this.red, 'redInvm works only with red numbers');\n    this.red._verify1(this);\n    return this.red.invm(this);\n  };\n\n  // Return negative clone of `this` % `red modulo`\n  BN.prototype.redNeg = function redNeg () {\n    assert(this.red, 'redNeg works only with red numbers');\n    this.red._verify1(this);\n    return this.red.neg(this);\n  };\n\n  BN.prototype.redPow = function redPow (num) {\n    assert(this.red && !num.red, 'redPow(normalNum)');\n    this.red._verify1(this);\n    return this.red.pow(this, num);\n  };\n\n  // Prime numbers with efficient reduction\n  var primes = {\n    k256: null,\n    p224: null,\n    p192: null,\n    p25519: null\n  };\n\n  // Pseudo-Mersenne prime\n  function MPrime (name, p) {\n    // P = 2 ^ N - K\n    this.name = name;\n    this.p = new BN(p, 16);\n    this.n = this.p.bitLength();\n    this.k = new BN(1).iushln(this.n).isub(this.p);\n\n    this.tmp = this._tmp();\n  }\n\n  MPrime.prototype._tmp = function _tmp () {\n    var tmp = new BN(null);\n    tmp.words = new Array(Math.ceil(this.n / 13));\n    return tmp;\n  };\n\n  MPrime.prototype.ireduce = function ireduce (num) {\n    // Assumes that `num` is less than `P^2`\n    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n    var r = num;\n    var rlen;\n\n    do {\n      this.split(r, this.tmp);\n      r = this.imulK(r);\n      r = r.iadd(this.tmp);\n      rlen = r.bitLength();\n    } while (rlen > this.n);\n\n    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n    if (cmp === 0) {\n      r.words[0] = 0;\n      r.length = 1;\n    } else if (cmp > 0) {\n      r.isub(this.p);\n    } else {\n      if (r.strip !== undefined) {\n        // r is BN v4 instance\n        r.strip();\n      } else {\n        // r is BN v5 instance\n        r._strip();\n      }\n    }\n\n    return r;\n  };\n\n  MPrime.prototype.split = function split (input, out) {\n    input.iushrn(this.n, 0, out);\n  };\n\n  MPrime.prototype.imulK = function imulK (num) {\n    return num.imul(this.k);\n  };\n\n  function K256 () {\n    MPrime.call(\n      this,\n      'k256',\n      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n  }\n  inherits(K256, MPrime);\n\n  K256.prototype.split = function split (input, output) {\n    // 256 = 9 * 26 + 22\n    var mask = 0x3fffff;\n\n    var outLen = Math.min(input.length, 9);\n    for (var i = 0; i < outLen; i++) {\n      output.words[i] = input.words[i];\n    }\n    output.length = outLen;\n\n    if (input.length <= 9) {\n      input.words[0] = 0;\n      input.length = 1;\n      return;\n    }\n\n    // Shift by 9 limbs\n    var prev = input.words[9];\n    output.words[output.length++] = prev & mask;\n\n    for (i = 10; i < input.length; i++) {\n      var next = input.words[i] | 0;\n      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);\n      prev = next;\n    }\n    prev >>>= 22;\n    input.words[i - 10] = prev;\n    if (prev === 0 && input.length > 10) {\n      input.length -= 10;\n    } else {\n      input.length -= 9;\n    }\n  };\n\n  K256.prototype.imulK = function imulK (num) {\n    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n    num.words[num.length] = 0;\n    num.words[num.length + 1] = 0;\n    num.length += 2;\n\n    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n    var lo = 0;\n    for (var i = 0; i < num.length; i++) {\n      var w = num.words[i] | 0;\n      lo += w * 0x3d1;\n      num.words[i] = lo & 0x3ffffff;\n      lo = w * 0x40 + ((lo / 0x4000000) | 0);\n    }\n\n    // Fast length reduction\n    if (num.words[num.length - 1] === 0) {\n      num.length--;\n      if (num.words[num.length - 1] === 0) {\n        num.length--;\n      }\n    }\n    return num;\n  };\n\n  function P224 () {\n    MPrime.call(\n      this,\n      'p224',\n      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n  }\n  inherits(P224, MPrime);\n\n  function P192 () {\n    MPrime.call(\n      this,\n      'p192',\n      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n  }\n  inherits(P192, MPrime);\n\n  function P25519 () {\n    // 2 ^ 255 - 19\n    MPrime.call(\n      this,\n      '25519',\n      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n  }\n  inherits(P25519, MPrime);\n\n  P25519.prototype.imulK = function imulK (num) {\n    // K = 0x13\n    var carry = 0;\n    for (var i = 0; i < num.length; i++) {\n      var hi = (num.words[i] | 0) * 0x13 + carry;\n      var lo = hi & 0x3ffffff;\n      hi >>>= 26;\n\n      num.words[i] = lo;\n      carry = hi;\n    }\n    if (carry !== 0) {\n      num.words[num.length++] = carry;\n    }\n    return num;\n  };\n\n  // Exported mostly for testing purposes, use plain name instead\n  BN._prime = function prime (name) {\n    // Cached version of prime\n    if (primes[name]) return primes[name];\n\n    var prime;\n    if (name === 'k256') {\n      prime = new K256();\n    } else if (name === 'p224') {\n      prime = new P224();\n    } else if (name === 'p192') {\n      prime = new P192();\n    } else if (name === 'p25519') {\n      prime = new P25519();\n    } else {\n      throw new Error('Unknown prime ' + name);\n    }\n    primes[name] = prime;\n\n    return prime;\n  };\n\n  //\n  // Base reduction engine\n  //\n  function Red (m) {\n    if (typeof m === 'string') {\n      var prime = BN._prime(m);\n      this.m = prime.p;\n      this.prime = prime;\n    } else {\n      assert(m.gtn(1), 'modulus must be greater than 1');\n      this.m = m;\n      this.prime = null;\n    }\n  }\n\n  Red.prototype._verify1 = function _verify1 (a) {\n    assert(a.negative === 0, 'red works only with positives');\n    assert(a.red, 'red works only with red numbers');\n  };\n\n  Red.prototype._verify2 = function _verify2 (a, b) {\n    assert((a.negative | b.negative) === 0, 'red works only with positives');\n    assert(a.red && a.red === b.red,\n      'red works only with red numbers');\n  };\n\n  Red.prototype.imod = function imod (a) {\n    if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n    return a.umod(this.m)._forceRed(this);\n  };\n\n  Red.prototype.neg = function neg (a) {\n    if (a.isZero()) {\n      return a.clone();\n    }\n\n    return this.m.sub(a)._forceRed(this);\n  };\n\n  Red.prototype.add = function add (a, b) {\n    this._verify2(a, b);\n\n    var res = a.add(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.iadd = function iadd (a, b) {\n    this._verify2(a, b);\n\n    var res = a.iadd(b);\n    if (res.cmp(this.m) >= 0) {\n      res.isub(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.sub = function sub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.sub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res._forceRed(this);\n  };\n\n  Red.prototype.isub = function isub (a, b) {\n    this._verify2(a, b);\n\n    var res = a.isub(b);\n    if (res.cmpn(0) < 0) {\n      res.iadd(this.m);\n    }\n    return res;\n  };\n\n  Red.prototype.shl = function shl (a, num) {\n    this._verify1(a);\n    return this.imod(a.ushln(num));\n  };\n\n  Red.prototype.imul = function imul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.imul(b));\n  };\n\n  Red.prototype.mul = function mul (a, b) {\n    this._verify2(a, b);\n    return this.imod(a.mul(b));\n  };\n\n  Red.prototype.isqr = function isqr (a) {\n    return this.imul(a, a.clone());\n  };\n\n  Red.prototype.sqr = function sqr (a) {\n    return this.mul(a, a);\n  };\n\n  Red.prototype.sqrt = function sqrt (a) {\n    if (a.isZero()) return a.clone();\n\n    var mod3 = this.m.andln(3);\n    assert(mod3 % 2 === 1);\n\n    // Fast case\n    if (mod3 === 3) {\n      var pow = this.m.add(new BN(1)).iushrn(2);\n      return this.pow(a, pow);\n    }\n\n    // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n    //\n    // Find Q and S, that Q * 2 ^ S = (P - 1)\n    var q = this.m.subn(1);\n    var s = 0;\n    while (!q.isZero() && q.andln(1) === 0) {\n      s++;\n      q.iushrn(1);\n    }\n    assert(!q.isZero());\n\n    var one = new BN(1).toRed(this);\n    var nOne = one.redNeg();\n\n    // Find quadratic non-residue\n    // NOTE: Max is such because of generalized Riemann hypothesis.\n    var lpow = this.m.subn(1).iushrn(1);\n    var z = this.m.bitLength();\n    z = new BN(2 * z * z).toRed(this);\n\n    while (this.pow(z, lpow).cmp(nOne) !== 0) {\n      z.redIAdd(nOne);\n    }\n\n    var c = this.pow(z, q);\n    var r = this.pow(a, q.addn(1).iushrn(1));\n    var t = this.pow(a, q);\n    var m = s;\n    while (t.cmp(one) !== 0) {\n      var tmp = t;\n      for (var i = 0; tmp.cmp(one) !== 0; i++) {\n        tmp = tmp.redSqr();\n      }\n      assert(i < m);\n      var b = this.pow(c, new BN(1).iushln(m - i - 1));\n\n      r = r.redMul(b);\n      c = b.redSqr();\n      t = t.redMul(c);\n      m = i;\n    }\n\n    return r;\n  };\n\n  Red.prototype.invm = function invm (a) {\n    var inv = a._invmp(this.m);\n    if (inv.negative !== 0) {\n      inv.negative = 0;\n      return this.imod(inv).redNeg();\n    } else {\n      return this.imod(inv);\n    }\n  };\n\n  Red.prototype.pow = function pow (a, num) {\n    if (num.isZero()) return new BN(1).toRed(this);\n    if (num.cmpn(1) === 0) return a.clone();\n\n    var windowSize = 4;\n    var wnd = new Array(1 << windowSize);\n    wnd[0] = new BN(1).toRed(this);\n    wnd[1] = a;\n    for (var i = 2; i < wnd.length; i++) {\n      wnd[i] = this.mul(wnd[i - 1], a);\n    }\n\n    var res = wnd[0];\n    var current = 0;\n    var currentLen = 0;\n    var start = num.bitLength() % 26;\n    if (start === 0) {\n      start = 26;\n    }\n\n    for (i = num.length - 1; i >= 0; i--) {\n      var word = num.words[i];\n      for (var j = start - 1; j >= 0; j--) {\n        var bit = (word >> j) & 1;\n        if (res !== wnd[0]) {\n          res = this.sqr(res);\n        }\n\n        if (bit === 0 && current === 0) {\n          currentLen = 0;\n          continue;\n        }\n\n        current <<= 1;\n        current |= bit;\n        currentLen++;\n        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n\n        res = this.mul(res, wnd[current]);\n        currentLen = 0;\n        current = 0;\n      }\n      start = 26;\n    }\n\n    return res;\n  };\n\n  Red.prototype.convertTo = function convertTo (num) {\n    var r = num.umod(this.m);\n\n    return r === num ? r.clone() : r;\n  };\n\n  Red.prototype.convertFrom = function convertFrom (num) {\n    var res = num.clone();\n    res.red = null;\n    return res;\n  };\n\n  //\n  // Montgomery method engine\n  //\n\n  BN.mont = function mont (num) {\n    return new Mont(num);\n  };\n\n  function Mont (m) {\n    Red.call(this, m);\n\n    this.shift = this.m.bitLength();\n    if (this.shift % 26 !== 0) {\n      this.shift += 26 - (this.shift % 26);\n    }\n\n    this.r = new BN(1).iushln(this.shift);\n    this.r2 = this.imod(this.r.sqr());\n    this.rinv = this.r._invmp(this.m);\n\n    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n    this.minv = this.minv.umod(this.r);\n    this.minv = this.r.sub(this.minv);\n  }\n  inherits(Mont, Red);\n\n  Mont.prototype.convertTo = function convertTo (num) {\n    return this.imod(num.ushln(this.shift));\n  };\n\n  Mont.prototype.convertFrom = function convertFrom (num) {\n    var r = this.imod(num.mul(this.rinv));\n    r.red = null;\n    return r;\n  };\n\n  Mont.prototype.imul = function imul (a, b) {\n    if (a.isZero() || b.isZero()) {\n      a.words[0] = 0;\n      a.length = 1;\n      return a;\n    }\n\n    var t = a.imul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.mul = function mul (a, b) {\n    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n\n    var t = a.mul(b);\n    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n    var u = t.isub(c).iushrn(this.shift);\n    var res = u;\n    if (u.cmp(this.m) >= 0) {\n      res = u.isub(this.m);\n    } else if (u.cmpn(0) < 0) {\n      res = u.iadd(this.m);\n    }\n\n    return res._forceRed(this);\n  };\n\n  Mont.prototype.invm = function invm (a) {\n    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n    var res = this.imod(a._invmp(this.m).mul(this.r2));\n    return res._forceRed(this);\n  };\n})(typeof module === 'undefined' || module, this);\n","import { isExtractableFile, extractFiles, ExtractableFile } from 'extract-files'\nimport FormDataNode from 'form-data'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\n\nimport { Variables } from './types'\n\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = (value: any): value is ExtractableFile | { pipe: Function } =>\n  isExtractableFile(value) ||\n  (value !== null && typeof value === 'object' && typeof value.pipe === 'function')\n\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nexport default function createRequestBody(\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer = defaultJsonSerializer\n): string | FormData {\n  const { clone, files } = extractFiles({ query, variables, operationName }, '', isExtractableFileEnhanced)\n\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone)\n    }\n\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected')\n    }\n\n    // Batch support\n    const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n      (accu, currentQuery, index) => {\n        accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n        return accu\n      },\n      []\n    )\n\n    return jsonSerializer.stringify(payload)\n  }\n\n  const Form = typeof FormData === 'undefined' ? FormDataNode : FormData\n\n  const form = new Form()\n\n  form.append('operations', jsonSerializer.stringify(clone))\n\n  const map: { [key: number]: string[] } = {}\n  let i = 0\n  files.forEach((paths) => {\n    map[++i] = paths\n  })\n  form.append('map', jsonSerializer.stringify(map))\n\n  i = 0\n  files.forEach((paths, file) => {\n    form.append(`${++i}`, file as any)\n  })\n\n  return form as FormData\n}\n","import { JsonSerializer } from './types.dom'\n\nexport const defaultJsonSerializer: JsonSerializer = {\n  parse: JSON.parse,\n  stringify: JSON.stringify,\n}\n","import { ClientError, RequestDocument, Variables } from './types'\nimport * as Dom from './types.dom'\nimport { resolveRequestDocument } from '.'\n\nconst CONNECTION_INIT = 'connection_init'\nconst CONNECTION_ACK = 'connection_ack'\nconst PING = 'ping'\nconst PONG = 'pong'\nconst SUBSCRIBE = 'subscribe'\nconst NEXT = 'next'\nconst ERROR = 'error'\nconst COMPLETE = 'complete'\n\ntype MessagePayload = { [key: string]: any }\n\ntype SubscribePayload<V = Variables, E = any> = {\n  operationName?: string | null\n  query: string\n  variables?: V\n  extensions?: E\n}\n\nclass GraphQLWebSocketMessage<A = MessagePayload> {\n  private _type: string\n  private _id?: string\n  private _payload?: A\n\n  public get type(): string {\n    return this._type\n  }\n  public get id(): string | undefined {\n    return this._id\n  }\n  public get payload(): A | undefined {\n    return this._payload\n  }\n\n  constructor(type: string, payload?: A, id?: string) {\n    this._type = type\n    this._payload = payload\n    this._id = id\n  }\n\n  public get text(): string {\n    const result: any = { type: this.type }\n    if (this.id != null && this.id != undefined) result.id = this.id\n    if (this.payload != null && this.payload != undefined) result.payload = this.payload\n    return JSON.stringify(result)\n  }\n\n  static parse<A>(data: string, f: (payload: any) => A): GraphQLWebSocketMessage<A> {\n    const { type, payload, id }: { type: string; payload: any; id: string } = JSON.parse(data)\n    return new GraphQLWebSocketMessage(type, f(payload), id)\n  }\n}\n\nexport type SocketHandler = {\n  onInit?: <T>() => Promise<T>\n  onAcknowledged?: <A>(payload?: A) => Promise<void>\n  onPing?: <In, Out>(payload: In) => Promise<Out>\n  onPong?: <T>(payload: T) => any\n  onClose?: () => any\n}\n\nexport type UnsubscribeCallback = () => void\n\nexport interface GraphQLSubscriber<T, E = unknown> {\n  next?(data: T, extensions?: E): void\n  error?(errorValue: ClientError): void\n  complete?(): void\n}\n\ntype SubscriptionRecord = {\n  subscriber: GraphQLSubscriber<unknown, unknown>\n  query: string\n  variables: Variables\n}\n\ntype SocketState = {\n  acknowledged: boolean\n  lastRequestId: number\n  subscriptions: { [key: string]: SubscriptionRecord }\n}\n\nexport class GraphQLWebSocketClient {\n  static PROTOCOL: string = 'graphql-transport-ws'\n\n  private socket: WebSocket\n  private socketState: SocketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} }\n\n  constructor(socket: WebSocket, { onInit, onAcknowledged, onPing, onPong }: SocketHandler) {\n    this.socket = socket\n\n    socket.onopen = async (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n      socket.send(ConnectionInit(onInit ? await onInit() : null).text)\n    }\n\n    socket.onclose = (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n    }\n\n    socket.onerror = (e) => {\n      console.error(e)\n    }\n\n    socket.onmessage = (e) => {\n      try {\n        const message = parseMessage(e.data)\n        switch (message.type) {\n          case CONNECTION_ACK: {\n            if (this.socketState.acknowledged) {\n              console.warn('Duplicate CONNECTION_ACK message ignored')\n            } else {\n              this.socketState.acknowledged = true\n              if (onAcknowledged) onAcknowledged(message.payload)\n            }\n            return\n          }\n          case PING: {\n            if (onPing) onPing(message.payload).then((r) => socket.send(Pong(r).text))\n            else socket.send(Pong(null).text)\n            return\n          }\n          case PONG: {\n            if (onPong) onPong(message.payload)\n            return\n          }\n        }\n\n        if (!this.socketState.acknowledged) {\n          // Web-socket connection not acknowledged\n          return\n        }\n\n        if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n          // No subscription identifer or subscription indentifier is not found\n          return\n        }\n        const { query, variables, subscriber } = this.socketState.subscriptions[message.id]\n\n        switch (message.type) {\n          case NEXT: {\n            if (!message.payload.errors && message.payload.data) {\n              subscriber.next && subscriber.next(message.payload.data)\n            }\n            if (message.payload.errors) {\n              subscriber.error &&\n                subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }))\n            } else {\n            }\n            return\n          }\n\n          case ERROR: {\n            subscriber.error &&\n              subscriber.error(\n                new ClientError({ errors: message.payload, status: 200 }, { query, variables })\n              )\n            return\n          }\n\n          case COMPLETE: {\n            subscriber.complete && subscriber.complete()\n            delete this.socketState.subscriptions[message.id]\n            return\n          }\n        }\n      } catch (e) {\n        // Unexpected errors while handling graphql-ws message\n        console.error(e)\n        socket.close(1006)\n      }\n      socket.close(4400, 'Unknown graphql-ws message.')\n    }\n  }\n\n  private makeSubscribe<T, V, E>(\n    query: string,\n    operationName: string | undefined,\n    variables: V,\n    subscriber: GraphQLSubscriber<T, E>\n  ): UnsubscribeCallback {\n    const subscriptionId = (this.socketState.lastRequestId++).toString()\n    this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber }\n    this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text)\n    return () => {\n      this.socket.send(Complete(subscriptionId).text)\n      delete this.socketState.subscriptions[subscriptionId]\n    }\n  }\n\n  rawRequest<T = any, V = Variables, E = any>(\n    query: string,\n    variables?: V\n  ): Promise<{ data: T; extensions?: E }> {\n    return new Promise<{ data: T; extensions?: E; headers?: Dom.Headers; status?: number }>(\n      (resolve, reject) => {\n        let result: { data: T; extensions?: E }\n        this.rawSubscribe(\n          query,\n          {\n            next: (data: T, extensions: E) => (result = { data, extensions }),\n            error: reject,\n            complete: () => resolve(result),\n          },\n          variables\n        )\n      }\n    )\n  }\n\n  request<T = any, V = Variables>(document: RequestDocument, variables?: V): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      let result: T\n      this.subscribe(\n        document,\n        {\n          next: (data: T) => (result = data),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  subscribe<T = any, V = Variables, E = any>(\n    document: RequestDocument,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const { query, operationName } = resolveRequestDocument(document)\n    return this.makeSubscribe(query, operationName, variables, subscriber)\n  }\n\n  rawSubscribe<T = any, V = Variables, E = any>(\n    query: string,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    return this.makeSubscribe(query, undefined, variables, subscriber)\n  }\n\n  ping(payload: Variables) {\n    this.socket.send(Ping(payload).text)\n  }\n\n  close() {\n    this.socket.close(1000)\n  }\n}\n\n// Helper functions\n\nfunction parseMessage<A = any>(data: string, f: (payload: any) => A = (a) => a): GraphQLWebSocketMessage<A> {\n  const m = GraphQLWebSocketMessage.parse<A>(data, f)\n  return m\n}\n\nfunction ConnectionInit<A>(payload?: A) {\n  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload)\n}\n\nfunction Ping(payload: any) {\n  return new GraphQLWebSocketMessage(PING, payload, undefined)\n}\nfunction Pong(payload: any) {\n  return new GraphQLWebSocketMessage(PONG, payload, undefined)\n}\n\nfunction Subscribe(id: string, payload: SubscribePayload) {\n  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id)\n}\n\nfunction Complete(id: string) {\n  return new GraphQLWebSocketMessage(COMPLETE, undefined, id)\n}\n","import crossFetch, * as CrossFetch from 'cross-fetch'\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { OperationDefinitionNode, DocumentNode } from 'graphql/language/ast'\n\nimport { parse } from 'graphql/language/parser'\nimport { print } from 'graphql/language/printer'\nimport createRequestBody from './createRequestBody'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRequestArgs,\n  parseBatchRequestsExtendedArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs'\nimport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestOptions,\n  RequestDocument,\n  RequestOptions,\n  BatchRequestsExtendedOptions,\n  RawRequestExtendedOptions,\n  RequestExtendedOptions,\n  Variables,\n  PatchedRequestInit,\n  MaybeFunction,\n  Response,\n  RemoveIndex,\n} from './types'\nimport * as Dom from './types.dom'\n\nexport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  BatchRequestsExtendedOptions,\n  ClientError,\n  RawRequestOptions,\n  RawRequestExtendedOptions,\n  RequestDocument,\n  RequestOptions,\n  RequestExtendedOptions,\n  Variables,\n}\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers: Dom.RequestInit['headers']): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== 'undefined' && headers instanceof Headers) ||\n      (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        oHeaders[name] = value\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nconst queryCleanner = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim()\n\ntype TBuildGetQueryParams<V> =\n  | {\n      query: string\n      variables: V | undefined\n      operationName: string | undefined\n      jsonSerializer: Dom.JsonSerializer\n    }\n  | {\n      query: string[]\n      variables: V[] | undefined\n      operationName: undefined\n      jsonSerializer: Dom.JsonSerializer\n    }\n\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nconst buildGetQueryParams = <V>({\n  query,\n  variables,\n  operationName,\n  jsonSerializer,\n}: TBuildGetQueryParams<V>): string => {\n  if (!Array.isArray(query)) {\n    const search: string[] = [`query=${encodeURIComponent(queryCleanner(query))}`]\n\n    if (variables) {\n      search.push(`variables=${encodeURIComponent(jsonSerializer.stringify(variables))}`)\n    }\n\n    if (operationName) {\n      search.push(`operationName=${encodeURIComponent(operationName)}`)\n    }\n\n    return search.join('&')\n  }\n\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected')\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: string | undefined }[]>(\n    (accu, currentQuery, index) => {\n      accu.push({\n        query: queryCleanner(currentQuery),\n        variables: variables ? jsonSerializer.stringify(variables[index]) : undefined,\n      })\n      return accu\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(jsonSerializer.stringify(payload))}`\n}\n\n/**\n * Fetch data using POST method\n */\nconst post = async <V = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  middleware?: (request: Dom.RequestInit) => Dom.RequestInit | Promise<Dom.RequestInit>\n}) => {\n  const body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n\n  let options: Dom.RequestInit = {\n    method: 'POST',\n    headers: {\n      ...(typeof body === 'string' ? { 'Content-Type': 'application/json' } : {}),\n      ...headers,\n    },\n    body,\n    ...fetchOptions,\n  }\n  if (middleware) {\n    options = await Promise.resolve(middleware(options))\n  }\n  return await fetch(url, options)\n}\n\n/**\n * Fetch data using GET method\n */\nconst get = async <V = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: HeadersInit\n  operationName?: string\n  middleware?: (request: Dom.RequestInit) => Dom.RequestInit | Promise<Dom.RequestInit>\n}) => {\n  const queryParams = buildGetQueryParams<V>({\n    query,\n    variables,\n    operationName,\n    jsonSerializer: fetchOptions.jsonSerializer,\n  } as TBuildGetQueryParams<V>)\n\n  let options: Dom.RequestInit = {\n    method: 'GET',\n    headers,\n    ...fetchOptions,\n  }\n  if (middleware) {\n    options = await Promise.resolve(middleware(options))\n  }\n  return await fetch(`${url}?${queryParams}`, options)\n}\n\n/**\n * GraphQL Client.\n */\nexport class GraphQLClient {\n  constructor(private url: string, private readonly options: PatchedRequestInit = {}) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  async rawRequest<T = any, V = Variables>(\n    query: string,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<Response<T>>\n  async rawRequest<T = any, V = Variables>(options: RawRequestOptions<V>): Promise<Response<T>>\n  async rawRequest<T = any, V = Variables>(\n    queryOrOptions: string | RawRequestOptions<V>,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<Response<T>> {\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  request<T = any, V = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ..._variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n  ): Promise<T>\n  request<T = any, V = Variables>(options: RequestOptions<V>): Promise<T>\n  request<T = any, V = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs<V>(documentOrOptions, variables, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    return makeRequest<T, V>({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  batchRequests<T extends any = any, V = Variables>(\n    documents: BatchRequestDocument<V>[],\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T>\n  batchRequests<T = any, V = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  batchRequests<T = any, V = Variables>(\n    documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    return makeRequest<T, (V | undefined)[]>({\n      url,\n      query: queries,\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  setHeaders(headers: Dom.RequestInit['headers']): GraphQLClient {\n    this.options.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.options\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value\n    } else {\n      this.options.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nasync function makeRequest<T = any, V = Variables>({\n  url,\n  query,\n  variables,\n  headers,\n  operationName,\n  fetch,\n  method = 'POST',\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  fetch: any\n  method: string\n  fetchOptions: Dom.RequestInit\n  middleware?: (request: Dom.RequestInit) => Dom.RequestInit | Promise<Dom.RequestInit>\n}): Promise<Response<T>> {\n  const fetcher = method.toUpperCase() === 'POST' ? post : get\n  const isBathchingQuery = Array.isArray(query)\n\n  const response = await fetcher({\n    url,\n    query,\n    variables,\n    operationName,\n    headers,\n    fetch,\n    fetchOptions,\n    middleware,\n  })\n  const result = await getResult(response, fetchOptions.jsonSerializer)\n\n  const successfullyReceivedData =\n    isBathchingQuery && Array.isArray(result) ? !result.some(({ data }) => !data) : !!result.data\n\n  const successfullyPassedErrorPolicy =\n    !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore'\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    const { headers, status } = response\n\n    const { errors, ...rest } = result\n    const data = fetchOptions.errorPolicy === 'ignore' ? rest : result\n\n    return {\n      ...(isBathchingQuery ? { data } : data),\n      headers,\n      status,\n    }\n  } else {\n    const errorResult = typeof result === 'string' ? { error: result } : result\n    throw new ClientError(\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nexport async function rawRequest<T = any, V = Variables>(\n  url: string,\n  query: string,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<Response<T>>\nexport async function rawRequest<T = any, V = Variables>(\n  options: RawRequestExtendedOptions<V>\n): Promise<Response<T>>\nexport async function rawRequest<T = any, V = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<Response<T>> {\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, variables, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\nexport async function request<T = any, V = Variables>(\n  url: string,\n  document: RequestDocument | TypedDocumentNode<T, V>,\n  ..._variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n    ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n    : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n    ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n    : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n): Promise<T>\nexport async function request<T = any, V = Variables>(options: RequestExtendedOptions<V, T>): Promise<T>\nexport async function request<T = any, V = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V, T>,\n  document?: RequestDocument | TypedDocumentNode<T, V>,\n  ...variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n    ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n    : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n    ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n    : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n): Promise<T> {\n  const [variables, requestHeaders] = variablesAndRequestHeaders\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, variables, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport async function batchRequests<T = any, V = Variables>(\n  url: string,\n  documents: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T>\nexport async function batchRequests<T = any, V = Variables>(\n  options: BatchRequestsExtendedOptions<V>\n): Promise<T>\nexport async function batchRequests<T = any, V = Variables>(\n  urlOrOptions: string | BatchRequestsExtendedOptions<V>,\n  documents?: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T> {\n  const requestOptions = parseBatchRequestsExtendedArgs<V>(urlOrOptions, documents, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.batchRequests<T, V>({ ...requestOptions })\n}\n\nexport default request\n\n/**\n * todo\n */\nasync function getResult(response: Dom.Response, jsonSerializer = defaultJsonSerializer): Promise<any> {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === 'content-type') {\n      contentType = value\n    }\n  })\n\n  if (contentType && contentType.toLowerCase().startsWith('application/json')) {\n    return jsonSerializer.parse(await response.text())\n  } else {\n    return response.text()\n  }\n}\n/**\n * helpers\n */\n\nfunction extractOperationName(document: DocumentNode): string | undefined {\n  let operationName = undefined\n\n  const operationDefinitions = document.definitions.filter(\n    (definition) => definition.kind === 'OperationDefinition'\n  ) as OperationDefinitionNode[]\n\n  if (operationDefinitions.length === 1) {\n    operationName = operationDefinitions[0].name?.value\n  }\n\n  return operationName\n}\n\nexport function resolveRequestDocument(document: RequestDocument): { query: string; operationName?: string } {\n  if (typeof document === 'string') {\n    let operationName = undefined\n\n    try {\n      const parsedDocument = parse(document)\n      operationName = extractOperationName(parsedDocument)\n    } catch (err) {\n      // Failed parsing the document, the operationName will be undefined\n    }\n\n    return { query: document, operationName }\n  }\n\n  const operationName = extractOperationName(document)\n\n  return { query: print(document), operationName }\n}\n\nfunction callOrIdentity<T>(value: MaybeFunction<T>) {\n  return typeof value === 'function' ? (value as () => T)() : value\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport function gql(chunks: TemplateStringsArray, ...variables: any[]): string {\n  return chunks.reduce(\n    (accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ''}`,\n    ''\n  )\n}\n\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers: Dom.Response['headers']): Record<string, string> {\n  const o: any = {}\n  headers.forEach((v, k) => {\n    o[k] = v\n  })\n  return o\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws'\n","import {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  RawRequestOptions,\n  RequestDocument,\n  RequestOptions,\n  BatchRequestsExtendedOptions,\n  RawRequestExtendedOptions,\n  RequestExtendedOptions,\n  Variables,\n} from './types'\nimport * as Dom from './types.dom'\n\nexport function parseRequestArgs<V = Variables>(\n  documentOrOptions: RequestDocument | RequestOptions<V>,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): RequestOptions<V> {\n  return (documentOrOptions as RequestOptions<V>).document\n    ? (documentOrOptions as RequestOptions<V>)\n    : ({\n        document: documentOrOptions as RequestDocument,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RequestOptions<V>)\n}\n\nexport function parseRawRequestArgs<V = Variables>(\n  queryOrOptions: string | RawRequestOptions<V>,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): RawRequestOptions<V> {\n  return (queryOrOptions as RawRequestOptions<V>).query\n    ? (queryOrOptions as RawRequestOptions<V>)\n    : {\n        query: queryOrOptions as string,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n\nexport function parseBatchRequestArgs<V = Variables>(\n  documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n  requestHeaders?: Dom.RequestInit['headers']\n): BatchRequestsOptions<V> {\n  return (documentsOrOptions as BatchRequestsOptions<V>).documents\n    ? (documentsOrOptions as BatchRequestsOptions<V>)\n    : {\n        documents: documentsOrOptions as BatchRequestDocument<V>[],\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n\nexport function parseRequestExtendedArgs<V = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V>,\n  document?: RequestDocument,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): RequestExtendedOptions<V> {\n  return (urlOrOptions as RequestExtendedOptions<V>).document\n    ? (urlOrOptions as RequestExtendedOptions<V>)\n    : ({\n        url: urlOrOptions as string,\n        document: document as RequestDocument,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      } as unknown as RequestExtendedOptions<V>)\n}\n\nexport function parseRawRequestExtendedArgs<V = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  variables?: V,\n  requestHeaders?: Dom.RequestInit['headers']\n): RawRequestExtendedOptions<V> {\n  return (urlOrOptions as RawRequestExtendedOptions<V>).query\n    ? (urlOrOptions as RawRequestExtendedOptions<V>)\n    : {\n        url: urlOrOptions as string,\n        query: query as string,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n\nexport function parseBatchRequestsExtendedArgs<V = Variables>(\n  urlOrOptions: string | BatchRequestsExtendedOptions<V>,\n  documents?: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): BatchRequestsExtendedOptions<V> {\n  return (urlOrOptions as BatchRequestsExtendedOptions<V>).documents\n    ? (urlOrOptions as BatchRequestsExtendedOptions<V>)\n    : {\n        url: urlOrOptions as string,\n        documents: documents as BatchRequestDocument<V>[],\n        requestHeaders: requestHeaders,\n        signal: undefined,\n      }\n}\n","import { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport { DocumentNode } from 'graphql/language/ast'\nimport type { GraphQLError } from 'graphql/error/GraphQLError'\nimport * as Dom from './types.dom'\n\nexport type { GraphQLError }\n\nexport type Variables = { [key: string]: any }\n\nexport type RemoveIndex<T> = {\n  [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\n}\n\nexport interface GraphQLResponse<T = any> {\n  data?: T\n  errors?: GraphQLError[]\n  extensions?: any\n  status: number\n  [key: string]: any\n}\n\nexport interface GraphQLRequestContext<V = Variables> {\n  query: string | string[]\n  variables?: V\n}\n\nexport class ClientError extends Error {\n  response: GraphQLResponse\n  request: GraphQLRequestContext\n\n  constructor(response: GraphQLResponse, request: GraphQLRequestContext) {\n    const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n      response,\n      request,\n    })}`\n\n    super(message)\n\n    Object.setPrototypeOf(this, ClientError.prototype)\n\n    this.response = response\n    this.request = request\n\n    // this is needed as Safari doesn't support .captureStackTrace\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(this, ClientError)\n    }\n  }\n\n  private static extractMessage(response: GraphQLResponse): string {\n    try {\n      return response.errors![0].message\n    } catch (e) {\n      return `GraphQL Error (Code: ${response.status})`\n    }\n  }\n}\n\nexport type MaybeFunction<T> = T | (() => T)\n\nexport type RequestDocument = string | DocumentNode\n\nexport interface Response<T> {\n  data: T\n  extensions?: any\n  headers: Dom.Headers\n  errors?: GraphQLError[]\n  status: number\n}\n\nexport type PatchedRequestInit = Omit<Dom.RequestInit, 'headers'> & {\n  headers?: MaybeFunction<Dom.RequestInit['headers']>\n  requestMiddleware?: (request: Dom.RequestInit) => Dom.RequestInit | Promise<Dom.RequestInit>\n  responseMiddleware?: (response: Response<unknown> | Error) => void\n}\n\nexport type BatchRequestDocument<V = Variables> = {\n  document: RequestDocument\n  variables?: V\n}\n\nexport type RawRequestOptions<V = Variables> = {\n  query: string\n  variables?: V\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n}\n\nexport type RequestOptions<V = Variables, T = any> = {\n  document: RequestDocument | TypedDocumentNode<T, V>\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n} & (V extends Record<any, never>\n  ? { variables?: V }\n  : keyof RemoveIndex<V> extends never\n  ? { variables?: V }\n  : { variables: V })\n\nexport type BatchRequestsOptions<V = Variables> = {\n  documents: BatchRequestDocument<V>[]\n  requestHeaders?: Dom.RequestInit['headers']\n  signal?: Dom.RequestInit['signal']\n}\n\nexport type RequestExtendedOptions<V = Variables, T = any> = { url: string } & RequestOptions<V, T>\n\nexport type RawRequestExtendedOptions<V = Variables> = { url: string } & RawRequestOptions<V>\n\nexport type BatchRequestsExtendedOptions<V = Variables> = { url: string } & BatchRequestsOptions<V>\n","'use strict';\n\nmodule.exports = function ReactNativeFile(_ref) {\n  var uri = _ref.uri,\n    name = _ref.name,\n    type = _ref.type;\n  this.uri = uri;\n  this.name = name;\n  this.type = type;\n};\n","'use strict';\n\nvar defaultIsExtractableFile = require('./isExtractableFile');\n\nmodule.exports = function extractFiles(value, path, isExtractableFile) {\n  if (path === void 0) {\n    path = '';\n  }\n\n  if (isExtractableFile === void 0) {\n    isExtractableFile = defaultIsExtractableFile;\n  }\n\n  var clone;\n  var files = new Map();\n\n  function addFile(paths, file) {\n    var storedPaths = files.get(file);\n    if (storedPaths) storedPaths.push.apply(storedPaths, paths);\n    else files.set(file, paths);\n  }\n\n  if (isExtractableFile(value)) {\n    clone = null;\n    addFile([path], value);\n  } else {\n    var prefix = path ? path + '.' : '';\n    if (typeof FileList !== 'undefined' && value instanceof FileList)\n      clone = Array.prototype.map.call(value, function (file, i) {\n        addFile(['' + prefix + i], file);\n        return null;\n      });\n    else if (Array.isArray(value))\n      clone = value.map(function (child, i) {\n        var result = extractFiles(child, '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        return result.clone;\n      });\n    else if (value && value.constructor === Object) {\n      clone = {};\n\n      for (var i in value) {\n        var result = extractFiles(value[i], '' + prefix + i, isExtractableFile);\n        result.files.forEach(addFile);\n        clone[i] = result.clone;\n      }\n    } else clone = value;\n  }\n\n  return {\n    clone: clone,\n    files: files,\n  };\n};\n","'use strict';\n\nexports.ReactNativeFile = require('./ReactNativeFile');\nexports.extractFiles = require('./extractFiles');\nexports.isExtractableFile = require('./isExtractableFile');\n","'use strict';\n\nvar ReactNativeFile = require('./ReactNativeFile');\n\nmodule.exports = function isExtractableFile(value) {\n  return (\n    (typeof File !== 'undefined' && value instanceof File) ||\n    (typeof Blob !== 'undefined' && value instanceof Blob) ||\n    value instanceof ReactNativeFile\n  );\n};\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nmodule.exports = upperFirst;\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","'use strict';\n\nvar utils = exports;\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg !== 'string') {\n    for (var i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n    return res;\n  }\n  if (enc === 'hex') {\n    msg = msg.replace(/[^a-z0-9]+/ig, '');\n    if (msg.length % 2 !== 0)\n      msg = '0' + msg;\n    for (var i = 0; i < msg.length; i += 2)\n      res.push(parseInt(msg[i] + msg[i + 1], 16));\n  } else {\n    for (var i = 0; i < msg.length; i++) {\n      var c = msg.charCodeAt(i);\n      var hi = c >> 8;\n      var lo = c & 0xff;\n      if (hi)\n        res.push(hi, lo);\n      else\n        res.push(lo);\n    }\n  }\n  return res;\n}\nutils.toArray = toArray;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nutils.zero2 = zero2;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nutils.toHex = toHex;\n\nutils.encode = function encode(arr, enc) {\n  if (enc === 'hex')\n    return toHex(arr);\n  else\n    return arr;\n};\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateFieldInitSpec(obj, privateMap, value) {\n  checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classExtractFieldDescriptor from \"./classExtractFieldDescriptor.js\";\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}","import _typeof from \"./typeof.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport inherits from \"./inherits.js\";\nexport default function _wrapRegExp() {\n  _wrapRegExp = function _wrapRegExp(re, groups) {\n    return new BabelRegExp(re, void 0, groups);\n  };\n  var _super = RegExp.prototype,\n    _groups = new WeakMap();\n  function BabelRegExp(re, flags, groups) {\n    var _this = new RegExp(re, flags);\n    return _groups.set(_this, groups || _groups.get(re)), setPrototypeOf(_this, BabelRegExp.prototype);\n  }\n  function buildGroups(result, re) {\n    var g = _groups.get(re);\n    return Object.keys(g).reduce(function (groups, name) {\n      var i = g[name];\n      if (\"number\" == typeof i) groups[name] = result[i];else {\n        for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) {\n          k++;\n        }\n        groups[name] = result[i[k]];\n      }\n      return groups;\n    }, Object.create(null));\n  }\n  return inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) {\n    var result = _super.exec.call(this, str);\n    if (result) {\n      result.groups = buildGroups(result, this);\n      var indices = result.indices;\n      indices && (indices.groups = buildGroups(indices, this));\n    }\n    return result;\n  }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) {\n    if (\"string\" == typeof substitution) {\n      var groups = _groups.get(this);\n      return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) {\n        var group = groups[name];\n        return \"$\" + (Array.isArray(group) ? group.join(\"$\") : group);\n      }));\n    }\n    if (\"function\" == typeof substitution) {\n      var _this = this;\n      return _super[Symbol.replace].call(this, str, function () {\n        var args = arguments;\n        return \"object\" != _typeof(args[args.length - 1]) && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args);\n      });\n    }\n    return _super[Symbol.replace].call(this, str, substitution);\n  }, _wrapRegExp.apply(this, arguments);\n}","/*\n  1) Variables\n  ------------\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/packages/fuel-core/VERSION`\n    `FORC` — comes from `/packages/forc/VERSION`\n\n  3) Pre Build\n  ------------\n    There's a `prebuild` script in:\n     - packages/versions/package.json\n\n    Before build, it will call this file:\n      - packages/versions/scripts/replaceVersions.ts\n\n    Which will replace static versions at:\n      - packages/versions/src/lib/getSupportedVersions.ts\n\n    If no env variables are set, it uses the current versions\n    from the original locations mentioned in the 1st step.\n\n  3)  CI\n  ------------\n    As part of the CI release (1) routine, the changes made\n    to the versions package by the `prebuild` routine will\n    be committed by the same script (2) that handles the\n    docs versioning.\n\n      - (1) <repoRoot>/.github/workflows/release.yaml\n      - (2) <repoRoot>/changeset-version-with-docs.ts\n\n  4) Build\n  ------------\n    By the time we get to the `build` step, everything is in\n    place already and ready to be built and released.\n*/\n\nimport { getSupportedVersions } from './lib/getSupportedVersions';\n\nexport const versions = getSupportedVersions();\n","export function getSupportedVersions() {\n  return {\n    FORC: '0.44.0',\n    FUEL_CORE: '0.20.3',\n    FUELS: '0.51.0',\n  };\n}\n","import BnJs from 'bn.js';\n\nimport { DECIMAL_UNITS, DEFAULT_MIN_PRECISION, DEFAULT_PRECISION } from './configs';\nimport { toFixed } from './decimal';\nimport type { FormatConfig } from './types';\n\ntype CompareResult = -1 | 0 | 1;\nexport type BNInput = number | string | number[] | Uint8Array | Buffer | BnJs;\ninterface BNHelper {\n  caller(v: BNInput, methodName: string): BN | boolean | CompareResult;\n  toHex: (bytesPadding?: number) => string;\n  toBytes: (bytesPadding?: number) => Uint8Array;\n  toJSON: () => string;\n}\ninterface BNInputOverrides {\n  add: (v: BNInput) => BN;\n  pow: (v: BNInput) => BN;\n  sub: (v: BNInput) => BN;\n  div: (v: BNInput) => BN;\n  mul: (v: BNInput) => BN;\n  mod: (v: BNInput) => BN;\n  divRound: (v: BNInput) => BN;\n  lt: (v: BNInput) => boolean;\n  lte: (v: BNInput) => boolean;\n  gt: (v: BNInput) => boolean;\n  gte: (v: BNInput) => boolean;\n  eq: (v: BNInput) => boolean;\n  cmp: (v: BNInput) => CompareResult;\n}\ninterface BNOverrides {\n  sqr: () => BN;\n  neg: () => BN;\n  abs: () => BN;\n  toTwos: (width: number) => BN;\n  fromTwos: (width: number) => BN;\n}\ninterface BNHiddenTypes {\n  mulTo: (num: BN, out: BN) => BN;\n  divmod: (num: BNInput, mode?: string, positive?: boolean) => { mod: BN; div: BN };\n}\ntype BNInputOverridesKeys = keyof BNInputOverrides;\n\nexport class BN extends BnJs implements BNInputOverrides, BNHiddenTypes, BNHelper, BNOverrides {\n  constructor(value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) {\n    if (BN.isBN(value)) {\n      super(value.toArray(), base, endian);\n      return;\n    }\n    // trim '0x' from hex strings as BN doesn't support it - https://github.com/ChainSafe/web3.js/issues/3847\n    if (typeof value === 'string' && value.slice(0, 2) === '0x') {\n      super(value.substring(2), base || 'hex', endian);\n      return;\n    }\n    const defaultValue = value == null ? 0 : value;\n    super(defaultValue, base, endian);\n  }\n\n  // ANCHOR: HELPERS\n  // make sure we always include `0x` in hex strings\n  toString(base?: number | 'hex', length?: number) {\n    const output = super.toString(base, length);\n\n    if (base === 16 || base === 'hex') return `0x${output}`;\n\n    return output;\n  }\n\n  toHex(bytesPadding?: number): string {\n    const bytes = bytesPadding || 0;\n    const bytesLength = bytes * 2;\n\n    if (this.isNeg()) {\n      throw new Error('cannot convert negative value to hex');\n    }\n    if (bytesPadding && this.byteLength() > bytesPadding) {\n      throw new Error(`value ${this} exceeds bytes ${bytesPadding}`);\n    }\n\n    return this.toString(16, bytesLength);\n  }\n\n  toBytes(bytesPadding?: number): Uint8Array {\n    if (this.isNeg()) {\n      throw new Error('cannot convert negative value to Bytes');\n    }\n\n    return Uint8Array.from(this.toArray(undefined, bytesPadding));\n  }\n\n  toJSON(): string {\n    return this.toString(16);\n  }\n\n  valueOf(): string {\n    return this.toString();\n  }\n\n  format(options?: FormatConfig): string {\n    const {\n      units = DECIMAL_UNITS,\n      precision = DEFAULT_PRECISION,\n      minPrecision = DEFAULT_MIN_PRECISION,\n    } = options || {};\n\n    const formattedUnits = this.formatUnits(units);\n    const formattedFixed = toFixed(formattedUnits, { precision, minPrecision });\n\n    // increase precision if formatted is zero, but has more numbers out of precision\n    if (!parseFloat(formattedFixed)) {\n      const [, originalDecimals = '0'] = formattedUnits.split('.');\n      const firstNonZero = originalDecimals.match(/[1-9]/);\n\n      if (firstNonZero && firstNonZero.index && firstNonZero.index + 1 > precision) {\n        const [valueUnits = '0'] = formattedFixed.split('.');\n        return `${valueUnits}.${originalDecimals.slice(0, firstNonZero.index + 1)}`;\n      }\n    }\n\n    return formattedFixed;\n  }\n\n  formatUnits(units: number = DECIMAL_UNITS): string {\n    const valueUnits = this.toString().slice(0, units * -1);\n    const valueDecimals = this.toString().slice(units * -1);\n    const length = valueDecimals.length;\n    const defaultDecimals = Array.from({ length: units - length })\n      .fill('0')\n      .join('');\n    const integerPortion = valueUnits ? `${valueUnits}.` : '0.';\n\n    return `${integerPortion}${defaultDecimals}${valueDecimals}`;\n  }\n  // END ANCHOR: HELPERS\n\n  // ANCHOR: OVERRIDES to accept better inputs\n  add(v: BNInput): BN {\n    return this.caller(v, 'add') as BN;\n  }\n\n  pow(v: BNInput): BN {\n    return this.caller(v, 'pow') as BN;\n  }\n\n  sub(v: BNInput): BN {\n    return this.caller(v, 'sub') as BN;\n  }\n\n  div(v: BNInput): BN {\n    return this.caller(v, 'div') as BN;\n  }\n\n  mul(v: BNInput): BN {\n    return this.caller(v, 'mul') as BN;\n  }\n\n  mod(v: BNInput): BN {\n    return this.caller(v, 'mod') as BN;\n  }\n\n  divRound(v: BNInput): BN {\n    return this.caller(v, 'divRound') as BN;\n  }\n\n  lt(v: BNInput): boolean {\n    return this.caller(v, 'lt') as boolean;\n  }\n\n  lte(v: BNInput): boolean {\n    return this.caller(v, 'lte') as boolean;\n  }\n\n  gt(v: BNInput): boolean {\n    return this.caller(v, 'gt') as boolean;\n  }\n\n  gte(v: BNInput): boolean {\n    return this.caller(v, 'gte') as boolean;\n  }\n\n  eq(v: BNInput): boolean {\n    return this.caller(v, 'eq') as boolean;\n  }\n\n  cmp(v: BNInput): CompareResult {\n    return this.caller(v, 'cmp') as CompareResult;\n  }\n  // END ANCHOR: OVERRIDES to accept better inputs\n\n  // ANCHOR: OVERRIDES to output our BN type\n  sqr(): BN {\n    return new BN(super.sqr().toArray());\n  }\n\n  neg(): BN {\n    return new BN(super.neg().toArray());\n  }\n\n  abs(): BN {\n    return new BN(super.abs().toArray());\n  }\n\n  toTwos(width: number): BN {\n    return new BN(super.toTwos(width).toArray());\n  }\n\n  fromTwos(width: number): BN {\n    return new BN(super.fromTwos(width).toArray());\n  }\n  // END ANCHOR: OVERRIDES to output our BN type\n\n  // ANCHOR: OVERRIDES to avoid losing references\n  caller(v: BNInput, methodName: BNInputOverridesKeys): BN | boolean | CompareResult {\n    const output = super[methodName](new BN(v));\n\n    if (BN.isBN(output)) {\n      return new BN(output.toArray());\n    }\n\n    if (typeof output === 'boolean') {\n      return output as boolean;\n    }\n\n    return output as CompareResult;\n  }\n\n  clone() {\n    return new BN(this.toArray());\n  }\n\n  mulTo(num: BN, out: BN) {\n    const output: BnJs = (new BnJs(this.toArray()) as BN).mulTo(num, out);\n\n    return new BN(output.toArray());\n  }\n\n  egcd(p: BnJs) {\n    const { a, b, gcd } = new BnJs(this.toArray()).egcd(p);\n\n    return {\n      a: new BN(a.toArray()),\n      b: new BN(b.toArray()),\n      gcd: new BN(gcd.toArray()),\n    };\n  }\n\n  divmod(num: BNInput, mode?: string, positive?: boolean): { mod: BN; div: BN } {\n    const { div, mod } = (new BnJs(this.toArray()) as BN).divmod(new BN(num), mode, positive);\n\n    return {\n      div: new BN(div?.toArray()),\n      mod: new BN(mod?.toArray()),\n    };\n  }\n  // END ANCHOR: OVERRIDES to avoid losing references\n}\n\n// functional shortcut to create BN\nexport const bn = (value?: BNInput | null, base?: number | 'hex', endian?: BnJs.Endianness) =>\n  new BN(value, base, endian);\n\nbn.parseUnits = (value: string, units: number = DECIMAL_UNITS): BN => {\n  const valueToParse = value === '.' ? '0.' : value;\n  const [valueUnits = '0', valueDecimals = '0'] = valueToParse.split('.');\n  const length = valueDecimals.length;\n\n  if (length > units) {\n    throw new Error(\"Decimal can't be bigger than the units\");\n  }\n\n  const decimals = Array.from({ length: units }).fill('0');\n  decimals.splice(0, length, valueDecimals);\n  const amount = `${valueUnits.replaceAll(',', '')}${decimals.join('')}`;\n  return bn(amount);\n};\n","export const DEFAULT_PRECISION = 9;\nexport const DEFAULT_MIN_PRECISION = 3;\nexport const DECIMAL_UNITS = 9;\n","import { DEFAULT_PRECISION, DEFAULT_MIN_PRECISION } from './configs';\nimport type { ToFixedConfig } from './types';\n\nexport function toFixed(value?: string | number, options?: ToFixedConfig) {\n  const { precision = DEFAULT_PRECISION, minPrecision = DEFAULT_MIN_PRECISION } = options || {};\n\n  const [valueUnits = '0', valueDecimals = '0'] = String(value || '0.0').split('.');\n  const groupRegex = /(\\d)(?=(\\d{3})+\\b)/g;\n  const units = valueUnits.replace(groupRegex, '$1,');\n  let decimals = valueDecimals.slice(0, precision);\n\n  // strip traling zeros limited by minPrecision\n  if (minPrecision < precision) {\n    const trimmedDecimal = decimals.match(/.*[1-9]{1}/);\n    const lastNonZeroIndex = trimmedDecimal?.[0].length || 0;\n    const keepChars = Math.max(minPrecision, lastNonZeroIndex);\n    decimals = decimals.slice(0, keepChars);\n  }\n\n  const decimalPortion = decimals ? `.${decimals}` : '';\n  return `${units}${decimalPortion}`;\n}\n","import type { BNInput } from './bn';\nimport { bn } from './bn';\nimport type { FormatConfig } from './types';\n\n/**\n * Functional shortcuts\n */\n\n// Shortcut to bn(value).toNumber\nexport function toNumber(value: BNInput): number {\n  return bn(value).toNumber();\n}\n\n// Shortcut to bn(value).toHex\nexport function toHex(value: BNInput, bytesPadding?: number): string {\n  return bn(value).toHex(bytesPadding);\n}\n\n// Shortcut to bn(value).toBytes\nexport function toBytes(value: BNInput, bytesPadding?: number): Uint8Array {\n  return bn(value).toBytes(bytesPadding);\n}\n\n// Shortcut to bn.(value).formatUnits\nexport function formatUnits(value: BNInput, units?: number): string {\n  return bn(value).formatUnits(units);\n}\n\n// Shortcut to bn.(value).format\nexport function format(value: BNInput, options?: FormatConfig): string {\n  return bn(value).format(options);\n}\n","import type { BN } from './bn';\nimport { bn } from './bn';\nimport type { BigNumberish } from './types';\n\nexport function max(...numbers: Array<BigNumberish>): BN {\n  return numbers.reduce<BN>((prev, cur) => (bn(cur).gt(prev) ? bn(cur) : prev), bn(0));\n}\n\nexport function multiply(...numbers: Array<BigNumberish>): BN {\n  return bn(Math.ceil(numbers.reduce<BN>((a, b) => bn(a).mul(b), bn(1)).toNumber()));\n}\n","export const version = \"strings/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n\nexport enum UnicodeNormalizationForm {\n    current  = \"\",\n    NFC      = \"NFC\",\n    NFD      = \"NFD\",\n    NFKC     = \"NFKC\",\n    NFKD     = \"NFKD\"\n};\n\nexport enum Utf8ErrorReason {\n    // A continuation byte was present where there was nothing to continue\n    // - offset = the index the codepoint began in\n    UNEXPECTED_CONTINUE   = \"unexpected continuation byte\",\n\n    // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n    // - offset = the index the codepoint began in\n    BAD_PREFIX            = \"bad codepoint prefix\",\n\n    // The string is too short to process the expected codepoint\n    // - offset = the index the codepoint began in\n    OVERRUN               = \"string overrun\",\n\n    // A missing continuation byte was expected but not found\n    // - offset = the index the continuation byte was expected at\n    MISSING_CONTINUE      = \"missing continuation byte\",\n\n    // The computed code point is outside the range for UTF-8\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; outside the UTF-8 range\n    OUT_OF_RANGE          = \"out of UTF-8 range\",\n\n    // UTF-8 strings may not contain UTF-16 surrogate pairs\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n    UTF16_SURROGATE       = \"UTF-16 surrogate\",\n\n    // The string is an overlong representation\n    // - offset       = start of this codepoint\n    // - badCodepoint = the computed codepoint; already bounds checked\n    OVERLONG              = \"overlong representation\",\n};\n\n\nexport type Utf8ErrorFunc = (reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number) => number;\n\nfunction errorFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n    return logger.throwArgumentError(`invalid codepoint at offset ${ offset }; ${ reason }`, \"bytes\", bytes);\n}\n\nfunction ignoreFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n\n    // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n    if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        let i = 0;\n        for (let o = offset + 1; o < bytes.length; o++) {\n            if (bytes[o] >> 6 !== 0x02) { break; }\n            i++;\n        }\n        return i;\n    }\n\n    // This byte runs us past the end of the string, so just jump to the end\n    // (but the first byte was read already read and therefore skipped)\n    if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n    }\n\n    // Nothing to skip\n    return 0;\n}\n\nfunction replaceFunc(reason: Utf8ErrorReason, offset: number, bytes: ArrayLike<number>, output: Array<number>, badCodepoint?: number): number {\n\n    // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n    if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n    }\n\n    // Put the replacement character into the output\n    output.push(0xfffd);\n\n    // Otherwise, process as if ignoring errors\n    return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n}\n\n// Common error handing strategies\nexport const Utf8ErrorFuncs: { [ name: string ]: Utf8ErrorFunc } = Object.freeze({\n    error: errorFunc,\n    ignore: ignoreFunc,\n    replace: replaceFunc\n});\n\n// http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\nfunction getUtf8CodePoints(bytes: BytesLike, onError?: Utf8ErrorFunc): Array<number> {\n    if (onError == null) { onError = Utf8ErrorFuncs.error; }\n\n    bytes = arrayify(bytes);\n\n    const result: Array<number> = [];\n    let i = 0;\n\n    // Invalid bytes are ignored\n    while(i < bytes.length) {\n\n        const c = bytes[i++];\n\n        // 0xxx xxxx\n        if (c >> 7 === 0) {\n            result.push(c);\n            continue;\n        }\n\n        // Multibyte; how many bytes left for this character?\n        let extraLength = null;\n        let overlongMask = null;\n\n        // 110x xxxx 10xx xxxx\n        if ((c & 0xe0) === 0xc0) {\n            extraLength = 1;\n            overlongMask = 0x7f;\n\n        // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n            extraLength = 2;\n            overlongMask = 0x7ff;\n\n        // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n            extraLength = 3;\n            overlongMask = 0xffff;\n\n        } else {\n            if ((c & 0xc0) === 0x80) {\n                i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n            } else {\n                i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n            }\n            continue;\n        }\n\n        // Do we have enough bytes in our data?\n        if (i - 1 + extraLength >= bytes.length) {\n            i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n            continue;\n        }\n\n        // Remove the length prefix from the char\n        let res = c & ((1 << (8 - extraLength - 1)) - 1);\n\n        for (let j = 0; j < extraLength; j++) {\n            let nextChar = bytes[i];\n\n            // Invalid continuation byte\n            if ((nextChar & 0xc0) != 0x80) {\n                i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n                res = null;\n                break;\n            };\n\n            res = (res << 6) | (nextChar & 0x3f);\n            i++;\n        }\n\n        // See above loop for invalid continuation byte\n        if (res === null) { continue; }\n\n        // Maximum code point\n        if (res > 0x10ffff) {\n            i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Reserved for UTF-16 surrogate halves\n        if (res >= 0xd800 && res <= 0xdfff) {\n            i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        // Check for overlong sequences (more bytes than needed)\n        if (res <= overlongMask) {\n            i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n            continue;\n        }\n\n        result.push(res);\n    }\n\n    return result;\n}\n\n// http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\nexport function toUtf8Bytes(str: string, form: UnicodeNormalizationForm = UnicodeNormalizationForm.current): Uint8Array {\n\n    if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n    }\n\n    let result = [];\n    for (let i = 0; i < str.length; i++) {\n        const c = str.charCodeAt(i);\n\n        if (c < 0x80) {\n            result.push(c);\n\n        } else if (c < 0x800) {\n            result.push((c >> 6) | 0xc0);\n            result.push((c & 0x3f) | 0x80);\n\n        } else if ((c & 0xfc00) == 0xd800) {\n            i++;\n            const c2 = str.charCodeAt(i);\n\n            if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n                throw new Error(\"invalid utf-8 string\");\n            }\n\n            // Surrogate Pair\n            const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n            result.push((pair >> 18) | 0xf0);\n            result.push(((pair >> 12) & 0x3f) | 0x80);\n            result.push(((pair >> 6) & 0x3f) | 0x80);\n            result.push((pair & 0x3f) | 0x80);\n\n        } else {\n            result.push((c >> 12) | 0xe0);\n            result.push(((c >> 6) & 0x3f) | 0x80);\n            result.push((c & 0x3f) | 0x80);\n        }\n    }\n\n    return arrayify(result);\n};\n\nfunction escapeChar(value: number) {\n    const hex = (\"0000\" + value.toString(16));\n    return \"\\\\u\" + hex.substring(hex.length - 4);\n}\n\nexport function _toEscapedUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string {\n    return '\"' + getUtf8CodePoints(bytes, onError).map((codePoint) => {\n        if (codePoint < 256) {\n            switch (codePoint) {\n                case 8:  return \"\\\\b\";\n                case 9:  return \"\\\\t\";\n                case 10: return \"\\\\n\"\n                case 13: return \"\\\\r\";\n                case 34: return \"\\\\\\\"\";\n                case 92: return \"\\\\\\\\\";\n            }\n\n            if (codePoint >= 32 && codePoint < 127) {\n                return String.fromCharCode(codePoint);\n            }\n        }\n\n        if (codePoint <= 0xffff) {\n            return escapeChar(codePoint);\n        }\n\n        codePoint -= 0x10000;\n        return escapeChar(((codePoint >> 10) & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n    }).join(\"\") + '\"';\n}\n\nexport function _toUtf8String(codePoints: Array<number>): string {\n    return codePoints.map((codePoint) => {\n        if (codePoint <= 0xffff) {\n            return String.fromCharCode(codePoint);\n        }\n        codePoint -= 0x10000;\n        return String.fromCharCode(\n            (((codePoint >> 10) & 0x3ff) + 0xd800),\n            ((codePoint & 0x3ff) + 0xdc00)\n        );\n    }).join(\"\");\n}\n\nexport function toUtf8String(bytes: BytesLike, onError?: Utf8ErrorFunc): string {\n    return _toUtf8String(getUtf8CodePoints(bytes, onError));\n}\n\nexport function toUtf8CodePoints(str: string, form: UnicodeNormalizationForm = UnicodeNormalizationForm.current): Array<number> {\n    return getUtf8CodePoints(toUtf8Bytes(str, form));\n}\n","export enum SupportedAlgorithm { sha256 = \"sha256\", sha512 = \"sha512\" };\n\n","export const version = \"sha2/5.7.0\";\n","\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n","export function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nexport function bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nexport function bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nexport function hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nexport function exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nexport function output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nconst assert = {\n  number,\n  bool,\n  bytes,\n  hash,\n  exists,\n  output,\n};\n\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj: any) =>\n  Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\n\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","import assert from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    assert.exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\nexport const sha224 = wrapConstructor(() => new SHA224());\n","import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","import assert from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assert.hash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assert.number(c);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, (i) => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n","import assert from './_assert.js';\nimport { sha256 } from './sha256.js';\nimport { pbkdf2 } from './pbkdf2.js';\nimport { asyncLoop, checkOpts, Input, u32 } from './utils.js';\n\n// RFC 7914 Scrypt KDF\n\n// Left rotate for uint32\nconst rotl = (a: number, b: number) => (a << b) | (a >>> (32 - b));\n\n// The main Scrypt loop: uses Salsa extensively.\n// Six versions of the function were tried, this is the fastest one.\n// prettier-ignore\nfunction XorAndSalsa(\n  prev: Uint32Array,\n  pi: number,\n  input: Uint32Array,\n  ii: number,\n  out: Uint32Array,\n  oi: number\n) {\n  // Based on https://cr.yp.to/salsa20.html\n  // Xor blocks\n  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];\n  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];\n  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];\n  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];\n  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];\n  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];\n  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];\n  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];\n  // Save state to temporary variables (salsa)\n  let x00 = y00, x01 = y01, x02 = y02, x03 = y03,\n      x04 = y04, x05 = y05, x06 = y06, x07 = y07,\n      x08 = y08, x09 = y09, x10 = y10, x11 = y11,\n      x12 = y12, x13 = y13, x14 = y14, x15 = y15;\n  // Main loop (salsa)\n  for (let i = 0; i < 8; i += 2) {\n    x04 ^= rotl(x00 + x12 | 0,  7); x08 ^= rotl(x04 + x00 | 0,  9);\n    x12 ^= rotl(x08 + x04 | 0, 13); x00 ^= rotl(x12 + x08 | 0, 18);\n    x09 ^= rotl(x05 + x01 | 0,  7); x13 ^= rotl(x09 + x05 | 0,  9);\n    x01 ^= rotl(x13 + x09 | 0, 13); x05 ^= rotl(x01 + x13 | 0, 18);\n    x14 ^= rotl(x10 + x06 | 0,  7); x02 ^= rotl(x14 + x10 | 0,  9);\n    x06 ^= rotl(x02 + x14 | 0, 13); x10 ^= rotl(x06 + x02 | 0, 18);\n    x03 ^= rotl(x15 + x11 | 0,  7); x07 ^= rotl(x03 + x15 | 0,  9);\n    x11 ^= rotl(x07 + x03 | 0, 13); x15 ^= rotl(x11 + x07 | 0, 18);\n    x01 ^= rotl(x00 + x03 | 0,  7); x02 ^= rotl(x01 + x00 | 0,  9);\n    x03 ^= rotl(x02 + x01 | 0, 13); x00 ^= rotl(x03 + x02 | 0, 18);\n    x06 ^= rotl(x05 + x04 | 0,  7); x07 ^= rotl(x06 + x05 | 0,  9);\n    x04 ^= rotl(x07 + x06 | 0, 13); x05 ^= rotl(x04 + x07 | 0, 18);\n    x11 ^= rotl(x10 + x09 | 0,  7); x08 ^= rotl(x11 + x10 | 0,  9);\n    x09 ^= rotl(x08 + x11 | 0, 13); x10 ^= rotl(x09 + x08 | 0, 18);\n    x12 ^= rotl(x15 + x14 | 0,  7); x13 ^= rotl(x12 + x15 | 0,  9);\n    x14 ^= rotl(x13 + x12 | 0, 13); x15 ^= rotl(x14 + x13 | 0, 18);\n  }\n  // Write output (salsa)\n  out[oi++] = (y00 + x00) | 0; out[oi++] = (y01 + x01) | 0;\n  out[oi++] = (y02 + x02) | 0; out[oi++] = (y03 + x03) | 0;\n  out[oi++] = (y04 + x04) | 0; out[oi++] = (y05 + x05) | 0;\n  out[oi++] = (y06 + x06) | 0; out[oi++] = (y07 + x07) | 0;\n  out[oi++] = (y08 + x08) | 0; out[oi++] = (y09 + x09) | 0;\n  out[oi++] = (y10 + x10) | 0; out[oi++] = (y11 + x11) | 0;\n  out[oi++] = (y12 + x12) | 0; out[oi++] = (y13 + x13) | 0;\n  out[oi++] = (y14 + x14) | 0; out[oi++] = (y15 + x15) | 0;\n}\n\nfunction BlockMix(input: Uint32Array, ii: number, out: Uint32Array, oi: number, r: number) {\n  // The block B is r 128-byte chunks (which is equivalent of 2r 64-byte chunks)\n  let head = oi + 0;\n  let tail = oi + 16 * r;\n  for (let i = 0; i < 16; i++) out[tail + i] = input[ii + (2 * r - 1) * 16 + i]; // X ← B[2r−1]\n  for (let i = 0; i < r; i++, head += 16, ii += 16) {\n    // We write odd & even Yi at same time. Even: 0bXXXXX0 Odd:  0bXXXXX1\n    XorAndSalsa(out, tail, input, ii, out, head); // head[i] = Salsa(blockIn[2*i] ^ tail[i-1])\n    if (i > 0) tail += 16; // First iteration overwrites tmp value in tail\n    XorAndSalsa(out, head, input, (ii += 16), out, tail); // tail[i] = Salsa(blockIn[2*i+1] ^ head[i])\n  }\n}\n\nexport type ScryptOpts = {\n  N: number; // cost factor\n  r: number; // block size\n  p: number; // parallelization\n  dkLen?: number; // key length\n  asyncTick?: number; // block execution max time\n  maxmem?: number;\n  onProgress?: (progress: number) => void;\n};\n\n// Common prologue and epilogue for sync/async functions\nfunction scryptInit(password: Input, salt: Input, _opts?: ScryptOpts) {\n  // Maxmem - 1GB+1KB by default\n  const opts = checkOpts(\n    {\n      dkLen: 32,\n      asyncTick: 10,\n      maxmem: 1024 ** 3 + 1024,\n    },\n    _opts\n  );\n  const { N, r, p, dkLen, asyncTick, maxmem, onProgress } = opts;\n  assert.number(N);\n  assert.number(r);\n  assert.number(p);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  assert.number(maxmem);\n  if (onProgress !== undefined && typeof onProgress !== 'function')\n    throw new Error('progressCb should be function');\n  const blockSize = 128 * r;\n  const blockSize32 = blockSize / 4;\n  if (N <= 1 || (N & (N - 1)) !== 0 || N >= 2 ** (blockSize / 8) || N > 2 ** 32) {\n    // NOTE: we limit N to be less than 2**32 because of 32 bit variant of Integrify function\n    // There is no JS engines that allows alocate more than 4GB per single Uint8Array for now, but can change in future.\n    throw new Error(\n      'Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32'\n    );\n  }\n  if (p < 0 || p > ((2 ** 32 - 1) * 32) / blockSize) {\n    throw new Error(\n      'Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)'\n    );\n  }\n  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {\n    throw new Error(\n      'Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32'\n    );\n  }\n  const memUsed = blockSize * (N + p);\n  if (memUsed > maxmem) {\n    throw new Error(\n      `Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`\n    );\n  }\n  // [B0...Bp−1] ← PBKDF2HMAC-SHA256(Passphrase, Salt, 1, blockSize*ParallelizationFactor)\n  // Since it has only one iteration there is no reason to use async variant\n  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });\n  const B32 = u32(B);\n  // Re-used between parallel iterations. Array(iterations) of B\n  const V = u32(new Uint8Array(blockSize * N));\n  const tmp = u32(new Uint8Array(blockSize));\n  let blockMixCb = () => {};\n  if (onProgress) {\n    const totalBlockMix = 2 * N * p;\n    // Invoke callback if progress changes from 10.01 to 10.02\n    // Allows to draw smooth progress bar on up to 8K screen\n    const callbackPer = Math.max(Math.floor(totalBlockMix / 10000), 1);\n    let blockMixCnt = 0;\n    blockMixCb = () => {\n      blockMixCnt++;\n      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))\n        onProgress(blockMixCnt / totalBlockMix);\n    };\n  }\n  return { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };\n}\n\nfunction scryptOutput(\n  password: Input,\n  dkLen: number,\n  B: Uint8Array,\n  V: Uint32Array,\n  tmp: Uint32Array\n) {\n  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });\n  B.fill(0);\n  V.fill(0);\n  tmp.fill(0);\n  return res;\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n * @param password - pass\n * @param salt - salt\n * @param opts - parameters\n * - `N` is cpu/mem work factor (power of 2 e.g. 2**18)\n * - `r` is block size (8 is common), fine-tunes sequential memory read size and performance\n * - `p` is parallelization factor (1 is common)\n * - `dkLen` is output key length in bytes e.g. 32.\n * - `asyncTick` - (default: 10) max time in ms for which async function can block execution\n * - `maxmem` - (default: `1024 ** 3 + 1024` aka 1GB+1KB). A limit that the app could use for scrypt\n * - `onProgress` - callback function that would be executed for progress report\n * @returns Derived key\n */\nexport function scrypt(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    for (let i = 0, pos = 0; i < N - 1; i++) {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    }\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    for (let i = 0; i < N; i++) {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    }\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n\n/**\n * Scrypt KDF from RFC 7914.\n */\nexport async function scryptAsync(password: Input, salt: Input, opts: ScryptOpts) {\n  const { N, r, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(\n    password,\n    salt,\n    opts\n  );\n  for (let pi = 0; pi < p; pi++) {\n    const Pi = blockSize32 * pi;\n    for (let i = 0; i < blockSize32; i++) V[i] = B32[Pi + i]; // V[0] = B[i]\n    let pos = 0;\n    await asyncLoop(N - 1, asyncTick, (i) => {\n      BlockMix(V, pos, V, (pos += blockSize32), r); // V[i] = BlockMix(V[i-1]);\n      blockMixCb();\n    });\n    BlockMix(V, (N - 1) * blockSize32, B32, Pi, r); // Process last element\n    blockMixCb();\n    await asyncLoop(N, asyncTick, (i) => {\n      // First u32 of the last 64-byte block (u32 is LE)\n      const j = B32[Pi + blockSize32 - 16] % N; // j = Integrify(X) % iterations\n      for (let k = 0; k < blockSize32; k++) tmp[k] = B32[Pi + k] ^ V[j * blockSize32 + k]; // tmp = B ^ V[j]\n      BlockMix(tmp, 0, B32, Pi, r); // B = BlockMix(B ^ V[j])\n      blockMixCb();\n    });\n  }\n  return scryptOutput(password, dkLen, B, V, tmp);\n}\n","import assert from \"@noble/hashes/_assert\";\nimport { hexToBytes as _hexToBytes } from \"@noble/hashes/utils\";\nconst assertBool = assert.bool;\nconst assertBytes = assert.bytes;\nexport { assertBool, assertBytes };\nexport { bytesToHex, bytesToHex as toHex, concatBytes, createView, utf8ToBytes } from \"@noble/hashes/utils\";\n// buf.toString('utf8') -> bytesToUtf8(buf)\nexport function bytesToUtf8(data) {\n    if (!(data instanceof Uint8Array)) {\n        throw new TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof data}`);\n    }\n    return new TextDecoder().decode(data);\n}\nexport function hexToBytes(data) {\n    const sliced = data.startsWith(\"0x\") ? data.substring(2) : data;\n    return _hexToBytes(sliced);\n}\n// buf.equals(buf2) -> equalsBytes(buf, buf2)\nexport function equalsBytes(a, b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// Internal utils\nexport function wrapHash(hash) {\n    return (msg) => {\n        assert.bytes(msg);\n        return hash(msg);\n    };\n}\n// TODO(v3): switch away from node crypto, remove this unnecessary variable.\nexport const crypto = (() => {\n    const webCrypto = typeof globalThis === \"object\" && \"crypto\" in globalThis ? globalThis.crypto : undefined;\n    const nodeRequire = typeof module !== \"undefined\" &&\n        typeof module.require === \"function\" &&\n        module.require.bind(module);\n    return {\n        node: nodeRequire && !webCrypto ? nodeRequire(\"crypto\") : undefined,\n        web: webCrypto\n    };\n})();\n","import { scrypt as _sync, scryptAsync as _async } from \"@noble/hashes/scrypt\";\nimport { assertBytes } from \"./utils.js\";\nexport async function scrypt(password, salt, n, p, r, dkLen, onProgress) {\n    assertBytes(password);\n    assertBytes(salt);\n    return _async(password, salt, { N: n, r, p, dkLen, onProgress });\n}\nexport function scryptSync(password, salt, n, p, r, dkLen, onProgress) {\n    assertBytes(password);\n    assertBytes(salt);\n    return _sync(password, salt, { N: n, r, p, dkLen, onProgress });\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n: bigint, le = false) {\n  if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n  return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\n\nexport function split(lst: bigint[], le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const { h, l } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\n\nexport const toBig = (h: number, l: number) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h: number, l: number, s: number) => h >>> s;\nconst shrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h: number, l: number, s: number) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h: number, l: number, s: number) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h: number, l: number, s: number) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h: number, l: number, s: number) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h: number, l: number) => l;\nconst rotr32L = (h: number, l: number) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h: number, l: number, s: number) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h: number, l: number, s: number) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h: number, l: number, s: number) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h: number, l: number, s: number) => (h << (s - 32)) | (l >>> (64 - s));\n\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah: number, Al: number, Bh: number, Bl: number) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al: number, Bl: number, Cl: number) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low: number, Ah: number, Bh: number, Ch: number) =>\n  (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al: number, Bl: number, Cl: number, Dl: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number) =>\n  (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al: number, Bl: number, Cl: number, Dl: number, El: number) =>\n  (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low: number, Ah: number, Bh: number, Ch: number, Dh: number, Eh: number) =>\n  (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n\n// prettier-ignore\nconst u64 = {\n  fromBig, split, toBig,\n  shrSH, shrSL,\n  rotrSH, rotrSL, rotrBH, rotrBL,\n  rotr32H, rotr32L,\n  rotlSH, rotlSL, rotlBH, rotlBL,\n  add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport {\n  Hash,\n  u32,\n  Input,\n  toBytes,\n  wrapConstructor,\n  wrapXOFConstructorWithOpts,\n  HashXOF,\n} from './utils.js';\n\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA]: [number[], number[], bigint[]] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n  // Pi\n  [x, y] = [y, (2 * x + 3 * y) % 5];\n  SHA3_PI.push(2 * (5 * y + x));\n  // Rotational\n  SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n  // Iota\n  let t = _0n;\n  for (let j = 0; j < 7; j++) {\n    R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n    if (R & _2n) t ^= _1n << ((_1n << BigInt(j)) - _1n);\n  }\n  _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h: number, l: number, s: number) =>\n  s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s: Uint32Array, rounds: number = 24) {\n  const B = new Uint32Array(5 * 2);\n  // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n  for (let round = 24 - rounds; round < 24; round++) {\n    // Theta θ\n    for (let x = 0; x < 10; x++) B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n    for (let x = 0; x < 10; x += 2) {\n      const idx1 = (x + 8) % 10;\n      const idx0 = (x + 2) % 10;\n      const B0 = B[idx0];\n      const B1 = B[idx0 + 1];\n      const Th = rotlH(B0, B1, 1) ^ B[idx1];\n      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n      for (let y = 0; y < 50; y += 10) {\n        s[x + y] ^= Th;\n        s[x + y + 1] ^= Tl;\n      }\n    }\n    // Rho (ρ) and Pi (π)\n    let curH = s[2];\n    let curL = s[3];\n    for (let t = 0; t < 24; t++) {\n      const shift = SHA3_ROTL[t];\n      const Th = rotlH(curH, curL, shift);\n      const Tl = rotlL(curH, curL, shift);\n      const PI = SHA3_PI[t];\n      curH = s[PI];\n      curL = s[PI + 1];\n      s[PI] = Th;\n      s[PI + 1] = Tl;\n    }\n    // Chi (χ)\n    for (let y = 0; y < 50; y += 10) {\n      for (let x = 0; x < 10; x++) B[x] = s[y + x];\n      for (let x = 0; x < 10; x++) s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n    }\n    // Iota (ι)\n    s[0] ^= SHA3_IOTA_H[round];\n    s[1] ^= SHA3_IOTA_L[round];\n  }\n  B.fill(0);\n}\n\nexport class Keccak extends Hash<Keccak> implements HashXOF<Keccak> {\n  protected state: Uint8Array;\n  protected pos = 0;\n  protected posOut = 0;\n  protected finished = false;\n  protected state32: Uint32Array;\n  protected destroyed = false;\n  // NOTE: we accept arguments in bytes instead of bits here.\n  constructor(\n    public blockLen: number,\n    public suffix: number,\n    public outputLen: number,\n    protected enableXOF = false,\n    protected rounds: number = 24\n  ) {\n    super();\n    // Can be passed from user as dkLen\n    assert.number(outputLen);\n    // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n    if (0 >= this.blockLen || this.blockLen >= 200)\n      throw new Error('Sha3 supports only keccak-f1600 function');\n    this.state = new Uint8Array(200);\n    this.state32 = u32(this.state);\n  }\n  protected keccak() {\n    keccakP(this.state32, this.rounds);\n    this.posOut = 0;\n    this.pos = 0;\n  }\n  update(data: Input) {\n    assert.exists(this);\n    const { blockLen, state } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      for (let i = 0; i < take; i++) state[this.pos++] ^= data[pos++];\n      if (this.pos === blockLen) this.keccak();\n    }\n    return this;\n  }\n  protected finish() {\n    if (this.finished) return;\n    this.finished = true;\n    const { state, suffix, pos, blockLen } = this;\n    // Do the padding\n    state[pos] ^= suffix;\n    if ((suffix & 0x80) !== 0 && pos === blockLen - 1) this.keccak();\n    state[blockLen - 1] ^= 0x80;\n    this.keccak();\n  }\n  protected writeInto(out: Uint8Array): Uint8Array {\n    assert.exists(this, false);\n    assert.bytes(out);\n    this.finish();\n    const bufferOut = this.state;\n    const { blockLen } = this;\n    for (let pos = 0, len = out.length; pos < len; ) {\n      if (this.posOut >= blockLen) this.keccak();\n      const take = Math.min(blockLen - this.posOut, len - pos);\n      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n      this.posOut += take;\n      pos += take;\n    }\n    return out;\n  }\n  xofInto(out: Uint8Array): Uint8Array {\n    // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n    if (!this.enableXOF) throw new Error('XOF is not possible for this instance');\n    return this.writeInto(out);\n  }\n  xof(bytes: number): Uint8Array {\n    assert.number(bytes);\n    return this.xofInto(new Uint8Array(bytes));\n  }\n  digestInto(out: Uint8Array) {\n    assert.output(out, this);\n    if (this.finished) throw new Error('digest() was already called');\n    this.writeInto(out);\n    this.destroy();\n    return out;\n  }\n  digest() {\n    return this.digestInto(new Uint8Array(this.outputLen));\n  }\n  destroy() {\n    this.destroyed = true;\n    this.state.fill(0);\n  }\n  _cloneInto(to?: Keccak): Keccak {\n    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n    to ||= new Keccak(blockLen, suffix, outputLen, enableXOF, rounds);\n    to.state32.set(this.state32);\n    to.pos = this.pos;\n    to.posOut = this.posOut;\n    to.finished = this.finished;\n    to.rounds = rounds;\n    // Suffix can change in cSHAKE\n    to.suffix = suffix;\n    to.outputLen = outputLen;\n    to.enableXOF = enableXOF;\n    to.destroyed = this.destroyed;\n    return to;\n  }\n}\n\nconst gen = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\n\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\n\nexport type ShakeOpts = { dkLen?: number };\n\nconst genShake = (suffix: number, blockLen: number, outputLen: number) =>\n  wrapXOFConstructorWithOpts<HashXOF<Keccak>, ShakeOpts>(\n    (opts: ShakeOpts = {}) =>\n      new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true)\n  );\n\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import { keccak_224, keccak_256, keccak_384, keccak_512 } from \"@noble/hashes/sha3\";\nimport { wrapHash } from \"./utils.js\";\nexport const keccak224 = wrapHash(keccak_224);\nexport const keccak256 = (() => {\n    const k = wrapHash(keccak_256);\n    k.create = keccak_256.create;\n    return k;\n})();\nexport const keccak384 = wrapHash(keccak_384);\nexport const keccak512 = wrapHash(keccak_512);\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac, SupportedAlgorithm } from \"@ethersproject/sha2\";\n\nexport function pbkdf2(password: BytesLike, salt: BytesLike, iterations: number, keylen: number, hashAlgorithm: string): string {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen)\n    const block1 = new Uint8Array(salt.length + 4)\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n\n    let r: number;\n    let T: Uint8Array;\n\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, block1));\n\n        if (!hLen) {\n            hLen = U.length\n            T = new Uint8Array(hLen)\n            l = Math.ceil(keylen / hLen)\n            r = keylen - (l - 1) * hLen\n        }\n\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n\n\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++) T[k] ^= U[k]\n        }\n\n\n        const destPos = (i - 1) * hLen\n        const len = (i === l ? r : hLen)\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n\n    return hexlify(DK)\n}\n\n","import { scryptSync as ethCryScrypt } from 'ethereum-cryptography/scrypt';\n\nimport type { IScryptParams } from '../types';\n\nexport const scrypt = (params: IScryptParams): Uint8Array => {\n  const { password, salt, n, p, r, dklen } = params;\n\n  const derivedKey = ethCryScrypt(password, salt, n, r, p, dklen);\n\n  return derivedKey;\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const bufferFromString: CryptoApi['bufferFromString'] = (\n  string: string,\n  encoding: Encoding = 'base64'\n): Uint8Array => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextEncoder().encode(string);\n    }\n\n    case 'base64': {\n      const binaryString = atob(string);\n      const len = binaryString.length;\n      const bytes = new Uint8Array(len).map((_, i) => binaryString.charCodeAt(i));\n\n      return bytes;\n    }\n\n    case 'hex':\n    default: {\n      const bufferLength = string.length / 2;\n\n      const buffer = new Uint8Array(bufferLength).map((_, i) => {\n        const startIndex = i * 2;\n        const byteValue = parseInt(string.substring(startIndex, startIndex + 2), 16);\n        return byteValue;\n      });\n\n      return buffer;\n    }\n  }\n};\n","const { crypto, btoa } = globalThis;\n\nif (!crypto) {\n  throw new Error(`Could not found 'crypto' in current browser environment`);\n}\n\nif (!btoa) {\n  throw new Error(`Could not found 'btoa' in current browser environment`);\n}\n\nexport { crypto, btoa };\n","import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const randomBytes: CryptoApi['randomBytes'] = (length: number): Uint8Array => {\n  const randomValues = crypto.getRandomValues(new Uint8Array(length));\n  return randomValues;\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const stringFromBuffer: CryptoApi['stringFromBuffer'] = (\n  buffer: Uint8Array,\n  encoding: Encoding = 'base64'\n): string => {\n  switch (encoding) {\n    case 'utf-8': {\n      return new TextDecoder().decode(buffer);\n    }\n    case 'base64': {\n      let binary = '';\n      const len = buffer.byteLength;\n      for (let i = 0; i < len; i += 1) {\n        binary += String.fromCharCode(buffer[i]);\n      }\n\n      return btoa(binary);\n    }\n\n    case 'hex':\n    default: {\n      let hexString = '';\n      for (let i = 0; i < buffer.length; i += 1) {\n        const hex = buffer[i].toString(16);\n        hexString += hex.length === 1 ? `0${hex}` : hex;\n      }\n      return hexString;\n    }\n  }\n};\n","import { arrayify } from '@ethersproject/bytes';\nimport { pbkdf2 } from '@ethersproject/pbkdf2';\n\nimport type { CryptoApi, Keystore } from '../types';\n\nimport { bufferFromString } from './bufferFromString';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst ALGORITHM = 'AES-CTR';\n\n/**\n * Generate a pbkdf2 key from a password and random salt\n */\nexport const keyFromPassword: CryptoApi['keyFromPassword'] = (\n  password: string,\n  saltBuffer: Uint8Array\n): Uint8Array => {\n  const passBuffer = bufferFromString(String(password).normalize('NFKC'), 'utf-8');\n  const key = pbkdf2(passBuffer, saltBuffer, 100000, 32, 'sha256');\n\n  return arrayify(key);\n};\n\n/**\n * Encrypts a data object that can be any serializable value using\n * a provided password.\n *\n * @returns Promise<Keystore> object\n */\nexport const encrypt: CryptoApi['encrypt'] = async <T>(\n  password: string,\n  data: T\n): Promise<Keystore> => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataString = JSON.stringify(data);\n  const dataBuffer = bufferFromString(dataString, 'utf-8');\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['encrypt']);\n  const encBuffer = await crypto.subtle.encrypt(alg, key, dataBuffer);\n\n  return {\n    data: stringFromBuffer(encBuffer),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt),\n  };\n};\n\n/**\n * Given a password and a keystore object, decrypts the text and returns\n * the resulting value\n */\nexport const decrypt: CryptoApi['decrypt'] = async <T>(\n  password: string,\n  keystore: Keystore\n): Promise<T> => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n\n  const alg = {\n    name: ALGORITHM,\n    counter: iv,\n    length: 64,\n  };\n  const key = await crypto.subtle.importKey('raw', secret, alg, false, ['decrypt']);\n\n  const ptBuffer = await crypto.subtle.decrypt(alg, key, encryptedText);\n  const decryptedData = new TextDecoder().decode(ptBuffer);\n\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new Error('Invalid credentials');\n  }\n};\n","import type { CryptoApi } from '../types';\n\nimport { crypto } from './crypto';\n\nexport const encryptJsonWalletData: CryptoApi['encryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16));\n  const ivBuffer = iv;\n  const dataBuffer = data;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const encrypted = (await subtle.encrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(encrypted);\n};\n\nexport const decryptJsonWalletData: CryptoApi['decryptJsonWalletData'] = async (\n  data: Uint8Array,\n  key: Uint8Array,\n  iv: Uint8Array\n): Promise<Uint8Array> => {\n  const subtle = crypto.subtle;\n  const keyBuffer = new Uint8Array(key.subarray(0, 16)).buffer;\n  const ivBuffer = new Uint8Array(iv).buffer;\n  const dataBuffer = new Uint8Array(data).buffer;\n\n  const cryptoKey = await subtle.importKey(\n    'raw',\n    keyBuffer,\n    { name: 'AES-CTR', length: 128 },\n    false,\n    ['encrypt', 'decrypt']\n  );\n\n  const decrypted = (await subtle.decrypt(\n    { name: 'AES-CTR', counter: ivBuffer, length: 128 },\n    cryptoKey,\n    dataBuffer\n  )) as ArrayBuffer;\n\n  return new Uint8Array(decrypted);\n};\n","import { scrypt, keccak256 } from '../shared';\nimport type { CryptoApi } from '../types';\n\nimport { decrypt, encrypt, keyFromPassword } from './aes-ctr';\nimport { bufferFromString } from './bufferFromString';\nimport { decryptJsonWalletData, encryptJsonWalletData } from './encryptJsonWalletData';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst api: CryptoApi = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n};\n\nexport default api;\n","import { keccak256 as keccak } from 'ethereum-cryptography/keccak';\n\nexport const keccak256 = (data: Uint8Array): Uint8Array => keccak(data);\n","import cryptoApi from './browser';\n\nexport * from './types';\n\nexport const {\n  bufferFromString,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  stringFromBuffer,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n} = cryptoApi;\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport type { BN } from '@fuel-ts/math';\nimport { versions } from '@fuel-ts/versions';\n\nimport type { Option } from './option';\n\nconst logger = new Logger(versions.FUELS);\n\ntype Primitive = string | number | boolean;\n\n/**\n * The type of value you can provide to `Coder.encode`\n */\nexport type InputValue<T = void> =\n  | Primitive\n  | BN\n  | Option<T>\n  | BytesLike\n  | InputValue[]\n  | { [key: string]: InputValue }\n  | Record<string, Primitive | BytesLike>;\n\n/**\n * The type of value you can get from `Coder.decode`\n */\nexport type DecodedValue =\n  | Primitive\n  | DecodedValue[]\n  | { [key: string]: DecodedValue }\n  | Record<string, Primitive>;\n\nexport type TypesOfCoder<TCoder> = TCoder extends Coder<infer TInput, infer TDecoded>\n  ? { Input: TInput; Decoded: TDecoded }\n  : never;\n\nexport abstract class Coder<TInput = unknown, TDecoded = unknown> {\n  readonly name: string;\n  readonly type: string;\n  readonly encodedLength: number;\n\n  constructor(name: string, type: string, encodedLength: number) {\n    this.name = name;\n    this.type = type;\n    this.encodedLength = encodedLength;\n  }\n\n  throwError(message: string, value: unknown): never {\n    return logger.throwArgumentError(message, this.name, value);\n  }\n\n  abstract encode(value: TInput, length?: number): Uint8Array;\n\n  abstract decode(data: Uint8Array, offset: number, length?: number): [TDecoded, number];\n}\n","import type { BN, BNInput } from '@fuel-ts/math';\nimport { bn, toBytes } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\nexport class U64Coder extends Coder<BNInput, BN> {\n  constructor() {\n    super('u64', 'u64', 8);\n  }\n\n  encode(value: BNInput): Uint8Array {\n    let bytes;\n\n    try {\n      bytes = toBytes(value, 8);\n    } catch (error) {\n      this.throwError(`Invalid ${this.type}`, value);\n    }\n\n    return bytes;\n  }\n\n  decode(data: Uint8Array, offset: number): [BN, number] {\n    let bytes = data.slice(offset, offset + 8);\n    bytes = bytes.slice(0, 8);\n\n    return [bn(bytes), offset + 8];\n  }\n}\n","export const OPTION_CODER_TYPE = 'enum Option';\nexport const VEC_CODER_TYPE = 'struct Vec';\nexport const stringRegEx = /str\\[(?<length>[0-9]+)\\]/;\nexport const arrayRegEx = /\\[(?<item>[\\w\\s\\\\[\\]]+);\\s*(?<length>[0-9]+)\\]/;\nexport const structRegEx = /^struct (?<name>\\w+)$/;\nexport const enumRegEx = /^enum (?<name>\\w+)$/;\nexport const tupleRegEx = /^\\((?<items>.*)\\)$/;\nexport const genericRegEx = /^generic (?<name>\\w+)$/;\n\nexport const WORD_SIZE = 8;\nexport const BYTES_32 = 32;\nexport const MAX_INPUTS = 255;\nexport const ASSET_ID_LEN = BYTES_32;\nexport const CONTRACT_ID_LEN = BYTES_32;\n\n// VM_TX_MEMORY = 10240\nexport const VM_TX_MEMORY =\n  BYTES_32 + // Tx ID\n  WORD_SIZE + // Tx size\n  // Asset ID/Balance coin input pairs\n  MAX_INPUTS * (ASSET_ID_LEN + WORD_SIZE);\n\n// TRANSACTION_SCRIPT_FIXED_SIZE = 112\nexport const TRANSACTION_SCRIPT_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  WORD_SIZE + // Gas price\n  WORD_SIZE + // Gas limit\n  WORD_SIZE + // Maturity\n  WORD_SIZE + // Script size\n  WORD_SIZE + // Script data size\n  WORD_SIZE + // Inputs size\n  WORD_SIZE + // Outputs size\n  WORD_SIZE + // Witnesses size\n  BYTES_32; // Receipts root\n\n// TRANSACTION_PREDICATE_COIN_FIXED_SIZE = 168\nexport const TRANSACTION_PREDICATE_COIN_FIXED_SIZE =\n  WORD_SIZE + // Identifier\n  40 + // Utxo Id Length\n  ASSET_ID_LEN + // Owner\n  WORD_SIZE + // Amount\n  ASSET_ID_LEN + // Asset id\n  WORD_SIZE * 2 + // Transaction pointer\n  WORD_SIZE + // Witnesses index\n  WORD_SIZE + // Maturity\n  WORD_SIZE + // Predicate size\n  WORD_SIZE; // Predicate data size\n\n// TRANSACTION_PREDICATE_MESSAGE_FIXED_SIZE = 160\nexport const TRANSACTION_PREDICATE_MESSAGE_FIXED_SIZE =\n  WORD_SIZE + // Input type\n  WORD_SIZE + // Identifier\n  ASSET_ID_LEN + // message_id\n  ASSET_ID_LEN + // Sender\n  ASSET_ID_LEN + // recipient\n  WORD_SIZE + // Amount\n  WORD_SIZE + // Nonce\n  WORD_SIZE + // Witnesses index\n  WORD_SIZE + // Data size\n  WORD_SIZE + // Predicate size\n  WORD_SIZE; // Predicate data size\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { concat, arrayify } from '@ethersproject/bytes';\n\nimport { U64Coder } from './coders/u64';\nimport { WORD_SIZE } from './constants';\n\nexport type DynamicData = {\n  [pointerIndex: number]: Uint8ArrayWithDynamicData;\n};\n\nexport type Uint8ArrayWithDynamicData = Uint8Array & {\n  dynamicData?: DynamicData;\n};\n\nconst VEC_PROPERTY_SPACE = 3; // ptr + cap + length\nexport const BASE_VECTOR_OFFSET = VEC_PROPERTY_SPACE * WORD_SIZE;\n\n// this is a fork of @ethersproject/bytes:concat\n// this collects individual dynamicData data and relocates it to top level\nexport function concatWithDynamicData(items: ReadonlyArray<BytesLike>): Uint8ArrayWithDynamicData {\n  const topLevelData: DynamicData = {};\n\n  let totalIndex = 0;\n  const objects = items.map((item) => {\n    const dynamicData = (item as Uint8ArrayWithDynamicData).dynamicData;\n    if (dynamicData) {\n      Object.entries(dynamicData).forEach(([pointerIndex, vData]) => {\n        topLevelData[parseInt(pointerIndex, 10) + totalIndex] = vData;\n      });\n    }\n\n    const byteArray = arrayify(item);\n    totalIndex += byteArray.byteLength / WORD_SIZE;\n\n    return byteArray;\n  });\n\n  const length = objects.reduce((accum, item) => accum + item.length, 0);\n  const result: Uint8ArrayWithDynamicData = new Uint8Array(length);\n\n  objects.reduce((offset, object) => {\n    result.set(object, offset);\n    return offset + object.length;\n  }, 0);\n\n  // store vector data and pointer indices, but only if data exist\n  if (Object.keys(topLevelData).length) {\n    result.dynamicData = topLevelData;\n  }\n\n  return result;\n}\n\nexport function unpackDynamicData(\n  results: Uint8ArrayWithDynamicData,\n  baseOffset: number,\n  dataOffset: number\n): Uint8Array {\n  if (!results.dynamicData) {\n    return concat([results]);\n  }\n\n  let cumulativeDynamicByteLength = 0;\n  let updatedResults = results;\n  Object.entries(results.dynamicData).forEach(([pointerIndex, vData]) => {\n    // update value of pointer\n    const pointerOffset = parseInt(pointerIndex, 10) * WORD_SIZE;\n    const adjustedValue = new U64Coder().encode(\n      dataOffset + baseOffset + cumulativeDynamicByteLength\n    );\n    updatedResults.set(adjustedValue, pointerOffset);\n\n    // append dynamic data at the end\n    const dataToAppend = vData.dynamicData\n      ? // unpack child dynamic data\n        unpackDynamicData(\n          vData,\n          baseOffset,\n          dataOffset + vData.byteLength + cumulativeDynamicByteLength\n        )\n      : vData;\n    updatedResults = concat([updatedResults, dataToAppend]);\n\n    cumulativeDynamicByteLength += dataToAppend.byteLength;\n  });\n\n  return updatedResults;\n}\n\n/** useful for debugging\n * Turns:\n  Uint8Array(24) [\n    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 24\n  ]\n\n  Into:\n  Array [\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 1\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 2\n    ],\n    Uint8Array(8) [\n      0, 0, 0, 0, 0, 0, 0, 24\n    ]\n  ]\n * \n */\nexport const chunkByWord = (data: Uint8Array): Uint8Array[] => {\n  const chunks = [];\n  let offset = 0;\n  let chunk = data.slice(offset, offset + WORD_SIZE);\n  while (chunk.length) {\n    chunks.push(chunk);\n    offset += WORD_SIZE;\n    chunk = data.slice(offset, offset + WORD_SIZE);\n  }\n\n  return chunks;\n};\n\n/**\n * Checks if a given type is a pointer type\n * See: https://github.com/FuelLabs/sway/issues/1368\n */\nexport const isPointerType = (type: string) => {\n  switch (type) {\n    case 'u8':\n    case 'u16':\n    case 'u32':\n    case 'u64':\n    case 'bool': {\n      return false;\n    }\n    default: {\n      return true;\n    }\n  }\n};\n\nexport function findOrThrow<T>(\n  arr: readonly T[],\n  predicate: (val: T) => boolean,\n  throwFn: () => never = () => {\n    throw new Error('element not found');\n  }\n): T {\n  const found = arr.find(predicate);\n  if (found === undefined) throwFn();\n\n  return found;\n}\n","import { concatWithDynamicData } from '../utilities';\n\nimport type { TypesOfCoder } from './abstract-coder';\nimport { Coder } from './abstract-coder';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']>;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class ArrayCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n  length: number;\n\n  constructor(coder: TCoder, length: number) {\n    super('array', `[${coder.type}; ${length}]`, length * coder.encodedLength);\n    this.coder = coder;\n    this.length = length;\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value)) {\n      this.throwError('expected array value', value);\n    }\n\n    if (this.length !== value.length) {\n      this.throwError('Types/values length mismatch', value);\n    }\n\n    return concatWithDynamicData(Array.from(value).map((v) => this.coder.encode(v)));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoder>, number] {\n    let newOffset = offset;\n    const decodedValue = Array(this.length)\n      .fill(0)\n      .map(() => {\n        let decoded;\n        [decoded, newOffset] = this.coder.decode(data, newOffset);\n        return decoded;\n      });\n\n    return [decodedValue as DecodedValueOf<TCoder>, newOffset];\n  }\n}\n","import { arrayify } from '@ethersproject/bytes';\nimport { bn, toHex } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\nexport class B256Coder extends Coder<string, string> {\n  constructor() {\n    super('b256', 'b256', 32);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      this.throwError(`Invalid ${this.type}`, value);\n    }\n    if (encodedValue.length !== 32) {\n      this.throwError(`Invalid ${this.type}`, value);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let bytes = data.slice(offset, offset + 32);\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(32);\n    }\n    if (bytes.length !== 32) {\n      this.throwError('Invalid size for b256', bytes);\n    }\n    return [toHex(bytes, 32), offset + 32];\n  }\n}\n","import { arrayify } from '@ethersproject/bytes';\nimport { bn, toHex } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\nexport class B512Coder extends Coder<string, string> {\n  constructor() {\n    super('b512', 'struct B512', 64);\n  }\n\n  encode(value: string): Uint8Array {\n    let encodedValue;\n    try {\n      encodedValue = arrayify(value);\n    } catch (error) {\n      this.throwError(`Invalid ${this.type}`, value);\n    }\n    if (encodedValue.length !== 64) {\n      this.throwError(`Invalid ${this.type}`, value);\n    }\n    return encodedValue;\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let bytes = data.slice(offset, offset + 64);\n    const decoded = bn(bytes);\n    if (decoded.isZero()) {\n      bytes = new Uint8Array(64);\n    }\n    if (bytes.length !== 64) {\n      this.throwError('Invalid size for b512', bytes);\n    }\n    return [toHex(bytes, 64), offset + 64];\n  }\n}\n","import { bn, toBytes } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\nexport class BooleanCoder extends Coder<boolean, boolean> {\n  constructor() {\n    super('boolean', 'boolean', 8);\n  }\n\n  encode(value: boolean): Uint8Array {\n    const isTrueBool = value === true || value === false;\n    if (!isTrueBool) {\n      this.throwError('Invalid bool', value);\n    }\n\n    return toBytes(value ? 1 : 0, 8);\n  }\n\n  decode(data: Uint8Array, offset: number): [boolean, number] {\n    const bytes = bn(data.slice(offset, offset + 8));\n    if (bytes.isZero()) {\n      return [false, offset + 8];\n    }\n    if (!bytes.eq(bn(1))) {\n      this.throwError('Invalid boolean value', bytes);\n    }\n    return [true, offset + 8];\n  }\n}\n","import { bn, toBytes } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\nexport class ByteCoder extends Coder<number, number> {\n  constructor() {\n    super('byte', 'byte', 8);\n  }\n\n  encode(value: number): Uint8Array {\n    let bytes;\n\n    try {\n      bytes = toBytes(value, 1);\n    } catch (error) {\n      this.throwError('Invalid Byte', value);\n    }\n\n    return toBytes(bytes, 8);\n  }\n\n  decode(data: Uint8Array, offset: number): [number, number] {\n    const bytes = data.slice(offset, offset + 8);\n    const value = bn(bytes);\n    if (value.gt(bn(255))) {\n      this.throwError('Invalid Byte', value);\n    }\n    const byte = Number(value);\n    return [byte, offset + 8];\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { toNumber } from '@fuel-ts/math';\nimport type { RequireExactlyOne } from 'type-fest';\n\nimport { concatWithDynamicData } from '../utilities';\n\nimport type { TypesOfCoder } from './abstract-coder';\nimport { Coder } from './abstract-coder';\nimport { U64Coder } from './u64';\n\nexport type InputValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n}>;\nexport type DecodedValueOf<TCoders extends Record<string, Coder>> = RequireExactlyOne<{\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n}>;\n\nconst isFullyNativeEnum = (enumCoders: { [s: string]: unknown } | ArrayLike<unknown>): boolean =>\n  Object.values(enumCoders).every(\n    // @ts-expect-error complicated types\n    ({ type, coders }) => type === '()' && JSON.stringify(coders) === JSON.stringify([])\n  );\n\nexport class EnumCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  name: string;\n  coders: TCoders;\n  #caseIndexCoder: U64Coder;\n  #encodedValueSize: number;\n\n  constructor(name: string, coders: TCoders) {\n    const caseIndexCoder = new U64Coder();\n    const encodedValueSize = Object.values(coders).reduce(\n      (max, coder) => Math.max(max, coder.encodedLength),\n      0\n    );\n    super('enum', `enum ${name}`, caseIndexCoder.encodedLength + encodedValueSize);\n    this.name = name;\n    this.coders = coders;\n    this.#caseIndexCoder = caseIndexCoder;\n    this.#encodedValueSize = encodedValueSize;\n  }\n\n  #encodeNativeEnum(value: string): Uint8Array {\n    const valueCoder = this.coders[value];\n    const encodedValue = valueCoder.encode([]);\n    const caseIndex = Object.keys(this.coders).indexOf(value);\n\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return concat([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (typeof value === 'string' && this.coders[value]) {\n      return this.#encodeNativeEnum(value);\n    }\n\n    const [caseKey, ...empty] = Object.keys(value);\n    if (!caseKey) {\n      throw new Error('A field for the case must be provided');\n    }\n    if (empty.length !== 0) {\n      throw new Error('Only one field must be provided');\n    }\n    const valueCoder = this.coders[caseKey];\n    const caseIndex = Object.keys(this.coders).indexOf(caseKey);\n    const encodedValue = valueCoder.encode(value[caseKey]);\n\n    const padding = new Uint8Array(this.#encodedValueSize - valueCoder.encodedLength);\n    return concatWithDynamicData([this.#caseIndexCoder.encode(caseIndex), padding, encodedValue]);\n  }\n\n  #decodeNativeEnum(caseKey: string, newOffset: number): [DecodedValueOf<TCoders>, number] {\n    return [caseKey as unknown as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    let newOffset = offset;\n\n    let decoded;\n    [decoded, newOffset] = new U64Coder().decode(data, newOffset);\n    const caseIndex = toNumber(decoded);\n    const caseKey = Object.keys(this.coders)[caseIndex];\n    if (!caseKey) {\n      throw new Error(`Invalid caseIndex \"${caseIndex}\". Valid cases: ${Object.keys(this.coders)}`);\n    }\n\n    const valueCoder = this.coders[caseKey];\n    const padding = this.#encodedValueSize - valueCoder.encodedLength;\n    newOffset += padding;\n    [decoded, newOffset] = valueCoder.decode(data, newOffset);\n\n    if (isFullyNativeEnum(this.coders)) {\n      return this.#decodeNativeEnum(caseKey, newOffset);\n    }\n\n    return [{ [caseKey]: decoded } as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { toNumber, toBytes } from '@fuel-ts/math';\n\nimport { Coder } from './abstract-coder';\n\ntype NumberCoderType = 'u8' | 'u16' | 'u32';\n\nexport class NumberCoder extends Coder<number, number> {\n  // This is to align the bits to the total bytes\n  // See https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/abi.md#unsigned-integers\n  length: number;\n  baseType: NumberCoderType;\n\n  constructor(baseType: NumberCoderType) {\n    super('number', baseType, 8);\n    this.baseType = baseType;\n    switch (baseType) {\n      case 'u8':\n        this.length = 1;\n        break;\n      case 'u16':\n        this.length = 2;\n        break;\n      case 'u32':\n      default:\n        this.length = 4;\n        break;\n    }\n  }\n\n  encode(value: number | string): Uint8Array {\n    let bytes;\n\n    try {\n      bytes = toBytes(value);\n    } catch (error) {\n      this.throwError(`Invalid ${this.baseType}`, value);\n    }\n\n    if (bytes.length > this.length) {\n      this.throwError(`Invalid ${this.baseType}. Too many bytes.`, value);\n    }\n\n    return toBytes(bytes, 8);\n  }\n\n  decode(data: Uint8Array, offset: number): [number, number] {\n    let bytes = data.slice(offset, offset + 8);\n    bytes = bytes.slice(8 - this.length, 8);\n\n    return [toNumber(bytes), offset + 8];\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { toUtf8Bytes, toUtf8String } from '@ethersproject/strings';\n\nimport { Coder } from './abstract-coder';\n\nexport class StringCoder<TLength extends number = number> extends Coder<string, string> {\n  length: TLength;\n  #paddingLength: number;\n\n  constructor(length: TLength) {\n    let paddingLength = (8 - length) % 8;\n    paddingLength = paddingLength < 0 ? paddingLength + 8 : paddingLength;\n    super('string', `str[${length}]`, length + paddingLength);\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: string): Uint8Array {\n    if (this.length !== value.length) {\n      this.throwError('Value length mismatch during encode', value);\n    }\n\n    const encoded = toUtf8Bytes(value);\n    const padding = new Uint8Array(this.#paddingLength);\n    return concat([encoded, padding]);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    const bytes = data.slice(offset, offset + this.length);\n    const value = toUtf8String(bytes);\n\n    const padding = this.#paddingLength;\n    return [value, offset + this.length + padding];\n  }\n}\n","import type { Coder } from './abstract-coder';\nimport type { InputValueOf, DecodedValueOf } from './enum';\nimport { EnumCoder } from './enum';\n\ntype SwayOption<T> = { None: [] } | { Some: T };\nexport type Option<T> = T | undefined;\n\nexport class OptionCoder<TCoders extends Record<string, Coder>> extends EnumCoder<TCoders> {\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    const result = super.encode(this.toSwayOption(value) as unknown as InputValueOf<TCoders>);\n    return result;\n  }\n\n  toSwayOption(input: InputValueOf<TCoders>): SwayOption<unknown> {\n    if (input !== undefined) {\n      return { Some: input };\n    }\n\n    return { None: [] };\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    const [decoded, newOffset] = super.decode(data, offset);\n    return [this.toOption(decoded) as DecodedValueOf<TCoders>, newOffset];\n  }\n\n  toOption(output?: DecodedValueOf<TCoders>): Option<unknown> {\n    if (output && 'Some' in output) {\n      return output.Some;\n    }\n\n    return undefined;\n  }\n}\n","import { concatWithDynamicData } from '../utilities';\n\nimport type { TypesOfCoder } from './abstract-coder';\nimport { Coder } from './abstract-coder';\nimport { OptionCoder } from './option';\n\ntype InputValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Record<string, Coder>> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class StructCoder<TCoders extends Record<string, Coder>> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  name: string;\n  coders: TCoders;\n\n  constructor(name: string, coders: TCoders) {\n    const encodedLength = Object.values(coders).reduce(\n      (acc, coder) => acc + coder.encodedLength,\n      0\n    );\n    super('struct', `struct ${name}`, encodedLength);\n    this.name = name;\n    this.coders = coders;\n  }\n\n  encode(value: InputValueOf<TCoders>) {\n    const encodedFields = Object.keys(this.coders).map((fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      const fieldValue = value[fieldName];\n      if (!(fieldCoder instanceof OptionCoder) && fieldValue == null) {\n        this.throwError(`Invalid ${this.type}. Field \"${fieldName}\" not present.`, value);\n      }\n      const encoded = fieldCoder.encode(fieldValue);\n      return encoded;\n    });\n\n    return concatWithDynamicData([concatWithDynamicData(encodedFields)]);\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    let newOffset = offset;\n    const decodedValue = Object.keys(this.coders).reduce((obj, fieldName) => {\n      const fieldCoder = this.coders[fieldName];\n      let decoded;\n      [decoded, newOffset] = fieldCoder.decode(data, newOffset);\n      // eslint-disable-next-line no-param-reassign\n      obj[fieldName as keyof DecodedValueOf<TCoders>] = decoded;\n      return obj;\n    }, {} as DecodedValueOf<TCoders>);\n\n    return [decodedValue, newOffset];\n  }\n}\n","import { concatWithDynamicData } from '../utilities';\n\nimport type { TypesOfCoder } from './abstract-coder';\nimport { Coder } from './abstract-coder';\n\ntype InputValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Input'];\n};\ntype DecodedValueOf<TCoders extends Coder[]> = {\n  [P in keyof TCoders]: TypesOfCoder<TCoders[P]>['Decoded'];\n};\n\nexport class TupleCoder<TCoders extends Coder[]> extends Coder<\n  InputValueOf<TCoders>,\n  DecodedValueOf<TCoders>\n> {\n  coders: TCoders;\n\n  constructor(coders: TCoders) {\n    const encodedLength = coders.reduce((acc, coder) => acc + coder.encodedLength, 0);\n    super('tuple', `(${coders.map((coder) => coder.type).join(', ')})`, encodedLength);\n    this.coders = coders;\n  }\n\n  encode(value: InputValueOf<TCoders>): Uint8Array {\n    if (this.coders.length !== value.length) {\n      this.throwError('Types/values length mismatch', { value });\n    }\n\n    return concatWithDynamicData(this.coders.map((coder, i) => coder.encode(value[i])));\n  }\n\n  decode(data: Uint8Array, offset: number): [DecodedValueOf<TCoders>, number] {\n    let newOffset = offset;\n    const decodedValue = this.coders.map((coder) => {\n      let decoded;\n      [decoded, newOffset] = coder.decode(data, newOffset);\n      return decoded;\n    });\n\n    return [decodedValue as DecodedValueOf<TCoders>, newOffset];\n  }\n}\n","import type { Uint8ArrayWithDynamicData } from '../utilities';\nimport { concatWithDynamicData, BASE_VECTOR_OFFSET } from '../utilities';\n\nimport type { TypesOfCoder } from './abstract-coder';\nimport { Coder } from './abstract-coder';\nimport { U64Coder } from './u64';\n\ntype InputValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Input']>;\ntype DecodedValueOf<TCoder extends Coder> = Array<TypesOfCoder<TCoder>['Decoded']>;\n\nexport class VecCoder<TCoder extends Coder> extends Coder<\n  InputValueOf<TCoder>,\n  DecodedValueOf<TCoder>\n> {\n  coder: TCoder;\n\n  constructor(coder: TCoder) {\n    super('struct', `struct Vec`, coder.encodedLength + BASE_VECTOR_OFFSET);\n    this.coder = coder;\n  }\n\n  encode(value: InputValueOf<TCoder>): Uint8Array {\n    if (!Array.isArray(value)) {\n      this.throwError('expected array value', value);\n    }\n\n    const parts: Uint8Array[] = [];\n\n    // pointer (ptr)\n    const pointer: Uint8ArrayWithDynamicData = new U64Coder().encode(BASE_VECTOR_OFFSET);\n    // pointer dynamicData, encode the vector now and attach to its pointer\n    pointer.dynamicData = {\n      0: concatWithDynamicData(Array.from(value).map((v) => this.coder.encode(v))),\n    };\n\n    parts.push(pointer);\n\n    // capacity (cap)\n    parts.push(new U64Coder().encode(value.length));\n\n    // length (len)\n    parts.push(new U64Coder().encode(value.length));\n\n    return concatWithDynamicData(parts);\n  }\n\n  decode(_data: Uint8Array, _offset: number): [DecodedValueOf<TCoder>, number] {\n    this.throwError('unexpected Vec decode', 'not implemented');\n  }\n}\n","import { Logger } from '@ethersproject/logger';\nimport { versions } from '@fuel-ts/versions';\n\nimport { arrayRegEx, enumRegEx, genericRegEx, stringRegEx, structRegEx } from './constants';\nimport type { JsonAbi, JsonAbiArgument } from './json-abi';\nimport { findOrThrow } from './utilities';\n\nconst logger = new Logger(versions.FUELS);\n\nexport class ResolvedAbiType {\n  readonly abi: JsonAbi;\n  name: string;\n  readonly type: string;\n  readonly originalTypeArguments: readonly JsonAbiArgument[] | null;\n  readonly components: readonly ResolvedAbiType[] | null;\n\n  constructor(abi: JsonAbi, argument: JsonAbiArgument) {\n    this.abi = abi;\n    const type = findOrThrow(\n      abi.types,\n      (t) => t.typeId === argument.type,\n      () =>\n        logger.throwArgumentError('Type does not exist in the provided abi', 'type', {\n          argument,\n          abi: this.abi,\n        })\n    );\n    this.name = argument.name;\n\n    this.type = type.type;\n    this.originalTypeArguments = argument.typeArguments;\n    this.components = ResolvedAbiType.getResolvedGenericComponents(\n      abi,\n      argument,\n      type.components,\n      type.typeParameters ?? ResolvedAbiType.getImplicitGenericTypeParameters(abi, type.components)\n    );\n  }\n\n  private static getResolvedGenericComponents(\n    abi: JsonAbi,\n    arg: JsonAbiArgument,\n    components: readonly JsonAbiArgument[] | null,\n    typeParameters: readonly number[] | null\n  ) {\n    if (components === null) return null;\n    if (typeParameters === null || typeParameters.length === 0)\n      return components.map((c) => new ResolvedAbiType(abi, c));\n\n    const typeParametersAndArgsMap = typeParameters.reduce(\n      (obj, typeParameter, typeParameterIndex) => {\n        const o: Record<number, JsonAbiArgument> = { ...obj };\n        o[typeParameter] = structuredClone(arg.typeArguments?.[typeParameterIndex]);\n        return o;\n      },\n      {} as Record<number, JsonAbiArgument>\n    );\n\n    const resolvedComponents = this.resolveGenericArgTypes(\n      abi,\n      components,\n      typeParametersAndArgsMap\n    );\n\n    return resolvedComponents.map((c) => new ResolvedAbiType(abi, c));\n  }\n\n  private static resolveGenericArgTypes(\n    abi: JsonAbi,\n    args: readonly JsonAbiArgument[],\n    typeParametersAndArgsMap: Record<number, JsonAbiArgument>\n  ): readonly JsonAbiArgument[] {\n    return args.map((arg) => {\n      if (typeParametersAndArgsMap[arg.type] !== undefined) {\n        return {\n          ...typeParametersAndArgsMap[arg.type],\n          name: arg.name,\n        };\n      }\n\n      if (arg.typeArguments) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: this.resolveGenericArgTypes(\n            abi,\n            arg.typeArguments,\n            typeParametersAndArgsMap\n          ),\n        };\n      }\n\n      const argType = findOrThrow(abi.types, (t) => t.typeId === arg.type);\n      const implicitTypeParameters = this.getImplicitGenericTypeParameters(abi, argType.components);\n\n      if (implicitTypeParameters && implicitTypeParameters.length > 0) {\n        return {\n          ...structuredClone(arg),\n          typeArguments: implicitTypeParameters.map((itp) => typeParametersAndArgsMap[itp]),\n        };\n      }\n\n      return arg;\n    });\n  }\n\n  private static getImplicitGenericTypeParameters(\n    abi: JsonAbi,\n    args: readonly JsonAbiArgument[] | null,\n    implicitGenericParametersParam?: number[]\n  ) {\n    if (!Array.isArray(args)) return null;\n\n    const implicitGenericParameters: number[] = implicitGenericParametersParam ?? [];\n\n    args.forEach((a) => {\n      const argType = findOrThrow(abi.types, (t) => t.typeId === a.type);\n\n      if (genericRegEx.test(argType.type)) {\n        implicitGenericParameters.push(argType.typeId);\n        return;\n      }\n\n      if (!Array.isArray(a.typeArguments)) return;\n      this.getImplicitGenericTypeParameters(abi, a.typeArguments, implicitGenericParameters);\n    });\n\n    return implicitGenericParameters.length > 0 ? implicitGenericParameters : null;\n  }\n\n  getSignature(): string {\n    const prefix = this.getArgSignaturePrefix();\n    const content = this.getArgSignatureContent();\n\n    return `${prefix}${content}`;\n  }\n\n  private getArgSignaturePrefix(): string {\n    const structMatch = structRegEx.test(this.type);\n    if (structMatch) return 's';\n\n    const arrayMatch = arrayRegEx.test(this.type);\n    if (arrayMatch) return 'a';\n\n    const enumMatch = enumRegEx.test(this.type);\n    if (enumMatch) return 'e';\n\n    return '';\n  }\n\n  private getArgSignatureContent(): string {\n    if (this.type === 'raw untyped ptr') {\n      return 'rawptr';\n    }\n\n    const strMatch = stringRegEx.exec(this.type)?.groups;\n    if (strMatch) {\n      return `str[${strMatch.length}]`;\n    }\n\n    if (this.components === null) return this.type;\n\n    const arrayMatch = arrayRegEx.exec(this.type)?.groups;\n\n    if (arrayMatch) {\n      return `[${this.components[0].getSignature()};${arrayMatch.length}]`;\n    }\n\n    const typeArgumentsSignature =\n      this.originalTypeArguments !== null\n        ? `<${this.originalTypeArguments\n            .map((a) => new ResolvedAbiType(this.abi, a).getSignature())\n            .join(',')}>`\n        : '';\n\n    const componentsSignature = `(${this.components.map((c) => c.getSignature()).join(',')})`;\n\n    return `${typeArgumentsSignature}${componentsSignature}`;\n  }\n}\n","// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { Logger } from '@ethersproject/logger';\nimport { versions } from '@fuel-ts/versions';\n\nimport type { DecodedValue, InputValue, Coder } from './coders/abstract-coder';\nimport { ArrayCoder } from './coders/array';\nimport { B256Coder } from './coders/b256';\nimport { B512Coder } from './coders/b512';\nimport { BooleanCoder } from './coders/boolean';\nimport { ByteCoder } from './coders/byte';\nimport { EnumCoder } from './coders/enum';\nimport { NumberCoder } from './coders/number';\nimport { OptionCoder } from './coders/option';\nimport { StringCoder } from './coders/string';\nimport { StructCoder } from './coders/struct';\nimport { TupleCoder } from './coders/tuple';\nimport { U64Coder } from './coders/u64';\nimport { VecCoder } from './coders/vec';\nimport {\n  arrayRegEx,\n  enumRegEx,\n  stringRegEx,\n  structRegEx,\n  tupleRegEx,\n  OPTION_CODER_TYPE,\n  VEC_CODER_TYPE,\n} from './constants';\nimport type { JsonAbi, JsonAbiArgument } from './json-abi';\nimport { ResolvedAbiType } from './resolved-abi-type';\nimport { findOrThrow } from './utilities';\n\nconst logger = new Logger(versions.FUELS);\nexport abstract class AbiCoder {\n  static getCoder(abi: JsonAbi, argument: JsonAbiArgument): Coder {\n    const resolvedAbiType = new ResolvedAbiType(abi, argument);\n\n    return AbiCoder.getCoderImpl(resolvedAbiType);\n  }\n\n  static encode(abi: JsonAbi, argument: JsonAbiArgument, value: InputValue) {\n    return this.getCoder(abi, argument).encode(value);\n  }\n\n  static decode(\n    abi: JsonAbi,\n    argument: JsonAbiArgument,\n    data: Uint8Array,\n    offset: number\n  ): [DecodedValue | undefined, number] {\n    return this.getCoder(abi, argument).decode(data, offset) as [DecodedValue | undefined, number];\n  }\n\n  private static getCoderImpl(resolvedAbiType: ResolvedAbiType): Coder {\n    switch (resolvedAbiType.type) {\n      case 'u8':\n      case 'u16':\n      case 'u32':\n        return new NumberCoder(resolvedAbiType.type);\n      case 'u64':\n      case 'raw untyped ptr':\n        return new U64Coder();\n      case 'bool':\n        return new BooleanCoder();\n      case 'byte':\n        return new ByteCoder();\n      case 'b256':\n        return new B256Coder();\n      case 'struct B512':\n        return new B512Coder();\n      default:\n        break;\n    }\n\n    const stringMatch = stringRegEx.exec(resolvedAbiType.type)?.groups;\n    if (stringMatch) {\n      const length = parseInt(stringMatch.length, 10);\n\n      return new StringCoder(length);\n    }\n\n    if (['raw untyped slice'].includes(resolvedAbiType.type)) {\n      const length = 0;\n      const itemCoder = new U64Coder();\n      return new ArrayCoder(itemCoder, length);\n    }\n\n    // ABI types underneath MUST have components by definition\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const components = resolvedAbiType.components!;\n\n    const arrayMatch = arrayRegEx.exec(resolvedAbiType.type)?.groups;\n    if (arrayMatch) {\n      const length = parseInt(arrayMatch.length, 10);\n      const arg = components[0];\n      if (!arg) {\n        throw new Error('Expected array type to have an item component');\n      }\n\n      const arrayElementCoder = AbiCoder.getCoderImpl(arg);\n      return new ArrayCoder(arrayElementCoder, length);\n    }\n\n    if (resolvedAbiType.type === VEC_CODER_TYPE) {\n      const arg = findOrThrow(components, (c) => c.name === 'buf').originalTypeArguments?.[0];\n      if (!arg) {\n        throw new Error('Expected Vec type to have a type argument');\n      }\n      const argType = new ResolvedAbiType(resolvedAbiType.abi, arg);\n\n      const itemCoder = AbiCoder.getCoderImpl(argType);\n      return new VecCoder(itemCoder);\n    }\n\n    const structMatch = structRegEx.exec(resolvedAbiType.type)?.groups;\n    if (structMatch) {\n      const coders = AbiCoder.getCoders(components);\n      return new StructCoder(structMatch.name, coders);\n    }\n\n    const enumMatch = enumRegEx.exec(resolvedAbiType.type)?.groups;\n    if (enumMatch) {\n      const coders = AbiCoder.getCoders(components);\n\n      const isOptionEnum = resolvedAbiType.type === OPTION_CODER_TYPE;\n      if (isOptionEnum) {\n        return new OptionCoder(enumMatch.name, coders);\n      }\n      return new EnumCoder(enumMatch.name, coders);\n    }\n\n    const tupleMatch = tupleRegEx.exec(resolvedAbiType.type)?.groups;\n    if (tupleMatch) {\n      const coders = components.map((component) => AbiCoder.getCoderImpl(component));\n      return new TupleCoder(coders);\n    }\n\n    return logger.throwArgumentError('Coder not found', 'abiType', { abiType: resolvedAbiType });\n  }\n\n  private static getCoders(components: readonly ResolvedAbiType[]) {\n    return components.reduce((obj, component) => {\n      const o: Record<string, Coder> = obj;\n\n      o[component.name] = AbiCoder.getCoderImpl(component);\n      return o;\n    }, {});\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { sha256 } from '@ethersproject/sha2';\nimport { bufferFromString } from '@fuel-ts/crypto';\nimport { bn } from '@fuel-ts/math';\nimport { versions } from '@fuel-ts/versions';\n\nimport { AbiCoder } from './abi-coder';\nimport type { DecodedValue, InputValue } from './coders/abstract-coder';\nimport type { ArrayCoder } from './coders/array';\nimport { TupleCoder } from './coders/tuple';\nimport type { U64Coder } from './coders/u64';\nimport { OPTION_CODER_TYPE } from './constants';\nimport type {\n  JsonAbi,\n  JsonAbiArgument,\n  JsonAbiFunction,\n  JsonAbiFunctionAttribute,\n} from './json-abi';\nimport { ResolvedAbiType } from './resolved-abi-type';\nimport type { Uint8ArrayWithDynamicData } from './utilities';\nimport { isPointerType, unpackDynamicData, findOrThrow } from './utilities';\n\nconst logger = new Logger(versions.FUELS);\n\nexport class FunctionFragment<\n  TAbi extends JsonAbi = JsonAbi,\n  FnName extends TAbi['functions'][number]['name'] = string\n> {\n  readonly signature: string;\n  readonly selector: string;\n  readonly name: string;\n  readonly jsonFn: JsonAbiFunction;\n  readonly attributes: readonly JsonAbiFunctionAttribute[];\n  private readonly jsonAbi: JsonAbi;\n\n  constructor(jsonAbi: JsonAbi, name: FnName) {\n    this.jsonAbi = jsonAbi;\n    this.jsonFn = findOrThrow(this.jsonAbi.functions, (f) => f.name === name);\n    this.name = name;\n    this.signature = FunctionFragment.getSignature(this.jsonAbi, this.jsonFn);\n    this.selector = FunctionFragment.getFunctionSelector(this.signature);\n\n    this.attributes = this.jsonFn.attributes ?? [];\n  }\n\n  private static getSignature(abi: JsonAbi, fn: JsonAbiFunction): string {\n    const inputsSignatures = fn.inputs.map((input) =>\n      new ResolvedAbiType(abi, input).getSignature()\n    );\n    return `${fn.name}(${inputsSignatures.join(',')})`;\n  }\n\n  private static getFunctionSelector(functionSignature: string) {\n    const hashedFunctionSignature = sha256(bufferFromString(functionSignature, 'utf-8'));\n    // get first 4 bytes of signature + 0x prefix. then left-pad it to 8 bytes using toHex(8)\n    return bn(hashedFunctionSignature.slice(0, 10)).toHex(8);\n  }\n\n  isInputDataPointer(): boolean {\n    const inputTypes = this.jsonFn.inputs.map((i) =>\n      this.jsonAbi.types.find((t) => t.typeId === i.type)\n    );\n\n    return this.jsonFn.inputs.length > 1 || isPointerType(inputTypes[0]?.type || '');\n  }\n\n  encodeArguments(values: InputValue[], offset = 0): Uint8Array {\n    FunctionFragment.verifyArgsAndInputsAlign(values, this.jsonFn.inputs, this.jsonAbi);\n\n    const shallowCopyValues = values.slice();\n\n    const nonEmptyInputs = this.jsonFn.inputs.filter(\n      (x) => findOrThrow(this.jsonAbi.types, (t) => t.typeId === x.type).type !== '()'\n    );\n\n    if (Array.isArray(values) && nonEmptyInputs.length !== values.length) {\n      shallowCopyValues.length = this.jsonFn.inputs.length;\n      shallowCopyValues.fill(undefined as unknown as InputValue, values.length);\n    }\n\n    const coders = nonEmptyInputs.map((t) => AbiCoder.getCoder(this.jsonAbi, t));\n\n    const coder = new TupleCoder(coders);\n    const results: Uint8ArrayWithDynamicData = coder.encode(shallowCopyValues);\n\n    return unpackDynamicData(results, offset, results.byteLength);\n  }\n\n  private static verifyArgsAndInputsAlign(\n    args: InputValue[],\n    inputs: readonly JsonAbiArgument[],\n    abi: JsonAbi\n  ) {\n    if (args.length === inputs.length) return;\n\n    const inputTypes = inputs.map((i) => findOrThrow(abi.types, (t) => t.typeId === i.type));\n    const optionalInputs = inputTypes.filter(\n      (x) => x.type === OPTION_CODER_TYPE || x.type === '()'\n    );\n    if (optionalInputs.length === inputTypes.length) return;\n    if (inputTypes.length - optionalInputs.length === args.length) return;\n\n    throw new Error('Types/values length mismatch');\n  }\n\n  decodeArguments(data: BytesLike) {\n    const bytes = arrayify(data);\n    const nonEmptyInputs = this.jsonFn.inputs.filter(\n      (x) => findOrThrow(this.jsonAbi.types, (t) => t.typeId === x.type).type !== '()'\n    );\n\n    if (nonEmptyInputs.length === 0) {\n      // The VM is current return 0x0000000000000000, but we should treat it as undefined / void\n      if (bytes.length === 0) return undefined;\n\n      logger.throwError(\n        'Types/values length mismatch during decode',\n        Logger.errors.INVALID_ARGUMENT,\n        {\n          count: {\n            types: this.jsonFn.inputs.length,\n            nonEmptyInputs: nonEmptyInputs.length,\n            values: bytes.length,\n          },\n          value: {\n            args: this.jsonFn.inputs,\n            nonEmptyInputs,\n            values: bytes,\n          },\n        }\n      );\n    }\n\n    const result = nonEmptyInputs.reduce(\n      (obj: { decoded: unknown[]; offset: number }, input, currentIndex) => {\n        const coder = AbiCoder.getCoder(this.jsonAbi, input);\n        if (currentIndex === 0) {\n          const inputAbiType = findOrThrow(this.jsonAbi.types, (t) => t.typeId === input.type);\n          if (inputAbiType.type === 'raw untyped slice') {\n            (coder as ArrayCoder<U64Coder>).length = bytes.length / 8;\n          }\n        }\n        const [decodedValue, decodedValueByteSize] = coder.decode(bytes, obj.offset);\n\n        return {\n          decoded: [...obj.decoded, decodedValue],\n          offset: obj.offset + decodedValueByteSize,\n        };\n      },\n      { decoded: [], offset: 0 }\n    );\n\n    return result.decoded;\n  }\n\n  decodeOutput(data: BytesLike): [DecodedValue | undefined, number] {\n    const outputAbiType = findOrThrow(\n      this.jsonAbi.types,\n      (t) => t.typeId === this.jsonFn.output.type\n    );\n    if (outputAbiType.type === '()') return [undefined, 0];\n\n    const bytes = arrayify(data);\n    const coder = AbiCoder.getCoder(this.jsonAbi, this.jsonFn.output);\n\n    if (outputAbiType.type === 'raw untyped slice') {\n      (coder as ArrayCoder<U64Coder>).length = bytes.length / 8;\n    }\n\n    return coder.decode(bytes, 0) as [DecodedValue | undefined, number];\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { versions } from '@fuel-ts/versions';\n\nimport { AbiCoder } from './abi-coder';\nimport type { InputValue } from './coders/abstract-coder';\nimport { FunctionFragment } from './function-fragment';\nimport type { JsonAbi, JsonAbiConfigurable } from './json-abi';\nimport { findOrThrow } from './utilities';\n\nconst logger = new Logger(versions.FUELS);\n\nexport class Interface<TAbi extends JsonAbi = JsonAbi> {\n  readonly functions!: Record<string, FunctionFragment>;\n\n  readonly configurables: Record<string, JsonAbiConfigurable>;\n  /*\n  TODO: Refactor so that there's no need for externalLoggedTypes\n   \n  This is dedicated to external contracts added via `<base-invocation-scope.ts>.addContracts()` method. \n  This is used to decode logs from contracts other than the main contract\n  we're interacting with.\n  */\n  private externalLoggedTypes: Record<string, Interface>;\n  readonly jsonAbi: TAbi;\n\n  constructor(jsonAbi: TAbi) {\n    this.jsonAbi = jsonAbi;\n\n    this.externalLoggedTypes = {};\n\n    this.functions = Object.fromEntries(\n      this.jsonAbi.functions.map((x) => [x.name, new FunctionFragment(this.jsonAbi, x.name)])\n    );\n\n    this.configurables = Object.fromEntries(this.jsonAbi.configurables.map((x) => [x.name, x]));\n  }\n\n  /**\n   * Returns function fragment for a dynamic input.\n   * @param nameOrSignatureOrSelector - name (e.g. 'transfer'), signature (e.g. 'transfer(address,uint256)') or selector (e.g. '0x00000000a9059cbb') of the function fragment\n   */\n  getFunction(nameOrSignatureOrSelector: string): FunctionFragment {\n    const fn = Object.values<FunctionFragment>(this.functions).find(\n      (f) =>\n        f.name === nameOrSignatureOrSelector ||\n        f.signature === nameOrSignatureOrSelector ||\n        f.selector === nameOrSignatureOrSelector\n    );\n\n    if (fn !== undefined) return fn;\n\n    return logger.throwArgumentError(\n      `function ${nameOrSignatureOrSelector} not found.`,\n      'data',\n      fn\n    );\n  }\n\n  decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): any {\n    const fragment =\n      typeof functionFragment === 'string' ? this.getFunction(functionFragment) : functionFragment;\n\n    if (!fragment) {\n      throw new Error('Fragment not found');\n    }\n\n    return fragment.decodeArguments(data);\n  }\n\n  encodeFunctionData(\n    functionFragment: FunctionFragment | string,\n    values: Array<InputValue>,\n    offset = 0\n  ): Uint8Array {\n    const fragment =\n      typeof functionFragment === 'string' ? this.getFunction(functionFragment) : functionFragment;\n\n    if (!fragment) {\n      throw new Error('Fragment not found');\n    }\n\n    return fragment.encodeArguments(values, offset);\n  }\n\n  // Decode the result of a function call\n  decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): any {\n    const fragment =\n      typeof functionFragment === 'string' ? this.getFunction(functionFragment) : functionFragment;\n\n    return fragment.decodeOutput(data);\n  }\n\n  decodeLog(data: BytesLike, logId: number, receiptId: string): any {\n    const isExternalLoggedType = this.externalLoggedTypes[receiptId];\n    if (isExternalLoggedType) {\n      const externalInterface = this.externalLoggedTypes[receiptId];\n      return externalInterface.decodeLog(data, logId, receiptId);\n    }\n\n    const { loggedType } = findOrThrow(this.jsonAbi.loggedTypes, (type) => type.logId === logId);\n\n    return AbiCoder.decode(this.jsonAbi, loggedType, arrayify(data), 0);\n  }\n\n  updateExternalLoggedTypes(id: string, loggedTypes: Interface) {\n    this.externalLoggedTypes[id] = loggedTypes;\n  }\n\n  encodeConfigurable(name: string, value: InputValue) {\n    const configurable = findOrThrow(\n      this.jsonAbi.configurables,\n      (c) => c.name === name,\n      () => {\n        throw new Error(`configurable '${name}' doesn't exist`);\n      }\n    );\n\n    return AbiCoder.encode(this.jsonAbi, configurable.configurableType, value);\n  }\n\n  getTypeById(typeId: number) {\n    return findOrThrow(\n      this.jsonAbi.types,\n      (t) => t.typeId === typeId,\n      () => {\n        throw new Error(`type with typeId '${typeId}' doesn't exist`);\n      }\n    );\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable max-classes-per-file */\n\n/**\n * @privateRemarks\n *\n * TODO: Consider re-distritubing interfaces near their original packages\n */\n\n// #region bech32-1\nexport type Bech32Address = `fuel${string}`;\n// #endregion bech32-1\nexport type B256Address = string;\n\nexport type B256AddressEvm = `0x000000000000000000000000${string}`;\n\n/**\n * @prop value - A 256 bit hash string with the first 12 bytes cleared\n */\nexport type EvmAddress = {\n  value: B256AddressEvm;\n};\n\n/**\n * @hidden\n */\nexport abstract class AbstractScriptRequest<T> {\n  abstract bytes: Uint8Array;\n  abstract encodeScriptData: (data: T) => Uint8Array;\n}\n\n// #region address-1\nexport abstract class AbstractAddress {\n  abstract toJSON(): string;\n  abstract toString(): string;\n  abstract toAddress(): Bech32Address;\n  abstract toB256(): B256Address;\n  abstract toHexString(): string;\n  abstract toBytes(): Uint8Array;\n  abstract equals(other: AbstractAddress): boolean;\n}\n// #endregion address-1\n\nexport abstract class AbstractAccount {\n  abstract address: AbstractAddress;\n  abstract provider: unknown;\n  abstract getResourcesToSpend(quantities: any[], options?: any): any;\n  abstract sendTransaction(transactionRequest: any): any;\n  abstract simulateTransaction(transactionRequest: any): any;\n}\n\n/**\n * @hidden\n */\nexport abstract class AbstractProgram {\n  abstract account: AbstractAccount | null;\n  abstract interface: {\n    encodeFunctionData: (func: any, args: any[], offset: number) => any;\n    decodeFunctionResult: (func: any, result: Uint8Array | string) => any;\n    updateExternalLoggedTypes: (id: string, abiInterface: any) => any;\n  };\n\n  abstract provider: {\n    sendTransaction(transactionRequest: any): any;\n  } | null;\n}\n\nexport abstract class AbstractContract extends AbstractProgram {\n  abstract id: AbstractAddress;\n}\n\n/**\n * @hidden\n */\nexport abstract class AbstractScript extends AbstractProgram {\n  abstract bytes: Uint8Array;\n}\n\n/** A simple type alias defined using the `type` keyword. */\nexport type AddressLike = AbstractAddress | AbstractAccount;\n\nexport type ContractIdLike = AbstractAddress | AbstractContract;\n\n/**\n * @hidden\n */\nexport abstract class AbstractPredicate {\n  abstract bytes: Uint8Array;\n  abstract address: AbstractAddress;\n  abstract predicateData: Uint8Array;\n\n  abstract types?: ReadonlyArray<any>;\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { AbstractContract, AbstractAccount } from '@fuel-ts/interfaces';\nimport type {\n  Bech32Address,\n  B256Address,\n  AddressLike,\n  ContractIdLike,\n  AbstractAddress,\n  B256AddressEvm,\n} from '@fuel-ts/interfaces';\nimport { versions } from '@fuel-ts/versions';\nimport type { Decoded } from 'bech32';\nimport { bech32m } from 'bech32';\n\nconst logger = new Logger(versions.FUELS);\n\n/**\n * Fuel Network HRP (human-readable part) for bech32 encoding\n *\n * @hidden\n */\nexport const FUEL_BECH32_HRP_PREFIX = 'fuel';\n\n/**\n * Decodes a Bech32 address string into Decoded\n *\n * @hidden\n */\nexport function fromBech32(address: Bech32Address): Decoded {\n  return bech32m.decode(address);\n}\n\n/**\n * Converts a B256 address string into Bech32\n *\n * @hidden\n */\nexport function toBech32(address: B256Address): Bech32Address {\n  return bech32m.encode(\n    FUEL_BECH32_HRP_PREFIX,\n    bech32m.toWords(arrayify(hexlify(address)))\n  ) as Bech32Address;\n}\n\n/**\n * Determines if a given string is Bech32 format\n *\n * @hidden\n */\nexport function isBech32(address: BytesLike): boolean {\n  return (\n    typeof address === 'string' &&\n    address.indexOf(FUEL_BECH32_HRP_PREFIX + 1) === 0 &&\n    fromBech32(address as Bech32Address).prefix === FUEL_BECH32_HRP_PREFIX\n  );\n}\n\n/**\n * Determines if a given string is B256 format\n *\n * @hidden\n */\nexport function isB256(address: string): boolean {\n  return (address.length === 66 || address.length === 64) && /(0x)?[0-9a-f]{64}$/i.test(address);\n}\n\n/**\n * Determines if a given string is in Public Key format (512 bits)\n *\n * @hidden\n */\nexport function isPublicKey(address: string): boolean {\n  return (address.length === 130 || address.length === 128) && /(0x)?[0-9a-f]{128}$/i.test(address);\n}\n\n/**\n * Takes a Bech32 address and returns the byte data\n *\n * @hidden\n */\nexport function getBytesFromBech32(address: Bech32Address): Uint8Array {\n  return new Uint8Array(bech32m.fromWords(fromBech32(address).words));\n}\n\n/**\n * Converts a Bech32 address string into B256\n *\n * @hidden\n */\nexport function toB256(address: Bech32Address): B256Address {\n  if (!isBech32(address)) {\n    logger.throwArgumentError('Invalid Bech32 Address', 'address', address);\n  }\n\n  return hexlify(getBytesFromBech32(address));\n}\n\n/**\n * Takes a Bech32 address and returns a normalized (i.e. lower case) representation of it.\n *\n * The input is validated along the way, which makes this significantly safer than\n * using `address.toLowerCase()`.\n *\n * @hidden\n */\nexport function normalizeBech32(address: Bech32Address): Bech32Address {\n  const { words } = fromBech32(address);\n  return bech32m.encode(FUEL_BECH32_HRP_PREFIX, words) as Bech32Address;\n}\n\n/**\n * Takes an indeterminate address type and returns an address\n *\n * @hidden\n */\nexport const addressify = (addressLike: AddressLike | ContractIdLike): AbstractAddress => {\n  if (addressLike instanceof AbstractAccount) {\n    return addressLike.address;\n  }\n\n  if (addressLike instanceof AbstractContract) {\n    return addressLike.id;\n  }\n\n  return addressLike;\n};\n\n/**\n * @hidden\n */\nexport const getRandomB256 = () => hexlify(randomBytes(32));\n\n/**\n * Takes a B256 address and clears the first 12 bytes, this is required for an EVM Address\n *\n * @param b256 - the address to clear\n * @returns b256 with first 12 bytes cleared\n *\n * @hidden\n */\nexport const clearFirst12BytesFromB256 = (b256: B256Address): B256AddressEvm => {\n  let bytes;\n\n  try {\n    if (!isB256(b256)) {\n      throw new Error();\n    }\n\n    bytes = getBytesFromBech32(toBech32(b256));\n    bytes = hexlify(bytes.fill(0, 0, 12)) as B256AddressEvm;\n  } catch (error) {\n    throw new Error(`Cannot generate EVM Address B256 from B256: ${b256}`);\n  }\n\n  return bytes;\n};\n","import { Logger } from '@ethersproject/logger';\nimport { sha256 } from '@ethersproject/sha2';\nimport { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { Bech32Address, B256Address, EvmAddress } from '@fuel-ts/interfaces';\nimport { versions } from '@fuel-ts/versions';\n\nimport {\n  normalizeBech32,\n  isBech32,\n  toB256,\n  getBytesFromBech32,\n  toBech32,\n  getRandomB256,\n  isPublicKey,\n  isB256,\n  clearFirst12BytesFromB256,\n} from './utils';\n\nconst logger = new Logger(versions.FUELS);\n\n/**\n * `Address` provides a type safe wrapper for converting between different address formats\n * ands comparing them for equality.\n */\nexport default class Address extends AbstractAddress {\n  // #region address-2\n  readonly bech32Address: Bech32Address;\n  // #endregion address-2\n\n  /**\n   * @param address - A Bech32 address\n   */\n  constructor(address: Bech32Address) {\n    super();\n    logger.checkNew(new.target, Address);\n    this.bech32Address = normalizeBech32(address);\n\n    if (!isBech32(this.bech32Address)) {\n      logger.throwArgumentError('Invalid Bech32 Address', 'address', address);\n    }\n  }\n\n  /**\n   * Returns the `bech32Address` property\n   *\n   * @returns The `bech32Address` property\n   */\n  toAddress(): Bech32Address {\n    return this.bech32Address;\n  }\n\n  /**\n   * Converts and returns the `bech32Address` property to a 256 bit hash string\n   *\n   * @returns The `bech32Address` property as a 256 bit hash string\n   */\n  toB256(): B256Address {\n    return toB256(this.bech32Address);\n  }\n\n  /**\n   * Converts and returns the `bech32Address` property to a byte array\n   *\n   * @returns The `bech32Address` property as a byte array\n   */\n  toBytes(): Uint8Array {\n    return getBytesFromBech32(this.bech32Address);\n  }\n\n  /**\n   * Converts\n   *\n   * @returns The `bech32Address` property as a 256 bit hash string\n   */\n  toHexString(): B256Address {\n    return this.toB256();\n  }\n\n  /**\n   * Converts and returns the `bech32Address` property as a string\n   *\n   * @returns The `bech32Address` property as a string\n   */\n  toString(): string {\n    return this.bech32Address;\n  }\n\n  /**\n   * Converts and returns the `bech32Address` property as a string\n   *\n   * @returns The `bech32Address` property as a string\n   */\n  toJSON(): string {\n    return this.bech32Address;\n  }\n\n  /**\n   * Clears the first 12 bytes of the `bech32Address` property and returns it as a `EvmAddress`\n   *\n   * @returns The `bech32Address` property as an {@link EvmAddress | `EvmAddress`}\n   */\n  toEvmAddress(): EvmAddress {\n    const b256Address = toB256(this.bech32Address);\n\n    return {\n      value: clearFirst12BytesFromB256(b256Address),\n    } as EvmAddress;\n  }\n\n  /**\n   * Returns the value of the `bech32Address` property\n   *\n   * @returns The value of `bech32Address` property\n   */\n  valueOf(): string {\n    return this.bech32Address;\n  }\n\n  /**\n   * Compares this the `bech32Address` property to another for direct equality\n   *\n   * @param other - Another address to compare against\n   * @returns The equality of the comparison\n   */\n  equals(other: Address): boolean {\n    return this.bech32Address === other.bech32Address;\n  }\n\n  /**\n   * Takes a Public Key, hashes it, and creates an `Address`\n   *\n   * @param publicKey - A wallets public key\n   * @returns A new `Address` instance\n   */\n  static fromPublicKey(publicKey: string): Address {\n    const b256Address = sha256(publicKey);\n    return new Address(toBech32(b256Address));\n  }\n\n  /**\n   * Takes a B256 Address and creates an `Address`\n   *\n   * @param b256Address - A b256 hash\n   * @returns A new `Address` instance\n   */\n  static fromB256(b256Address: string): Address {\n    return new Address(toBech32(b256Address));\n  }\n\n  /**\n   * Creates an `Address` with a randomized `bech32Address` property\n   *\n   * @returns A new `Address` instance\n   */\n  static fromRandom(): Address {\n    return this.fromB256(getRandomB256());\n  }\n\n  /**\n   * Takes an ambiguous string and attempts to create an `Address`\n   *\n   * @param address - An ambiguous string\n   * @returns A new `Address` instance\n   */\n  static fromString(address: string): Address {\n    return isBech32(address) ? new Address(address as Bech32Address) : this.fromB256(address);\n  }\n\n  /**\n   * Takes an ambiguous string or address and creates an `Address`\n   *\n   * @returns a new `Address` instance\n   */\n  static fromAddressOrString(address: string | AbstractAddress): AbstractAddress {\n    return typeof address === 'string' ? this.fromString(address) : address;\n  }\n\n  /**\n   * Takes a dynamic string or `AbstractAddress` and creates an `Address`\n   *\n   * @param addressId - A string containing Bech32, B256, or Public Key\n   * @throws Error - Unknown address if the format is not recognised\n   * @returns A new `Address` instance\n   */\n  static fromDynamicInput(address: string | AbstractAddress): Address {\n    // If address is a object than we assume it's a AbstractAddress\n    // we don't check by instanceof because it's possible to\n    // the host app to have a different reference to this same class type\n    if (typeof address !== 'string' && 'toB256' in address) {\n      return Address.fromB256(address.toB256());\n    }\n    if (isPublicKey(address)) {\n      return Address.fromPublicKey(address);\n    }\n\n    if (isBech32(address)) {\n      return new Address(address as Bech32Address);\n    }\n\n    if (isB256(address)) {\n      return Address.fromB256(address);\n    }\n\n    throw new Error('Unknown address format: only Bech32, B256, or Public Key (512) supported');\n  }\n\n  /**\n   * Takes an `EvmAddress` and returns back an `Address`\n   *\n   * @returns A new `Address` instance\n   */\n  static fromEvmAddress(evmAddress: EvmAddress): Address {\n    return new Address(toBech32(evmAddress.value));\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, concat, hexlify } from '@ethersproject/bytes';\nimport { Coder } from '@fuel-ts/abi-coder';\n\nexport class ByteArrayCoder extends Coder<BytesLike, string> {\n  length: number;\n  #paddingLength: number;\n\n  constructor(length: number) {\n    const paddingLength = (8 - (length % 8)) % 8;\n    const encodedLength = length + paddingLength;\n    super(\n      'ByteArray',\n      // While this might sound like a [u8; N] coder it's actually not.\n      // A [u8; N] coder would pad every u8 to 8 bytes which would\n      // make every u8 have the same size as a u64.\n      // We are packing four u8s into u64s here, avoiding this padding.\n      `[u64; ${encodedLength / 4}]`,\n      encodedLength\n    );\n    this.length = length;\n    this.#paddingLength = paddingLength;\n  }\n\n  encode(value: BytesLike): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    const data = arrayify(value);\n    parts.push(data);\n    // Write padding\n    if (this.#paddingLength) {\n      parts.push(new Uint8Array(this.#paddingLength));\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [string, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = [hexlify(data.slice(o, o + this.length)), o + this.length];\n    const value = decoded;\n    // Read padding\n    if (this.#paddingLength) {\n      [decoded, o] = [null, o + this.#paddingLength];\n    }\n\n    return [value, o];\n  }\n}\n","import { NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type TxPointer = {\n  /** Block height (u32) */\n  blockHeight: number;\n\n  /** Transaction index (u16) */\n  txIndex: number;\n};\n\nexport class TxPointerCoder extends StructCoder<{\n  blockHeight: NumberCoder;\n  txIndex: NumberCoder;\n}> {\n  constructor() {\n    super('TxPointer', {\n      blockHeight: new NumberCoder('u32'),\n      txIndex: new NumberCoder('u16'),\n    });\n  }\n}\n","import { B256Coder, NumberCoder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type UtxoId = {\n  /** Transaction ID (b256) */\n  transactionId: string;\n  /** Output index (u8) */\n  outputIndex: number;\n};\n\nexport class UtxoIdCoder extends StructCoder<{\n  transactionId: B256Coder;\n  outputIndex: NumberCoder;\n}> {\n  constructor() {\n    super('UtxoId', {\n      transactionId: new B256Coder(),\n      outputIndex: new NumberCoder('u8'),\n    });\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { Coder, U64Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\nimport type { UtxoId } from './utxo-id';\nimport { UtxoIdCoder } from './utxo-id';\n\nexport enum InputType {\n  Coin = 0,\n  Contract = 1,\n  Message = 2,\n}\n\nexport type InputCoin = {\n  type: InputType.Coin;\n\n  /** UTXO ID (UtxoId) */\n  utxoID: UtxoId;\n\n  /** Owning address or script hash (b256) */\n  owner: string;\n\n  /** Amount of coins (u64) */\n  amount: BN;\n\n  /** Asset ID of the coins (b256) */\n  assetId: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Index of witness that authorizes spending the coin (u8) */\n  witnessIndex: number;\n\n  /** UTXO being spent must have been created at least this many blocks ago (u32) */\n  maturity: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u16) */\n  predicateLength: number;\n\n  /** Length of predicate input data, in bytes (u16) */\n  predicateDataLength: number;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputCoinCoder extends Coder<InputCoin, InputCoin> {\n  constructor() {\n    super('InputCoin', 'struct InputCoin', 0);\n  }\n\n  encode(value: InputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UtxoIdCoder().encode(value.utxoID));\n    parts.push(new B256Coder().encode(value.owner));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder('u8').encode(value.witnessIndex));\n    parts.push(new NumberCoder('u32').encode(value.maturity));\n    parts.push(new U64Coder().encode(value.predicateGasUsed));\n    parts.push(new NumberCoder('u32').encode(value.predicateLength));\n    parts.push(new NumberCoder('u32').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(value.predicateLength).encode(value.predicate));\n    parts.push(new ByteArrayCoder(value.predicateDataLength).encode(value.predicateData));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UtxoIdCoder().decode(data, o);\n    const utxoID = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const owner = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Coin,\n        utxoID,\n        owner,\n        amount,\n        assetId,\n        txPointer,\n        witnessIndex,\n        maturity,\n        predicateGasUsed,\n        predicateLength,\n        predicateDataLength,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        predicate,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputContract = {\n  type: InputType.Contract;\n\n  /** UTXO ID (UtxoId) */\n  utxoID: UtxoId;\n\n  /** Root of amount of coins owned by contract before transaction execution (b256) */\n  balanceRoot: string;\n\n  /** State root of contract before transaction execution (b256) */\n  stateRoot: string;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: TxPointer;\n\n  /** Contract ID (b256) */\n  contractID: string;\n};\n\nexport class InputContractCoder extends Coder<InputContract, InputContract> {\n  constructor() {\n    super('InputContract', 'struct InputContract', 0);\n  }\n\n  encode(value: InputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new UtxoIdCoder().encode(value.utxoID));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new B256Coder().encode(value.contractID));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new UtxoIdCoder().decode(data, o);\n    const utxoID = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractID = decoded;\n\n    return [\n      {\n        type: InputType.Contract,\n        utxoID,\n        balanceRoot,\n        stateRoot,\n        txPointer,\n        contractID,\n      },\n      o,\n    ];\n  }\n}\n\nexport type InputMessage = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: string;\n\n  /** Address of recipient */\n  recipient: string;\n\n  /** Amount of coins */\n  amount: BN;\n\n  /** data of message */\n  data?: string;\n\n  /** Length of predicate, in instructions (u16) */\n  dataLength?: number;\n\n  /** Unique nonce of message */\n  nonce: string;\n\n  /** Index of witness that authorizes message (u8) */\n  witnessIndex: number;\n\n  /** Gas used by predicate (u64) */\n  predicateGasUsed: BN;\n\n  /** Length of predicate, in instructions (u16) */\n  predicateLength: number;\n\n  /** Length of predicate input data, in bytes (u16) */\n  predicateDataLength: number;\n\n  /** Predicate bytecode (byte[]) */\n  predicate: string;\n\n  /** Predicate input data (parameters) (byte[]) */\n  predicateData: string;\n};\n\nexport class InputMessageCoder extends Coder<InputMessage, InputMessage> {\n  constructor() {\n    super('InputMessage', 'struct InputMessage', 0);\n  }\n\n  static getMessageId(\n    value: Pick<InputMessage, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  static encodeData(messageData?: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData || '0x');\n    const dataLength = bytes.length;\n    return new ByteArrayCoder(dataLength).encode(bytes);\n  }\n\n  encode(value: InputMessage): Uint8Array {\n    const parts: Uint8Array[] = [];\n    const data = InputMessageCoder.encodeData(value.data);\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new NumberCoder('u8').encode(value.witnessIndex));\n    parts.push(new U64Coder().encode(value.predicateGasUsed));\n    parts.push(new NumberCoder('u16').encode(data.length));\n    parts.push(new NumberCoder('u16').encode(value.predicateLength));\n    parts.push(new NumberCoder('u16').encode(value.predicateDataLength));\n    parts.push(new ByteArrayCoder(data.length).encode(data));\n    parts.push(new ByteArrayCoder(value.predicateLength).encode(value.predicate));\n    parts.push(new ByteArrayCoder(value.predicateDataLength).encode(value.predicateData));\n\n    return concat(parts);\n  }\n\n  static decodeData(messageData: BytesLike): Uint8Array {\n    const bytes = arrayify(messageData);\n    const dataLength = bytes.length;\n    const [data] = new ByteArrayCoder(dataLength).decode(bytes, 0);\n\n    return arrayify(data);\n  }\n\n  decode(data: Uint8Array, offset: number): [InputMessage, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessIndex = Number(decoded);\n    [decoded, o] = new U64Coder().decode(data, o);\n    const predicateGasUsed = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const predicateLength = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const predicateDataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const messageData = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateLength).decode(data, o);\n    const predicate = decoded;\n    [decoded, o] = new ByteArrayCoder(predicateDataLength).decode(data, o);\n    const predicateData = decoded;\n\n    return [\n      {\n        type: InputType.Message,\n        sender,\n        recipient,\n        amount,\n        witnessIndex,\n        nonce,\n        predicateGasUsed,\n        dataLength,\n        predicateLength,\n        predicateDataLength,\n        data: messageData,\n        predicate,\n        predicateData,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Input = InputCoin | InputContract | InputMessage;\n\nexport class InputCoder extends Coder<Input, Input> {\n  constructor() {\n    super('Input', 'struct Input', 0);\n  }\n\n  encode(value: Input): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case InputType.Coin: {\n        parts.push(new InputCoinCoder().encode(value));\n        break;\n      }\n      case InputType.Contract: {\n        parts.push(new InputContractCoder().encode(value));\n        break;\n      }\n      case InputType.Message: {\n        parts.push(new InputMessageCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Input type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Input, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as InputType;\n    switch (type) {\n      case InputType.Coin: {\n        [decoded, o] = new InputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Contract: {\n        [decoded, o] = new InputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case InputType.Message: {\n        [decoded, o] = new InputMessageCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Input type');\n      }\n    }\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, U64Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\n\nexport enum OutputType /* u8 */ {\n  Coin = 0,\n  Contract = 1,\n  Change = 2,\n  Variable = 3,\n  ContractCreated = 4,\n}\n\nexport type OutputCoin = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputCoinCoder extends Coder<OutputCoin, OutputCoin> {\n  constructor() {\n    super('OutputCoin', 'struct OutputCoin', 0);\n  }\n\n  encode(value: OutputCoin): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputCoin, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Coin,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContract = {\n  type: OutputType.Contract;\n  /** Index of input contract (u8) */\n  inputIndex: number;\n  /** Root of amount of coins owned by contract after transaction execution (b256) */\n  balanceRoot: string;\n  /** State root of contract after transaction execution (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCoder extends Coder<OutputContract, OutputContract> {\n  constructor() {\n    super('OutputContract', 'struct OutputContract', 0);\n  }\n\n  encode(value: OutputContract): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.inputIndex));\n    parts.push(new B256Coder().encode(value.balanceRoot));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContract, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputIndex = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const balanceRoot = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.Contract,\n        inputIndex,\n        balanceRoot,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputChange = {\n  type: OutputType.Change;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputChangeCoder extends Coder<OutputChange, OutputChange> {\n  constructor() {\n    super('OutputChange', 'struct OutputChange', 0);\n  }\n\n  encode(value: OutputChange): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputChange, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Change,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputVariable = {\n  type: OutputType.Variable;\n  /** Receiving address or script hash (b256) */\n  to: string;\n  /** Amount of coins to send (u64) */\n  amount: BN;\n  /** Asset ID of coins (b256) */\n  assetId: string;\n};\n\nexport class OutputVariableCoder extends Coder<OutputVariable, OutputVariable> {\n  constructor() {\n    super('OutputVariable', 'struct OutputVariable', 0);\n  }\n\n  encode(value: OutputVariable): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputVariable, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n\n    return [\n      {\n        type: OutputType.Variable,\n        to,\n        amount,\n        assetId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type OutputContractCreated = {\n  type: OutputType.ContractCreated;\n  /** Contract ID (b256) */\n  contractId: string;\n  /** State root of contract (b256) */\n  stateRoot: string;\n};\n\nexport class OutputContractCreatedCoder extends Coder<\n  OutputContractCreated,\n  OutputContractCreated\n> {\n  constructor() {\n    super('OutputContractCreated', 'struct OutputContractCreated', 0);\n  }\n\n  encode(value: OutputContractCreated): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new B256Coder().encode(value.stateRoot));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [OutputContractCreated, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const stateRoot = decoded;\n\n    return [\n      {\n        type: OutputType.ContractCreated,\n        contractId,\n        stateRoot,\n      },\n      o,\n    ];\n  }\n}\n\nexport type Output =\n  | OutputCoin\n  | OutputContract\n  | OutputChange\n  | OutputVariable\n  | OutputContractCreated;\n\nexport class OutputCoder extends Coder<Output, Output> {\n  constructor() {\n    super('Output', ' struct Output', 0);\n  }\n\n  encode(value: Output): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case OutputType.Coin: {\n        parts.push(new OutputCoinCoder().encode(value));\n        break;\n      }\n      case OutputType.Contract: {\n        parts.push(new OutputContractCoder().encode(value));\n        break;\n      }\n      case OutputType.Change: {\n        parts.push(new OutputChangeCoder().encode(value));\n        break;\n      }\n      case OutputType.Variable: {\n        parts.push(new OutputVariableCoder().encode(value));\n        break;\n      }\n      case OutputType.ContractCreated: {\n        parts.push(new OutputContractCreatedCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Output type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Output, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as OutputType;\n    switch (type) {\n      case OutputType.Coin: {\n        [decoded, o] = new OutputCoinCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Contract: {\n        [decoded, o] = new OutputContractCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Change: {\n        [decoded, o] = new OutputChangeCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.Variable: {\n        [decoded, o] = new OutputVariableCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case OutputType.ContractCreated: {\n        [decoded, o] = new OutputContractCreatedCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Output type');\n      }\n    }\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { arrayify, concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { Coder, U64Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport enum ReceiptType /* u8 */ {\n  Call = 0,\n  Return = 1,\n  ReturnData = 2,\n  Panic = 3,\n  Revert = 4,\n  Log = 5,\n  LogData = 6,\n  Transfer = 7,\n  TransferOut = 8,\n  ScriptResult = 9,\n  MessageOut = 10,\n  Mint = 11,\n  Burn = 12,\n}\n\nexport type ReceiptCall = {\n  type: ReceiptType.Call;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of called contract (b256) */\n  to: string;\n  /** Amount of coins to forward, i.e. $rB (u64) */\n  amount: BN;\n  /** Asset ID of coins to forward, i.e. MEM[$rC, 32] (b256) */\n  assetId: string;\n  /** Gas to forward, i.e. $rD (u64) */\n  gas: BN;\n  /** First parameter (u64) */\n  param1: BN;\n  /** Second parameter (u64) */\n  param2: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptCallCoder extends Coder<ReceiptCall, ReceiptCall> {\n  constructor() {\n    super('ReceiptCall', 'struct ReceiptCall', 0);\n  }\n\n  encode(value: ReceiptCall): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new U64Coder().encode(value.gas));\n    parts.push(new U64Coder().encode(value.param1));\n    parts.push(new U64Coder().encode(value.param2));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptCall, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gas = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const param1 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const param2 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Call,\n        from,\n        to,\n        amount,\n        assetId,\n        gas,\n        param1,\n        param2,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturn = {\n  type: ReceiptType.Return;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptReturnCoder extends Coder<ReceiptReturn, ReceiptReturn> {\n  constructor() {\n    super('ReceiptReturn', 'struct ReceiptReturn', 0);\n  }\n\n  encode(value: ReceiptReturn): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.val));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturn, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Return,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptReturnData = {\n  type: ReceiptType.ReturnData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  ptr: BN;\n  /** Value of register $rB (u64) */\n  len: BN;\n  /** Hash of MEM[$rA, $rB] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptReturnDataCoder extends Coder<ReceiptReturnData, ReceiptReturnData> {\n  constructor() {\n    super('ReceiptReturnData', 'struct ReceiptReturnData', 0);\n  }\n\n  encode(value: ReceiptReturnData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.ptr));\n    parts.push(new U64Coder().encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptReturnData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.ReturnData,\n        id,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptPanic = {\n  type: ReceiptType.Panic;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Panic reason (u64) */\n  reason: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n  /** Value of optional contract ID */\n  contractId: string;\n};\n\nexport class ReceiptPanicCoder extends Coder<ReceiptPanic, ReceiptPanic> {\n  constructor() {\n    super('ReceiptPanic', 'struct ReceiptPanic', 0);\n  }\n\n  encode(value: ReceiptPanic): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.reason));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n    parts.push(new B256Coder().encode(value.contractId));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptPanic, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const reason = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n\n    return [\n      {\n        type: ReceiptType.Panic,\n        id,\n        reason,\n        pc,\n        is,\n        contractId,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptRevert = {\n  type: ReceiptType.Revert;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptRevertCoder extends Coder<ReceiptRevert, ReceiptRevert> {\n  constructor() {\n    super('ReceiptRevert', 'struct ReceiptRevert', 0);\n  }\n\n  encode(value: ReceiptRevert): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.val));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptRevert, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Revert,\n        id,\n        val,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLog = {\n  type: ReceiptType.Log;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: BN;\n  /** Value of register $rB (u64) */\n  val1: BN;\n  /** Value of register $rC (u64) */\n  val2: BN;\n  /** Value of register $rD (u64) */\n  val3: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptLogCoder extends Coder<ReceiptLog, ReceiptLog> {\n  constructor() {\n    super('ReceiptLog', 'struct ReceiptLog', 0);\n  }\n\n  encode(value: ReceiptLog): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.val0));\n    parts.push(new U64Coder().encode(value.val1));\n    parts.push(new U64Coder().encode(value.val2));\n    parts.push(new U64Coder().encode(value.val3));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLog, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val2 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val3 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Log,\n        id,\n        val0,\n        val1,\n        val2,\n        val3,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptLogData = {\n  type: ReceiptType.LogData;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  id: string;\n  /** Value of register $rA (u64) */\n  val0: BN;\n  /** Value of register $rB (u64) */\n  val1: BN;\n  /** Value of register $rC (u64) */\n  ptr: BN;\n  /** Value of register $rD (u64) */\n  len: BN;\n  /** Hash of MEM[$rC, $rD] (b256) */\n  digest: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptLogDataCoder extends Coder<ReceiptLogData, ReceiptLogData> {\n  constructor() {\n    super('ReceiptLogData', 'struct ReceiptLogData', 0);\n  }\n\n  encode(value: ReceiptLogData): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.id));\n    parts.push(new U64Coder().encode(value.val0));\n    parts.push(new U64Coder().encode(value.val1));\n    parts.push(new U64Coder().encode(value.ptr));\n    parts.push(new U64Coder().encode(value.len));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptLogData, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const id = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val0 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val1 = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const ptr = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.LogData,\n        id,\n        val0,\n        val1,\n        ptr,\n        len,\n        digest,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransfer = {\n  type: ReceiptType.Transfer;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Contract ID of contract to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptTransferCoder extends Coder<ReceiptTransfer, ReceiptTransfer> {\n  constructor() {\n    super('ReceiptTransfer', 'struct ReceiptTransfer', 0);\n  }\n\n  encode(value: ReceiptTransfer): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransfer, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.Transfer,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptTransferOut = {\n  type: ReceiptType.TransferOut;\n  /** Contract ID of current context if in an internal context, zero otherwise (b256) */\n  from: string;\n  /** Address to transfer coins to (b256) */\n  to: string;\n  /** Amount of coins transferred (u64) */\n  amount: BN;\n  /** Asset ID of coins transferred (b256) */\n  assetId: string;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptTransferOutCoder extends Coder<ReceiptTransferOut, ReceiptTransferOut> {\n  constructor() {\n    super('ReceiptTransferOut', 'struct ReceiptTransferOut', 0);\n  }\n\n  encode(value: ReceiptTransferOut): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.from));\n    parts.push(new B256Coder().encode(value.to));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.assetId));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptTransferOut, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const from = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const to = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const assetId = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    return [\n      {\n        type: ReceiptType.TransferOut,\n        from,\n        to,\n        amount,\n        assetId,\n        pc,\n        is,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptScriptResult = {\n  type: ReceiptType.ScriptResult;\n  /** Result variant with embedded `PanicReason` in first 8 bits and `instr` (u64) */\n  result: BN;\n  /** Gas consumed by the script (u64) */\n  gasUsed: BN;\n};\n\nexport class ReceiptScriptResultCoder extends Coder<ReceiptScriptResult, ReceiptScriptResult> {\n  constructor() {\n    super('ReceiptScriptResult', 'struct ReceiptScriptResult', 0);\n  }\n\n  encode(value: ReceiptScriptResult): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new U64Coder().encode(value.result));\n    parts.push(new U64Coder().encode(value.gasUsed));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptScriptResult, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new U64Coder().decode(data, o);\n    const result = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gasUsed = decoded;\n\n    return [\n      {\n        type: ReceiptType.ScriptResult,\n        result,\n        gasUsed,\n      },\n      o,\n    ];\n  }\n}\n\nexport type ReceiptMessageOut = {\n  type: ReceiptType.MessageOut;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message ID */\n  messageId: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message sender: MEM[$fp, 32] */\n  sender: string;\n  /** Hexadecimal string representation of the 256-bit (32-byte) address of the message recipient: MEM[$rA, 32] */\n  recipient: string;\n  /** Hexadecimal string representation of a 64-bit unsigned integer; value of register $rD */\n  amount: BN;\n  /** Hexadecimal string representation of the 256-bit (32-byte) message nonce */\n  nonce: string;\n  /** Hexadecimal string representation of 256-bit (32-byte), hash of MEM[$rA + 32, $rB] */\n  digest: string;\n  /** Hexadecimal string representation of the value of the memory range MEM[$rA + 32, $rB] */\n  data: Uint8Array;\n};\n\nexport class ReceiptMessageOutCoder extends Coder<ReceiptMessageOut, ReceiptMessageOut> {\n  constructor() {\n    super('ReceiptMessageOut', 'struct ReceiptMessageOut', 0);\n  }\n\n  static getMessageId(\n    value: Pick<ReceiptMessageOut, 'sender' | 'recipient' | 'nonce' | 'amount' | 'data'>\n  ): string {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new ByteArrayCoder(32).encode(value.sender));\n    parts.push(new ByteArrayCoder(32).encode(value.recipient));\n    parts.push(new ByteArrayCoder(32).encode(value.nonce));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(arrayify(value.data || '0x'));\n\n    return sha256(concat(parts));\n  }\n\n  encode(value: Omit<ReceiptMessageOut, 'messageId'>): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.sender));\n    parts.push(new B256Coder().encode(value.recipient));\n    parts.push(new U64Coder().encode(value.amount));\n    parts.push(new B256Coder().encode(value.nonce));\n    parts.push(new NumberCoder('u16').encode(value.data.length));\n    parts.push(new B256Coder().encode(value.digest));\n    parts.push(new ByteArrayCoder(value.data.length).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptMessageOut, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const sender = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const recipient = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const amount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const nonce = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const len = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const digest = decoded;\n    [decoded, o] = new ByteArrayCoder(len).decode(data, o);\n    const messageData = arrayify(decoded);\n\n    const receiptMessageOut: ReceiptMessageOut = {\n      type: ReceiptType.MessageOut,\n      messageId: '',\n      sender,\n      recipient,\n      amount,\n      nonce,\n      digest,\n      data: messageData,\n    };\n    receiptMessageOut.messageId = ReceiptMessageOutCoder.getMessageId(receiptMessageOut);\n\n    return [receiptMessageOut, o];\n  }\n}\n\nexport type ReceiptMint = {\n  type: ReceiptType.Mint;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nconst getAssetIdForMintAndBurnReceipts = (contractId: string, subId: string): string => {\n  const contractIdBytes = arrayify(contractId);\n  const subIdBytes = arrayify(subId);\n\n  return sha256(concat([contractIdBytes, subIdBytes]));\n};\n\nexport class ReceiptMintCoder extends Coder<ReceiptMint, ReceiptMint> {\n  constructor() {\n    super('ReceiptMint', 'struct ReceiptMint', 0);\n  }\n\n  static getAssetId(contractId: string, subId: string): string {\n    return getAssetIdForMintAndBurnReceipts(contractId, subId);\n  }\n\n  encode(value: ReceiptMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.subId));\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new U64Coder().encode(value.val));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const subId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    const assetId = ReceiptMintCoder.getAssetId(contractId, subId);\n\n    const receiptMint: ReceiptMint = {\n      type: ReceiptType.Mint,\n      subId,\n      contractId,\n      val,\n      pc,\n      is,\n      assetId,\n    };\n\n    return [receiptMint, o];\n  }\n}\n\nexport type ReceiptBurn = {\n  type: ReceiptType.Burn;\n\n  subId: string;\n\n  contractId: string;\n\n  assetId: string;\n\n  val: BN;\n  /** Value of register $pc (u64) */\n  pc: BN;\n  /** Value of register $is (u64) */\n  is: BN;\n};\n\nexport class ReceiptBurnCoder extends Coder<ReceiptBurn, ReceiptBurn> {\n  constructor() {\n    super('ReceiptBurn', 'struct ReceiptBurn', 0);\n  }\n\n  static getAssetId(contractId: string, subId: string): string {\n    return getAssetIdForMintAndBurnReceipts(contractId, subId);\n  }\n\n  encode(value: ReceiptBurn): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new B256Coder().encode(value.subId));\n    parts.push(new B256Coder().encode(value.contractId));\n    parts.push(new U64Coder().encode(value.val));\n    parts.push(new U64Coder().encode(value.pc));\n    parts.push(new U64Coder().encode(value.is));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [ReceiptBurn, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new B256Coder().decode(data, o);\n    const subId = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const contractId = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const val = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const pc = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const is = decoded;\n\n    const assetId = ReceiptMintCoder.getAssetId(contractId, subId);\n\n    const receiptBurn: ReceiptBurn = {\n      type: ReceiptType.Burn,\n      subId,\n      contractId,\n      val,\n      pc,\n      is,\n      assetId,\n    };\n\n    return [receiptBurn, o];\n  }\n}\n\nexport type Receipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | ReceiptReturnData\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | ReceiptLogData\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | ReceiptMint\n  | ReceiptBurn;\n\nexport class ReceiptCoder extends Coder<Receipt, Receipt> {\n  constructor() {\n    super('Receipt', 'struct Receipt', 0);\n  }\n\n  encode(value: Receipt): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case ReceiptType.Call: {\n        parts.push(new ReceiptCallCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Return: {\n        parts.push(new ReceiptReturnCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ReturnData: {\n        parts.push(new ReceiptReturnDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Panic: {\n        parts.push(new ReceiptPanicCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Revert: {\n        parts.push(new ReceiptRevertCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Log: {\n        parts.push(new ReceiptLogCoder().encode(value));\n        break;\n      }\n      case ReceiptType.LogData: {\n        parts.push(new ReceiptLogDataCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Transfer: {\n        parts.push(new ReceiptTransferCoder().encode(value));\n        break;\n      }\n      case ReceiptType.TransferOut: {\n        parts.push(new ReceiptTransferOutCoder().encode(value));\n        break;\n      }\n      case ReceiptType.ScriptResult: {\n        parts.push(new ReceiptScriptResultCoder().encode(value));\n        break;\n      }\n      case ReceiptType.MessageOut: {\n        parts.push(new ReceiptMessageOutCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Mint: {\n        parts.push(new ReceiptMintCoder().encode(value));\n        break;\n      }\n      case ReceiptType.Burn: {\n        parts.push(new ReceiptBurnCoder().encode(value));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Receipt type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Receipt, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as ReceiptType;\n    switch (type) {\n      case ReceiptType.Call: {\n        [decoded, o] = new ReceiptCallCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Return: {\n        [decoded, o] = new ReceiptReturnCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ReturnData: {\n        [decoded, o] = new ReceiptReturnDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Panic: {\n        [decoded, o] = new ReceiptPanicCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Revert: {\n        [decoded, o] = new ReceiptRevertCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Log: {\n        [decoded, o] = new ReceiptLogCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.LogData: {\n        [decoded, o] = new ReceiptLogDataCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Transfer: {\n        [decoded, o] = new ReceiptTransferCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.TransferOut: {\n        [decoded, o] = new ReceiptTransferOutCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.ScriptResult: {\n        [decoded, o] = new ReceiptScriptResultCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.MessageOut: {\n        [decoded, o] = new ReceiptMessageOutCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Mint: {\n        [decoded, o] = new ReceiptMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case ReceiptType.Burn: {\n        [decoded, o] = new ReceiptBurnCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Receipt type');\n      }\n    }\n  }\n}\n","import { B256Coder, StructCoder } from '@fuel-ts/abi-coder';\n\nexport type StorageSlot = {\n  /** Key (b256) */\n  key: string;\n  /** Value (b256) */\n  value: string;\n};\n\nexport class StorageSlotCoder extends StructCoder<{\n  key: B256Coder;\n  value: B256Coder;\n}> {\n  constructor() {\n    super('StorageSlot', {\n      key: new B256Coder(),\n      value: new B256Coder(),\n    });\n  }\n}\n","import { concat } from '@ethersproject/bytes';\nimport { Coder, NumberCoder } from '@fuel-ts/abi-coder';\n\nimport { ByteArrayCoder } from './byte-array';\n\nexport type Witness = {\n  /** Length of witness data, in bytes (u32) */\n  dataLength: number;\n  /** Witness data (byte[]) */\n  data: string;\n};\n\nexport class WitnessCoder extends Coder<Witness, Witness> {\n  constructor() {\n    super(\n      'Witness',\n      // Types of dynamic length are not supported in the ABI\n      'unknown',\n      0\n    );\n  }\n\n  encode(value: Witness): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u32').encode(value.dataLength));\n    parts.push(new ByteArrayCoder(value.dataLength).encode(value.data));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Witness, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const dataLength = decoded;\n    [decoded, o] = new ByteArrayCoder(dataLength).decode(data, o);\n    const witnessData = decoded;\n\n    return [\n      {\n        dataLength,\n        data: witnessData,\n      },\n      o,\n    ];\n  }\n}\n","/* eslint-disable max-classes-per-file */\n\nimport { concat } from '@ethersproject/bytes';\nimport { Coder, ArrayCoder, U64Coder, B256Coder, NumberCoder } from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\n\nimport { ByteArrayCoder } from './byte-array';\nimport type { Input } from './input';\nimport { InputCoder } from './input';\nimport type { Output } from './output';\nimport { OutputCoder } from './output';\nimport { StorageSlotCoder } from './storage-slot';\nimport type { StorageSlot } from './storage-slot';\nimport type { TxPointer } from './tx-pointer';\nimport { TxPointerCoder } from './tx-pointer';\nimport type { Witness } from './witness';\nimport { WitnessCoder } from './witness';\n\nexport enum TransactionType /* u8 */ {\n  Script = 0,\n  Create = 1,\n  Mint = 2,\n}\n\nexport type TransactionScript = {\n  type: TransactionType.Script;\n\n  /** Gas price for transaction (u64) */\n  gasPrice: BN;\n\n  /** Gas limit for transaction (u64) */\n  gasLimit: BN;\n\n  /** Block until which tx cannot be included (u32) */\n  maturity: number;\n\n  /** Script length, in instructions (u16) */\n  scriptLength: number;\n\n  /** Length of script input data, in bytes (u16) */\n  scriptDataLength: number;\n\n  /** Number of inputs (u8) */\n  inputsCount: number;\n\n  /** Number of outputs (u8) */\n  outputsCount: number;\n\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n\n  /** Merkle root of receipts (b256) */\n  receiptsRoot: string;\n\n  /** Script to execute (byte[]) */\n  script: string;\n\n  /** Script input data (parameters) (byte[]) */\n  scriptData: string;\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionScriptCoder extends Coder<TransactionScript, TransactionScript> {\n  constructor() {\n    super('TransactionScript', 'struct TransactionScript', 0);\n  }\n\n  encode(value: TransactionScript): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new U64Coder().encode(value.gasPrice));\n    parts.push(new U64Coder().encode(value.gasLimit));\n    parts.push(new NumberCoder('u32').encode(value.maturity));\n    parts.push(new NumberCoder('u16').encode(value.scriptLength));\n    parts.push(new NumberCoder('u16').encode(value.scriptDataLength));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.receiptsRoot));\n    parts.push(new ByteArrayCoder(value.scriptLength).encode(value.script));\n    parts.push(new ByteArrayCoder(value.scriptDataLength).encode(value.scriptData));\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionScript, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gasPrice = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gasLimit = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const scriptLength = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const scriptDataLength = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const receiptsRoot = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptLength).decode(data, o);\n    const script = decoded;\n    [decoded, o] = new ByteArrayCoder(scriptDataLength).decode(data, o);\n    const scriptData = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Script,\n        gasPrice,\n        gasLimit,\n        maturity,\n        scriptLength,\n        scriptDataLength,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        receiptsRoot,\n        script,\n        scriptData,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        inputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        outputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionCreate = {\n  type: TransactionType.Create;\n\n  /** Gas price for transaction (u64) */\n  gasPrice: BN;\n\n  /** Gas limit for transaction (u64) */\n  gasLimit: BN;\n\n  /** Block until which tx cannot be included (u32) */\n  maturity: number;\n\n  /** Contract bytecode length, in instructions (u16) */\n  bytecodeLength: number;\n\n  /** Witness index of contract bytecode to create (u8) */\n  bytecodeWitnessIndex: number;\n\n  /** Number of storage slots to initialize (u16) */\n  storageSlotsCount: number;\n\n  /** Number of inputs (u8) */\n  inputsCount: number;\n\n  /** Number of outputs (u8) */\n  outputsCount: number;\n\n  /** Number of witnesses (u8) */\n  witnessesCount: number;\n\n  /** Salt (b256) */\n  salt: string;\n\n  /** List of inputs (StorageSlot[]) */\n  storageSlots: StorageSlot[];\n\n  /** List of inputs (Input[]) */\n  inputs: Input[];\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** List of witnesses (Witness[]) */\n  witnesses: Witness[];\n};\n\nexport class TransactionCreateCoder extends Coder<TransactionCreate, TransactionCreate> {\n  constructor() {\n    super('TransactionCreate', 'struct TransactionCreate', 0);\n  }\n\n  encode(value: TransactionCreate): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new U64Coder().encode(value.gasPrice));\n    parts.push(new U64Coder().encode(value.gasLimit));\n    parts.push(new NumberCoder('u32').encode(value.maturity));\n    parts.push(new NumberCoder('u16').encode(value.bytecodeLength));\n    parts.push(new NumberCoder('u8').encode(value.bytecodeWitnessIndex));\n    parts.push(new NumberCoder('u16').encode(value.storageSlotsCount));\n    parts.push(new NumberCoder('u8').encode(value.inputsCount));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new NumberCoder('u8').encode(value.witnessesCount));\n    parts.push(new B256Coder().encode(value.salt));\n    parts.push(\n      new ArrayCoder(new StorageSlotCoder(), value.storageSlotsCount).encode(value.storageSlots)\n    );\n    parts.push(new ArrayCoder(new InputCoder(), value.inputsCount).encode(value.inputs));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n    parts.push(new ArrayCoder(new WitnessCoder(), value.witnessesCount).encode(value.witnesses));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionCreate, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gasPrice = decoded;\n    [decoded, o] = new U64Coder().decode(data, o);\n    const gasLimit = decoded;\n    [decoded, o] = new NumberCoder('u32').decode(data, o);\n    const maturity = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const bytecodeLength = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const bytecodeWitnessIndex = decoded;\n    [decoded, o] = new NumberCoder('u16').decode(data, o);\n    const storageSlotsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const inputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const witnessesCount = decoded;\n    [decoded, o] = new B256Coder().decode(data, o);\n    const salt = decoded;\n    [decoded, o] = new ArrayCoder(new StorageSlotCoder(), storageSlotsCount).decode(data, o);\n    const storageSlots = decoded;\n    [decoded, o] = new ArrayCoder(new InputCoder(), inputsCount).decode(data, o);\n    const inputs = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n    [decoded, o] = new ArrayCoder(new WitnessCoder(), witnessesCount).decode(data, o);\n    const witnesses = decoded;\n\n    return [\n      {\n        type: TransactionType.Create,\n        gasPrice,\n        gasLimit,\n        maturity,\n        bytecodeLength,\n        bytecodeWitnessIndex,\n        storageSlotsCount,\n        inputsCount,\n        outputsCount,\n        witnessesCount,\n        salt,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        storageSlots,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        inputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        outputs,\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        witnesses,\n      },\n      o,\n    ];\n  }\n}\n\nexport type TransactionMint = {\n  type: TransactionType.Mint;\n\n  /** Number of outputs (u8) */\n  outputsCount: number;\n\n  /** List of outputs (Output[]) */\n  outputs: Output[];\n\n  /** The location of the Mint transaction in the block. */\n  txPointer: TxPointer;\n};\n\nexport class TransactionMintCoder extends Coder<TransactionMint, TransactionMint> {\n  constructor() {\n    super('TransactionMint', 'struct TransactionMint', 0);\n  }\n\n  encode(value: TransactionMint): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new TxPointerCoder().encode(value.txPointer));\n    parts.push(new NumberCoder('u8').encode(value.outputsCount));\n    parts.push(new ArrayCoder(new OutputCoder(), value.outputsCount).encode(value.outputs));\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [TransactionMint, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new TxPointerCoder().decode(data, o);\n    const txPointer = decoded;\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const outputsCount = decoded;\n    [decoded, o] = new ArrayCoder(new OutputCoder(), outputsCount).decode(data, o);\n    const outputs = decoded;\n\n    return [\n      {\n        type: TransactionType.Mint,\n        outputsCount,\n        outputs,\n        txPointer,\n      },\n      o,\n    ];\n  }\n}\ntype PossibleTransactions = TransactionScript | TransactionCreate | TransactionMint;\nexport type Transaction<TTransactionType = void> = TTransactionType extends TransactionType\n  ? Extract<PossibleTransactions, { type: TTransactionType }>\n  : Partial<Omit<TransactionScript, 'type'>> &\n      Partial<Omit<TransactionCreate, 'type'>> &\n      Partial<Omit<TransactionMint, 'type'>> & {\n        type: TransactionType;\n      };\n\nexport class TransactionCoder extends Coder<Transaction, Transaction> {\n  constructor() {\n    super('Transaction', 'struct Transaction', 0);\n  }\n\n  encode(value: Transaction): Uint8Array {\n    const parts: Uint8Array[] = [];\n\n    parts.push(new NumberCoder('u8').encode(value.type));\n    switch (value.type) {\n      case TransactionType.Script: {\n        parts.push(\n          new TransactionScriptCoder().encode(value as Transaction<TransactionType.Script>)\n        );\n        break;\n      }\n      case TransactionType.Create: {\n        parts.push(\n          new TransactionCreateCoder().encode(value as Transaction<TransactionType.Create>)\n        );\n        break;\n      }\n      case TransactionType.Mint: {\n        parts.push(new TransactionMintCoder().encode(value as Transaction<TransactionType.Mint>));\n        break;\n      }\n      default: {\n        throw new Error('Invalid Transaction type');\n      }\n    }\n\n    return concat(parts);\n  }\n\n  decode(data: Uint8Array, offset: number): [Transaction, number] {\n    let decoded;\n    let o = offset;\n\n    [decoded, o] = new NumberCoder('u8').decode(data, o);\n    const type = decoded as TransactionType;\n\n    switch (type) {\n      case TransactionType.Script: {\n        [decoded, o] = new TransactionScriptCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Create: {\n        [decoded, o] = new TransactionCreateCoder().decode(data, o);\n        return [decoded, o];\n      }\n      case TransactionType.Mint: {\n        [decoded, o] = new TransactionMintCoder().decode(data, o);\n        return [decoded, o];\n      }\n      default: {\n        throw new Error('Invalid Transaction type');\n      }\n    }\n  }\n}\n","import { bn } from '@fuel-ts/math';\n\n/** Maximum contract size, in bytes. */\nexport const CONTRACT_MAX_SIZE = 16 * 1024;\n\n/** Maximum number of witnesses. */\nexport const MAX_WITNESSES = 16;\n\n/** Maximum gas per transaction. */\nexport const MAX_GAS_PER_TX = bn(500000000);\n\n/**\n * Gas Price factor this is used to calculate\n * This is used to calculate the gas fee in Native Coins.\n * Ex.: transactionFee = Math.ceil(<gasUsed> / MAX_GAS_PER_TX);\n */\nexport const GAS_PRICE_FACTOR = bn(1000000000);\n\n/** Gas charged per byte of the transaction. */\nexport const GAS_PER_BYTE = bn(4);\n\n// TODO: set max script length const\n/** Maximum length of script, in instructions. */\nexport const MAX_SCRIPT_LENGTH = 1024 * 1024 * 1024;\n\n// TODO: set max script length const\n/** Maximum length of script data, in bytes. */\nexport const MAX_SCRIPT_DATA_LENGTH = 1024 * 1024 * 1024;\n\n/** Maximum number of static contracts. */\nexport const MAX_STATIC_CONTRACTS = 255;\n\n// TODO: set max predicate length value\n/** Maximum length of predicate, in instructions. */\nexport const MAX_PREDICATE_LENGTH = 1024 * 1024;\n\n// TODO: set max predicate data length value\n/** Maximum length of predicate data, in bytes. */\nexport const MAX_PREDICATE_DATA_LENGTH = 1024 * 1024;\n\n// Revert with this value for a failing call to `std::revert::require`.\nexport const FAILED_REQUIRE_SIGNAL = '0xffffffffffff0000';\n\n// Revert with this value for a failing call to `std::token::transfer_to_address`.\nexport const FAILED_TRANSFER_TO_ADDRESS_SIGNAL = '0xffffffffffff0001';\n\n// Revert with this value for a failing call to `std::message::send_message`.\nexport const FAILED_SEND_MESSAGE_SIGNAL = '0xffffffffffff0002';\n\n// Revert with this value for a failing call to `std::assert::assert_eq`.\nexport const FAILED_ASSERT_EQ_SIGNAL = '0xffffffffffff0003';\n\n// Revert with this value for a failing call to `std::assert::assert`.\nexport const FAILED_ASSERT_SIGNAL = '0xffffffffffff0004';\n\nexport const FAILED_UNKNOWN_SIGNAL = '0x0';\n","export const ZeroBytes32 = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const BaseAssetId = ZeroBytes32;\nexport const EmptyRoot = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify } from '@ethersproject/bytes';\nimport { BaseAssetId } from '@fuel-ts/address/configs';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\n\nexport type CoinQuantityLike =\n  | [amount: BigNumberish, assetId?: BytesLike, max?: BigNumberish]\n  | { amount: BigNumberish; assetId?: BytesLike; max?: BigNumberish };\nexport type CoinQuantity = { amount: BN; assetId: string; max?: BN };\n\n/** @hidden */\nexport const coinQuantityfy = (coinQuantityLike: CoinQuantityLike): CoinQuantity => {\n  let assetId;\n  let amount;\n  let max;\n  if (Array.isArray(coinQuantityLike)) {\n    amount = coinQuantityLike[0];\n    assetId = coinQuantityLike[1] ?? BaseAssetId;\n    max = coinQuantityLike[2] ?? undefined;\n  } else {\n    amount = coinQuantityLike.amount;\n    assetId = coinQuantityLike.assetId ?? BaseAssetId;\n    max = coinQuantityLike.max ?? undefined;\n  }\n\n  return {\n    assetId: hexlify(assetId),\n    amount: bn(amount),\n    max: max ? bn(max) : undefined,\n  };\n};\n","import type { GraphQLClient } from 'graphql-request';\nimport type * as Dom from 'graphql-request/dist/types.dom';\nimport gql from 'graphql-tag';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: string;\n  AssetId: string;\n  BlockId: string;\n  Bytes32: string;\n  ContractId: string;\n  HexString: string;\n  MessageId: any;\n  Nonce: string;\n  Salt: string;\n  Signature: any;\n  Tai64Timestamp: any;\n  TransactionId: string;\n  TxPointer: any;\n  U32: any;\n  U64: string;\n  UtxoId: string;\n};\n\nexport type GqlBalance = {\n  __typename: 'Balance';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  owner: Scalars['Address'];\n};\n\nexport type GqlBalanceConnection = {\n  __typename: 'BalanceConnection';\n  /** A list of edges. */\n  edges: Array<GqlBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBalanceEdge = {\n  __typename: 'BalanceEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlBalance;\n};\n\nexport type GqlBalanceFilterInput = {\n  /** Filter coins based on the `owner` field */\n  owner: Scalars['Address'];\n};\n\nexport type GqlBlock = {\n  __typename: 'Block';\n  consensus: GqlConsensus;\n  header: GqlHeader;\n  id: Scalars['BlockId'];\n  transactions: Array<GqlTransaction>;\n};\n\nexport type GqlBlockConnection = {\n  __typename: 'BlockConnection';\n  /** A list of edges. */\n  edges: Array<GqlBlockEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlBlock>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlBlockEdge = {\n  __typename: 'BlockEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlBlock;\n};\n\nexport type GqlChainInfo = {\n  __typename: 'ChainInfo';\n  baseChainHeight: Scalars['U32'];\n  consensusParameters: GqlConsensusParameters;\n  gasCosts: GqlGasCosts;\n  latestBlock: GqlBlock;\n  name: Scalars['String'];\n  peerCount: Scalars['Int'];\n};\n\nexport type GqlChangeOutput = {\n  __typename: 'ChangeOutput';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  to: Scalars['Address'];\n};\n\nexport type GqlCoin = {\n  __typename: 'Coin';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  /** TxPointer - the height of the block this coin was created in */\n  blockCreated: Scalars['U32'];\n  maturity: Scalars['U32'];\n  owner: Scalars['Address'];\n  /** TxPointer - the index of the transaction that created this coin */\n  txCreatedIdx: Scalars['U64'];\n  utxoId: Scalars['UtxoId'];\n};\n\nexport type GqlCoinConnection = {\n  __typename: 'CoinConnection';\n  /** A list of edges. */\n  edges: Array<GqlCoinEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlCoin>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlCoinEdge = {\n  __typename: 'CoinEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlCoin;\n};\n\nexport type GqlCoinFilterInput = {\n  /** Returns coins only with `asset_id`. */\n  assetId?: InputMaybe<Scalars['AssetId']>;\n  /** Returns coins owned by the `owner`. */\n  owner: Scalars['Address'];\n};\n\nexport type GqlCoinOutput = {\n  __typename: 'CoinOutput';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  to: Scalars['Address'];\n};\n\n/** The schema analog of the [`coins::CoinType`]. */\nexport type GqlCoinType = GqlCoin | GqlMessageCoin;\n\nexport type GqlConsensus = GqlGenesis | GqlPoAConsensus;\n\nexport type GqlConsensusParameters = {\n  __typename: 'ConsensusParameters';\n  chainId: Scalars['U64'];\n  contractMaxSize: Scalars['U64'];\n  gasPerByte: Scalars['U64'];\n  gasPriceFactor: Scalars['U64'];\n  maxGasPerPredicate: Scalars['U64'];\n  maxGasPerTx: Scalars['U64'];\n  maxInputs: Scalars['U64'];\n  maxMessageDataLength: Scalars['U64'];\n  maxOutputs: Scalars['U64'];\n  maxPredicateDataLength: Scalars['U64'];\n  maxPredicateLength: Scalars['U64'];\n  maxScriptDataLength: Scalars['U64'];\n  maxScriptLength: Scalars['U64'];\n  maxStorageSlots: Scalars['U64'];\n  maxWitnesses: Scalars['U64'];\n};\n\nexport type GqlContract = {\n  __typename: 'Contract';\n  bytecode: Scalars['HexString'];\n  id: Scalars['ContractId'];\n  salt: Scalars['Salt'];\n};\n\nexport type GqlContractBalance = {\n  __typename: 'ContractBalance';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  contract: Scalars['ContractId'];\n};\n\nexport type GqlContractBalanceConnection = {\n  __typename: 'ContractBalanceConnection';\n  /** A list of edges. */\n  edges: Array<GqlContractBalanceEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlContractBalance>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlContractBalanceEdge = {\n  __typename: 'ContractBalanceEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlContractBalance;\n};\n\nexport type GqlContractBalanceFilterInput = {\n  /** Filter assets based on the `contractId` field */\n  contract: Scalars['ContractId'];\n};\n\nexport type GqlContractCreated = {\n  __typename: 'ContractCreated';\n  contract: GqlContract;\n  stateRoot: Scalars['Bytes32'];\n};\n\nexport type GqlContractOutput = {\n  __typename: 'ContractOutput';\n  balanceRoot: Scalars['Bytes32'];\n  inputIndex: Scalars['Int'];\n  stateRoot: Scalars['Bytes32'];\n};\n\nexport type GqlDependentCost = {\n  __typename: 'DependentCost';\n  base: Scalars['U64'];\n  depPerUnit: Scalars['U64'];\n};\n\nexport type GqlExcludeInput = {\n  /** Messages to exclude from the selection. */\n  messages: Array<Scalars['Nonce']>;\n  /** Utxos to exclude from the selection. */\n  utxos: Array<Scalars['UtxoId']>;\n};\n\nexport type GqlFailureStatus = {\n  __typename: 'FailureStatus';\n  block: GqlBlock;\n  programState?: Maybe<GqlProgramState>;\n  reason: Scalars['String'];\n  time: Scalars['Tai64Timestamp'];\n};\n\nexport type GqlGasCosts = {\n  __typename: 'GasCosts';\n  add: Scalars['U64'];\n  addi: Scalars['U64'];\n  aloc: Scalars['U64'];\n  and: Scalars['U64'];\n  andi: Scalars['U64'];\n  bal: Scalars['U64'];\n  bhei: Scalars['U64'];\n  bhsh: Scalars['U64'];\n  burn: Scalars['U64'];\n  call: GqlDependentCost;\n  cb: Scalars['U64'];\n  ccp: GqlDependentCost;\n  cfei: Scalars['U64'];\n  cfsi: Scalars['U64'];\n  croo: Scalars['U64'];\n  csiz: GqlDependentCost;\n  div: Scalars['U64'];\n  divi: Scalars['U64'];\n  eck1: Scalars['U64'];\n  ecr1: Scalars['U64'];\n  ed19: Scalars['U64'];\n  eq: Scalars['U64'];\n  exp: Scalars['U64'];\n  expi: Scalars['U64'];\n  flag: Scalars['U64'];\n  gm: Scalars['U64'];\n  gt: Scalars['U64'];\n  gtf: Scalars['U64'];\n  ji: Scalars['U64'];\n  jmp: Scalars['U64'];\n  jmpb: Scalars['U64'];\n  jmpf: Scalars['U64'];\n  jne: Scalars['U64'];\n  jneb: Scalars['U64'];\n  jnef: Scalars['U64'];\n  jnei: Scalars['U64'];\n  jnzb: Scalars['U64'];\n  jnzf: Scalars['U64'];\n  jnzi: Scalars['U64'];\n  k256: Scalars['U64'];\n  lb: Scalars['U64'];\n  ldc: GqlDependentCost;\n  log: Scalars['U64'];\n  logd: GqlDependentCost;\n  lt: Scalars['U64'];\n  lw: Scalars['U64'];\n  mcl: GqlDependentCost;\n  mcli: GqlDependentCost;\n  mcp: GqlDependentCost;\n  mcpi: Scalars['U64'];\n  meq: GqlDependentCost;\n  mint: Scalars['U64'];\n  mldv: Scalars['U64'];\n  mlog: Scalars['U64'];\n  modOp: Scalars['U64'];\n  modi: Scalars['U64'];\n  moveOp: Scalars['U64'];\n  movi: Scalars['U64'];\n  mroo: Scalars['U64'];\n  mul: Scalars['U64'];\n  muli: Scalars['U64'];\n  noop: Scalars['U64'];\n  not: Scalars['U64'];\n  or: Scalars['U64'];\n  ori: Scalars['U64'];\n  ret: Scalars['U64'];\n  retd: GqlDependentCost;\n  rvrt: Scalars['U64'];\n  s256: Scalars['U64'];\n  sb: Scalars['U64'];\n  scwq: Scalars['U64'];\n  sll: Scalars['U64'];\n  slli: Scalars['U64'];\n  smo: GqlDependentCost;\n  srl: Scalars['U64'];\n  srli: Scalars['U64'];\n  srw: Scalars['U64'];\n  srwq: GqlDependentCost;\n  sub: Scalars['U64'];\n  subi: Scalars['U64'];\n  sw: Scalars['U64'];\n  sww: Scalars['U64'];\n  swwq: Scalars['U64'];\n  time: Scalars['U64'];\n  tr: Scalars['U64'];\n  tro: Scalars['U64'];\n  wdam: Scalars['U64'];\n  wdcm: Scalars['U64'];\n  wddv: Scalars['U64'];\n  wdmd: Scalars['U64'];\n  wdml: Scalars['U64'];\n  wdmm: Scalars['U64'];\n  wdop: Scalars['U64'];\n  wqam: Scalars['U64'];\n  wqcm: Scalars['U64'];\n  wqdv: Scalars['U64'];\n  wqmd: Scalars['U64'];\n  wqml: Scalars['U64'];\n  wqmm: Scalars['U64'];\n  wqop: Scalars['U64'];\n  xor: Scalars['U64'];\n  xori: Scalars['U64'];\n};\n\nexport type GqlGenesis = {\n  __typename: 'Genesis';\n  /**\n   * The chain configs define what consensus type to use, what settlement layer to use,\n   * rules of block validity, etc.\n   */\n  chainConfigHash: Scalars['Bytes32'];\n  /** The Binary Merkle Tree root of all genesis coins. */\n  coinsRoot: Scalars['Bytes32'];\n  /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */\n  contractsRoot: Scalars['Bytes32'];\n  /** The Binary Merkle Tree root of all genesis messages. */\n  messagesRoot: Scalars['Bytes32'];\n};\n\nexport type GqlHeader = {\n  __typename: 'Header';\n  /** Hash of the application header. */\n  applicationHash: Scalars['Bytes32'];\n  /** The layer 1 height of messages and events to include since the last layer 1 block number. */\n  daHeight: Scalars['U64'];\n  /** Fuel block height. */\n  height: Scalars['U32'];\n  /** Hash of the header */\n  id: Scalars['BlockId'];\n  /** Number of message receipts in this block. */\n  messageReceiptCount: Scalars['U64'];\n  /** Merkle root of message receipts in this block. */\n  messageReceiptRoot: Scalars['Bytes32'];\n  /** Merkle root of all previous block header hashes. */\n  prevRoot: Scalars['Bytes32'];\n  /** The block producer time. */\n  time: Scalars['Tai64Timestamp'];\n  /** Number of transactions in this block. */\n  transactionsCount: Scalars['U64'];\n  /** Merkle root of transactions. */\n  transactionsRoot: Scalars['Bytes32'];\n};\n\nexport type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;\n\nexport type GqlInputCoin = {\n  __typename: 'InputCoin';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  maturity: Scalars['U32'];\n  owner: Scalars['Address'];\n  predicate: Scalars['HexString'];\n  predicateData: Scalars['HexString'];\n  predicateGasUsed: Scalars['U64'];\n  txPointer: Scalars['TxPointer'];\n  utxoId: Scalars['UtxoId'];\n  witnessIndex: Scalars['Int'];\n};\n\nexport type GqlInputContract = {\n  __typename: 'InputContract';\n  balanceRoot: Scalars['Bytes32'];\n  contract: GqlContract;\n  stateRoot: Scalars['Bytes32'];\n  txPointer: Scalars['TxPointer'];\n  utxoId: Scalars['UtxoId'];\n};\n\nexport type GqlInputMessage = {\n  __typename: 'InputMessage';\n  amount: Scalars['U64'];\n  data: Scalars['HexString'];\n  nonce: Scalars['Nonce'];\n  predicate: Scalars['HexString'];\n  predicateData: Scalars['HexString'];\n  predicateGasUsed: Scalars['U64'];\n  recipient: Scalars['Address'];\n  sender: Scalars['Address'];\n  witnessIndex: Scalars['Int'];\n};\n\nexport type GqlMerkleProof = {\n  __typename: 'MerkleProof';\n  proofIndex: Scalars['U64'];\n  proofSet: Array<Scalars['Bytes32']>;\n};\n\nexport type GqlMessage = {\n  __typename: 'Message';\n  amount: Scalars['U64'];\n  daHeight: Scalars['U64'];\n  data: Scalars['HexString'];\n  nonce: Scalars['Nonce'];\n  recipient: Scalars['Address'];\n  sender: Scalars['Address'];\n};\n\nexport type GqlMessageCoin = {\n  __typename: 'MessageCoin';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  daHeight: Scalars['U64'];\n  nonce: Scalars['Nonce'];\n  recipient: Scalars['Address'];\n  sender: Scalars['Address'];\n};\n\nexport type GqlMessageConnection = {\n  __typename: 'MessageConnection';\n  /** A list of edges. */\n  edges: Array<GqlMessageEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlMessage>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlMessageEdge = {\n  __typename: 'MessageEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlMessage;\n};\n\nexport type GqlMessageProof = {\n  __typename: 'MessageProof';\n  amount: Scalars['U64'];\n  blockProof: GqlMerkleProof;\n  commitBlockHeader: GqlHeader;\n  data: Scalars['HexString'];\n  messageBlockHeader: GqlHeader;\n  messageProof: GqlMerkleProof;\n  nonce: Scalars['Nonce'];\n  recipient: Scalars['Address'];\n  sender: Scalars['Address'];\n};\n\nexport type GqlMutation = {\n  __typename: 'Mutation';\n  /** Execute a dry-run of the transaction using a fork of current state, no changes are committed. */\n  dryRun: Array<GqlReceipt>;\n  /**\n   * Sequentially produces `blocks_to_produce` blocks. The first block starts with\n   * `start_timestamp`. If the block production in the [`crate::service::Config`] is\n   * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between\n   * them. The `start_timestamp` is the timestamp in seconds.\n   */\n  produceBlocks: Scalars['U32'];\n  /**\n   * Submits transaction to the `TxPool`.\n   *\n   * Returns submitted transaction if the transaction is included in the `TxPool` without problems.\n   */\n  submit: GqlTransaction;\n};\n\n\nexport type GqlMutationDryRunArgs = {\n  tx: Scalars['HexString'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']>;\n};\n\n\nexport type GqlMutationProduceBlocksArgs = {\n  blocksToProduce: Scalars['U64'];\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']>;\n};\n\n\nexport type GqlMutationSubmitArgs = {\n  tx: Scalars['HexString'];\n};\n\nexport type GqlNodeInfo = {\n  __typename: 'NodeInfo';\n  maxDepth: Scalars['U64'];\n  maxTx: Scalars['U64'];\n  minGasPrice: Scalars['U64'];\n  nodeVersion: Scalars['String'];\n  utxoValidation: Scalars['Boolean'];\n  vmBacktrace: Scalars['Boolean'];\n};\n\nexport type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;\n\n/** Information about pagination in a connection */\nexport type GqlPageInfo = {\n  __typename: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type GqlPoAConsensus = {\n  __typename: 'PoAConsensus';\n  /** Gets the signature of the block produced by `PoA` consensus. */\n  signature: Scalars['Signature'];\n};\n\nexport type GqlProgramState = {\n  __typename: 'ProgramState';\n  data: Scalars['HexString'];\n  returnType: GqlReturnType;\n};\n\nexport type GqlQuery = {\n  __typename: 'Query';\n  balance: GqlBalance;\n  balances: GqlBalanceConnection;\n  block?: Maybe<GqlBlock>;\n  blocks: GqlBlockConnection;\n  chain: GqlChainInfo;\n  /** Gets the coin by `utxo_id`. */\n  coin?: Maybe<GqlCoin>;\n  /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */\n  coins: GqlCoinConnection;\n  /**\n   * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by\n   * `owner` that add up at least the query amount. The returned coins can be spent.\n   * The number of coins is optimized to prevent dust accumulation.\n   *\n   * The query supports excluding and maximum the number of coins.\n   *\n   * Returns:\n   * The list of spendable coins per asset from the query. The length of the result is\n   * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`\n   * is the same.\n   */\n  coinsToSpend: Array<Array<GqlCoinType>>;\n  contract?: Maybe<GqlContract>;\n  contractBalance: GqlContractBalance;\n  contractBalances: GqlContractBalanceConnection;\n  /** Estimate the predicate gas for the provided transaction */\n  estimatePredicates: GqlTransaction;\n  /** Returns true when the GraphQL API is serving requests. */\n  health: Scalars['Boolean'];\n  messageProof?: Maybe<GqlMessageProof>;\n  messages: GqlMessageConnection;\n  nodeInfo: GqlNodeInfo;\n  transaction?: Maybe<GqlTransaction>;\n  transactions: GqlTransactionConnection;\n  transactionsByOwner: GqlTransactionConnection;\n};\n\n\nexport type GqlQueryBalanceArgs = {\n  assetId: Scalars['AssetId'];\n  owner: Scalars['Address'];\n};\n\n\nexport type GqlQueryBalancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filter: GqlBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type GqlQueryBlockArgs = {\n  height?: InputMaybe<Scalars['U64']>;\n  id?: InputMaybe<Scalars['BlockId']>;\n};\n\n\nexport type GqlQueryBlocksArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type GqlQueryCoinArgs = {\n  utxoId: Scalars['UtxoId'];\n};\n\n\nexport type GqlQueryCoinsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filter: GqlCoinFilterInput;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type GqlQueryCoinsToSpendArgs = {\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n  owner: Scalars['Address'];\n  queryPerAsset: Array<GqlSpendQueryElementInput>;\n};\n\n\nexport type GqlQueryContractArgs = {\n  id: Scalars['ContractId'];\n};\n\n\nexport type GqlQueryContractBalanceArgs = {\n  asset: Scalars['AssetId'];\n  contract: Scalars['ContractId'];\n};\n\n\nexport type GqlQueryContractBalancesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  filter: GqlContractBalanceFilterInput;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type GqlQueryEstimatePredicatesArgs = {\n  tx: Scalars['HexString'];\n};\n\n\nexport type GqlQueryMessageProofArgs = {\n  commitBlockHeight?: InputMaybe<Scalars['U32']>;\n  commitBlockId?: InputMaybe<Scalars['BlockId']>;\n  messageId: Scalars['MessageId'];\n  transactionId: Scalars['TransactionId'];\n};\n\n\nexport type GqlQueryMessagesArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  owner?: InputMaybe<Scalars['Address']>;\n};\n\n\nexport type GqlQueryTransactionArgs = {\n  id: Scalars['TransactionId'];\n};\n\n\nexport type GqlQueryTransactionsArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n};\n\n\nexport type GqlQueryTransactionsByOwnerArgs = {\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n  owner: Scalars['Address'];\n};\n\nexport type GqlReceipt = {\n  __typename: 'Receipt';\n  amount?: Maybe<Scalars['U64']>;\n  assetId?: Maybe<Scalars['AssetId']>;\n  contract?: Maybe<GqlContract>;\n  contractId?: Maybe<Scalars['ContractId']>;\n  data?: Maybe<Scalars['HexString']>;\n  digest?: Maybe<Scalars['Bytes32']>;\n  gas?: Maybe<Scalars['U64']>;\n  gasUsed?: Maybe<Scalars['U64']>;\n  is?: Maybe<Scalars['U64']>;\n  len?: Maybe<Scalars['U64']>;\n  nonce?: Maybe<Scalars['Nonce']>;\n  param1?: Maybe<Scalars['U64']>;\n  param2?: Maybe<Scalars['U64']>;\n  pc?: Maybe<Scalars['U64']>;\n  ptr?: Maybe<Scalars['U64']>;\n  ra?: Maybe<Scalars['U64']>;\n  rb?: Maybe<Scalars['U64']>;\n  rc?: Maybe<Scalars['U64']>;\n  rd?: Maybe<Scalars['U64']>;\n  reason?: Maybe<Scalars['U64']>;\n  receiptType: GqlReceiptType;\n  recipient?: Maybe<Scalars['Address']>;\n  result?: Maybe<Scalars['U64']>;\n  sender?: Maybe<Scalars['Address']>;\n  subId?: Maybe<Scalars['Bytes32']>;\n  to?: Maybe<GqlContract>;\n  toAddress?: Maybe<Scalars['Address']>;\n  val?: Maybe<Scalars['U64']>;\n};\n\nexport enum GqlReceiptType {\n  Burn = 'BURN',\n  Call = 'CALL',\n  Log = 'LOG',\n  LogData = 'LOG_DATA',\n  MessageOut = 'MESSAGE_OUT',\n  Mint = 'MINT',\n  Panic = 'PANIC',\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT',\n  ScriptResult = 'SCRIPT_RESULT',\n  Transfer = 'TRANSFER',\n  TransferOut = 'TRANSFER_OUT'\n}\n\nexport enum GqlReturnType {\n  Return = 'RETURN',\n  ReturnData = 'RETURN_DATA',\n  Revert = 'REVERT'\n}\n\nexport type GqlSpendQueryElementInput = {\n  /** Target amount for the query. */\n  amount: Scalars['U64'];\n  /** Identifier of the asset to spend. */\n  assetId: Scalars['AssetId'];\n  /** The maximum number of currencies for selection. */\n  max?: InputMaybe<Scalars['U64']>;\n};\n\nexport type GqlSqueezedOutStatus = {\n  __typename: 'SqueezedOutStatus';\n  reason: Scalars['String'];\n};\n\nexport type GqlSubmittedStatus = {\n  __typename: 'SubmittedStatus';\n  time: Scalars['Tai64Timestamp'];\n};\n\nexport type GqlSubscription = {\n  __typename: 'Subscription';\n  /**\n   * Returns a stream of status updates for the given transaction id.\n   * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::SqueezedOut`]\n   * or [`TransactionStatus::Failed`] the stream will return that and end immediately.\n   * If the current status is [`TransactionStatus::Submitted`] this will be returned\n   * and the stream will wait for a future update.\n   *\n   * This stream will wait forever so it's advised to use within a timeout.\n   *\n   * It is possible for the stream to miss an update if it is polled slower\n   * then the updates arrive. In such a case the stream will close without\n   * a status. If this occurs the stream can simply be restarted to return\n   * the latest status.\n   */\n  statusChange: GqlTransactionStatus;\n  /** Submits transaction to the `TxPool` and await either confirmation or failure. */\n  submitAndAwait: GqlTransactionStatus;\n};\n\n\nexport type GqlSubscriptionStatusChangeArgs = {\n  id: Scalars['TransactionId'];\n};\n\n\nexport type GqlSubscriptionSubmitAndAwaitArgs = {\n  tx: Scalars['HexString'];\n};\n\nexport type GqlSuccessStatus = {\n  __typename: 'SuccessStatus';\n  block: GqlBlock;\n  programState?: Maybe<GqlProgramState>;\n  time: Scalars['Tai64Timestamp'];\n};\n\nexport type GqlTransaction = {\n  __typename: 'Transaction';\n  bytecodeLength?: Maybe<Scalars['U64']>;\n  bytecodeWitnessIndex?: Maybe<Scalars['Int']>;\n  gasLimit?: Maybe<Scalars['U64']>;\n  gasPrice?: Maybe<Scalars['U64']>;\n  id: Scalars['TransactionId'];\n  inputAssetIds?: Maybe<Array<Scalars['AssetId']>>;\n  inputContracts?: Maybe<Array<GqlContract>>;\n  inputs?: Maybe<Array<GqlInput>>;\n  isCreate: Scalars['Boolean'];\n  isMint: Scalars['Boolean'];\n  isScript: Scalars['Boolean'];\n  maturity?: Maybe<Scalars['U32']>;\n  outputs: Array<GqlOutput>;\n  /** Return the transaction bytes using canonical encoding */\n  rawPayload: Scalars['HexString'];\n  receipts?: Maybe<Array<GqlReceipt>>;\n  receiptsRoot?: Maybe<Scalars['Bytes32']>;\n  salt?: Maybe<Scalars['Salt']>;\n  script?: Maybe<Scalars['HexString']>;\n  scriptData?: Maybe<Scalars['HexString']>;\n  status?: Maybe<GqlTransactionStatus>;\n  storageSlots?: Maybe<Array<Scalars['HexString']>>;\n  txPointer?: Maybe<Scalars['TxPointer']>;\n  witnesses?: Maybe<Array<Scalars['HexString']>>;\n};\n\nexport type GqlTransactionConnection = {\n  __typename: 'TransactionConnection';\n  /** A list of edges. */\n  edges: Array<GqlTransactionEdge>;\n  /** A list of nodes. */\n  nodes: Array<GqlTransaction>;\n  /** Information to aid in pagination. */\n  pageInfo: GqlPageInfo;\n};\n\n/** An edge in a connection. */\nexport type GqlTransactionEdge = {\n  __typename: 'TransactionEdge';\n  /** A cursor for use in pagination */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge */\n  node: GqlTransaction;\n};\n\nexport type GqlTransactionStatus = GqlFailureStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;\n\nexport type GqlVariableOutput = {\n  __typename: 'VariableOutput';\n  amount: Scalars['U64'];\n  assetId: Scalars['AssetId'];\n  to: Scalars['Address'];\n};\n\nexport type GqlTransactionFragmentFragment = { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null };\n\nexport type GqlContractFragmentFragment = { __typename: 'Contract', id: string, bytecode: string };\n\nexport type GqlReceiptFragmentFragment = { __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null };\n\nexport type GqlBlockFragmentFragment = { __typename: 'Block', id: string, header: { __typename: 'Header', height: any, time: any }, transactions: Array<{ __typename: 'Transaction', id: string }> };\n\nexport type GqlCoinFragmentFragment = { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: any, blockCreated: any, txCreatedIdx: string };\n\nexport type GqlMessageCoinFragmentFragment = { __typename: 'MessageCoin', sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string };\n\nexport type GqlMessageFragmentFragment = { __typename: 'Message', amount: string, sender: string, recipient: string, data: string, nonce: string, daHeight: string };\n\nexport type GqlMessageProofFragmentFragment = { __typename: 'MessageProof', sender: string, recipient: string, nonce: string, amount: string, data: string, messageProof: { __typename: 'MerkleProof', proofSet: Array<string>, proofIndex: string }, blockProof: { __typename: 'MerkleProof', proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { __typename: 'Header', id: string, daHeight: string, transactionsCount: string, transactionsRoot: string, height: any, prevRoot: string, time: any, applicationHash: string, messageReceiptRoot: string, messageReceiptCount: string }, commitBlockHeader: { __typename: 'Header', id: string, daHeight: string, transactionsCount: string, transactionsRoot: string, height: any, prevRoot: string, time: any, applicationHash: string, messageReceiptRoot: string, messageReceiptCount: string } };\n\nexport type GqlBalanceFragmentFragment = { __typename: 'Balance', owner: string, amount: string, assetId: string };\n\nexport type GqlConsensusParametersFragmentFragment = { __typename: 'ConsensusParameters', contractMaxSize: string, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxScriptLength: string, maxScriptDataLength: string, maxStorageSlots: string, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, gasPriceFactor: string, gasPerByte: string, maxMessageDataLength: string, chainId: string };\n\nexport type GqlChainInfoFragmentFragment = { __typename: 'ChainInfo', name: string, baseChainHeight: any, peerCount: number, consensusParameters: { __typename: 'ConsensusParameters', contractMaxSize: string, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxScriptLength: string, maxScriptDataLength: string, maxStorageSlots: string, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, gasPriceFactor: string, gasPerByte: string, maxMessageDataLength: string, chainId: string }, latestBlock: { __typename: 'Block', id: string, header: { __typename: 'Header', height: any, time: any }, transactions: Array<{ __typename: 'Transaction', id: string }> } };\n\nexport type GqlContractBalanceFragmentFragment = { __typename: 'ContractBalance', contract: string, amount: string, assetId: string };\n\nexport type GqlPageInfoFragmentFragment = { __typename: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null };\n\nexport type GqlGetVersionQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetVersionQuery = { __typename: 'Query', nodeInfo: { __typename: 'NodeInfo', nodeVersion: string } };\n\nexport type GqlGetInfoQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetInfoQuery = { __typename: 'Query', nodeInfo: { __typename: 'NodeInfo', nodeVersion: string, minGasPrice: string }, chain: { __typename: 'ChainInfo', consensusParameters: { __typename: 'ConsensusParameters', gasPerByte: string, maxGasPerTx: string, gasPriceFactor: string } } };\n\nexport type GqlGetChainQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type GqlGetChainQuery = { __typename: 'Query', chain: { __typename: 'ChainInfo', name: string, baseChainHeight: any, peerCount: number, consensusParameters: { __typename: 'ConsensusParameters', contractMaxSize: string, maxInputs: string, maxOutputs: string, maxWitnesses: string, maxGasPerTx: string, maxScriptLength: string, maxScriptDataLength: string, maxStorageSlots: string, maxPredicateLength: string, maxPredicateDataLength: string, maxGasPerPredicate: string, gasPriceFactor: string, gasPerByte: string, maxMessageDataLength: string, chainId: string }, latestBlock: { __typename: 'Block', id: string, header: { __typename: 'Header', height: any, time: any }, transactions: Array<{ __typename: 'Transaction', id: string }> } } };\n\nexport type GqlGetTransactionQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId'];\n}>;\n\n\nexport type GqlGetTransactionQuery = { __typename: 'Query', transaction?: { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null } | null };\n\nexport type GqlGetTransactionWithReceiptsQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId'];\n}>;\n\n\nexport type GqlGetTransactionWithReceiptsQuery = { __typename: 'Query', transaction?: { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null } | null, chain: { __typename: 'ChainInfo', consensusParameters: { __typename: 'ConsensusParameters', gasPerByte: string, gasPriceFactor: string } } };\n\nexport type GqlGetTransactionsQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetTransactionsQuery = { __typename: 'Query', transactions: { __typename: 'TransactionConnection', edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null } }> } };\n\nexport type GqlGetTransactionsByOwnerQueryVariables = Exact<{\n  owner: Scalars['Address'];\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetTransactionsByOwnerQuery = { __typename: 'Query', transactionsByOwner: { __typename: 'TransactionConnection', pageInfo: { __typename: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null } }> } };\n\nexport type GqlEstimatePredicatesQueryVariables = Exact<{\n  encodedTransaction: Scalars['HexString'];\n}>;\n\n\nexport type GqlEstimatePredicatesQuery = { __typename: 'Query', estimatePredicates: { __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null } };\n\nexport type GqlGetBlockQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']>;\n  blockHeight?: InputMaybe<Scalars['U64']>;\n}>;\n\n\nexport type GqlGetBlockQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, header: { __typename: 'Header', height: any, time: any }, transactions: Array<{ __typename: 'Transaction', id: string }> } | null };\n\nexport type GqlGetBlockWithTransactionsQueryVariables = Exact<{\n  blockId?: InputMaybe<Scalars['BlockId']>;\n  blockHeight?: InputMaybe<Scalars['U64']>;\n}>;\n\n\nexport type GqlGetBlockWithTransactionsQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, transactions: Array<{ __typename: 'Transaction', id: string, rawPayload: string, gasPrice?: string | null, receipts?: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> | null, status?: { __typename: 'FailureStatus', time: any, reason: string, type: 'FailureStatus', block: { __typename: 'Block', id: string } } | { __typename: 'SqueezedOutStatus', type: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: any, type: 'SubmittedStatus' } | { __typename: 'SuccessStatus', time: any, type: 'SuccessStatus', block: { __typename: 'Block', id: string }, programState?: { __typename: 'ProgramState', returnType: GqlReturnType, data: string } | null } | null }>, header: { __typename: 'Header', height: any, time: any } } | null };\n\nexport type GqlGetBlocksQueryVariables = Exact<{\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetBlocksQuery = { __typename: 'Query', blocks: { __typename: 'BlockConnection', edges: Array<{ __typename: 'BlockEdge', node: { __typename: 'Block', id: string, header: { __typename: 'Header', height: any, time: any }, transactions: Array<{ __typename: 'Transaction', id: string }> } }> } };\n\nexport type GqlGetCoinQueryVariables = Exact<{\n  coinId: Scalars['UtxoId'];\n}>;\n\n\nexport type GqlGetCoinQuery = { __typename: 'Query', coin?: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: any, blockCreated: any, txCreatedIdx: string } | null };\n\nexport type GqlGetCoinsQueryVariables = Exact<{\n  filter: GqlCoinFilterInput;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetCoinsQuery = { __typename: 'Query', coins: { __typename: 'CoinConnection', edges: Array<{ __typename: 'CoinEdge', node: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: any, blockCreated: any, txCreatedIdx: string } }> } };\n\nexport type GqlGetCoinsToSpendQueryVariables = Exact<{\n  owner: Scalars['Address'];\n  queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;\n  excludedIds?: InputMaybe<GqlExcludeInput>;\n}>;\n\n\nexport type GqlGetCoinsToSpendQuery = { __typename: 'Query', coinsToSpend: Array<Array<{ __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: any, blockCreated: any, txCreatedIdx: string } | { __typename: 'MessageCoin', sender: string, recipient: string, nonce: string, amount: string, assetId: string, daHeight: string }>> };\n\nexport type GqlGetContractQueryVariables = Exact<{\n  contractId: Scalars['ContractId'];\n}>;\n\n\nexport type GqlGetContractQuery = { __typename: 'Query', contract?: { __typename: 'Contract', bytecode: string, id: string } | null };\n\nexport type GqlGetContractBalanceQueryVariables = Exact<{\n  contract: Scalars['ContractId'];\n  asset: Scalars['AssetId'];\n}>;\n\n\nexport type GqlGetContractBalanceQuery = { __typename: 'Query', contractBalance: { __typename: 'ContractBalance', contract: string, amount: string, assetId: string } };\n\nexport type GqlGetBalanceQueryVariables = Exact<{\n  owner: Scalars['Address'];\n  assetId: Scalars['AssetId'];\n}>;\n\n\nexport type GqlGetBalanceQuery = { __typename: 'Query', balance: { __typename: 'Balance', owner: string, amount: string, assetId: string } };\n\nexport type GqlGetBalancesQueryVariables = Exact<{\n  filter: GqlBalanceFilterInput;\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetBalancesQuery = { __typename: 'Query', balances: { __typename: 'BalanceConnection', edges: Array<{ __typename: 'BalanceEdge', node: { __typename: 'Balance', owner: string, amount: string, assetId: string } }> } };\n\nexport type GqlGetMessagesQueryVariables = Exact<{\n  owner: Scalars['Address'];\n  after?: InputMaybe<Scalars['String']>;\n  before?: InputMaybe<Scalars['String']>;\n  first?: InputMaybe<Scalars['Int']>;\n  last?: InputMaybe<Scalars['Int']>;\n}>;\n\n\nexport type GqlGetMessagesQuery = { __typename: 'Query', messages: { __typename: 'MessageConnection', edges: Array<{ __typename: 'MessageEdge', node: { __typename: 'Message', amount: string, sender: string, recipient: string, data: string, nonce: string, daHeight: string } }> } };\n\nexport type GqlGetMessageProofQueryVariables = Exact<{\n  transactionId: Scalars['TransactionId'];\n  messageId: Scalars['MessageId'];\n  commitBlockId?: InputMaybe<Scalars['BlockId']>;\n  commitBlockHeight?: InputMaybe<Scalars['U32']>;\n}>;\n\n\nexport type GqlGetMessageProofQuery = { __typename: 'Query', messageProof?: { __typename: 'MessageProof', sender: string, recipient: string, nonce: string, amount: string, data: string, messageProof: { __typename: 'MerkleProof', proofSet: Array<string>, proofIndex: string }, blockProof: { __typename: 'MerkleProof', proofSet: Array<string>, proofIndex: string }, messageBlockHeader: { __typename: 'Header', id: string, daHeight: string, transactionsCount: string, transactionsRoot: string, height: any, prevRoot: string, time: any, applicationHash: string, messageReceiptRoot: string, messageReceiptCount: string }, commitBlockHeader: { __typename: 'Header', id: string, daHeight: string, transactionsCount: string, transactionsRoot: string, height: any, prevRoot: string, time: any, applicationHash: string, messageReceiptRoot: string, messageReceiptCount: string } } | null };\n\nexport type GqlDryRunMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString'];\n  utxoValidation?: InputMaybe<Scalars['Boolean']>;\n}>;\n\n\nexport type GqlDryRunMutation = { __typename: 'Mutation', dryRun: Array<{ __typename: 'Receipt', pc?: string | null, is?: string | null, toAddress?: string | null, amount?: string | null, assetId?: string | null, gas?: string | null, param1?: string | null, param2?: string | null, val?: string | null, ptr?: string | null, digest?: string | null, reason?: string | null, ra?: string | null, rb?: string | null, rc?: string | null, rd?: string | null, len?: string | null, receiptType: GqlReceiptType, result?: string | null, gasUsed?: string | null, data?: string | null, sender?: string | null, recipient?: string | null, nonce?: string | null, contractId?: string | null, subId?: string | null, contract?: { __typename: 'Contract', id: string, bytecode: string } | null, to?: { __typename: 'Contract', id: string, bytecode: string } | null }> };\n\nexport type GqlSubmitMutationVariables = Exact<{\n  encodedTransaction: Scalars['HexString'];\n}>;\n\n\nexport type GqlSubmitMutation = { __typename: 'Mutation', submit: { __typename: 'Transaction', id: string } };\n\nexport type GqlProduceBlocksMutationVariables = Exact<{\n  startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']>;\n  blocksToProduce: Scalars['U64'];\n}>;\n\n\nexport type GqlProduceBlocksMutation = { __typename: 'Mutation', produceBlocks: any };\n\nexport const ContractFragmentFragmentDoc = gql`\n    fragment contractFragment on Contract {\n  id\n  bytecode\n}\n    `;\nexport const ReceiptFragmentFragmentDoc = gql`\n    fragment receiptFragment on Receipt {\n  contract {\n    ...contractFragment\n  }\n  pc\n  is\n  to {\n    ...contractFragment\n  }\n  toAddress\n  amount\n  assetId\n  gas\n  param1\n  param2\n  val\n  ptr\n  digest\n  reason\n  ra\n  rb\n  rc\n  rd\n  len\n  receiptType\n  result\n  gasUsed\n  data\n  sender\n  recipient\n  nonce\n  contractId\n  subId\n}\n    ${ContractFragmentFragmentDoc}`;\nexport const TransactionFragmentFragmentDoc = gql`\n    fragment transactionFragment on Transaction {\n  id\n  rawPayload\n  gasPrice\n  receipts {\n    ...receiptFragment\n  }\n  status {\n    type: __typename\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      block {\n        id\n      }\n      time\n      programState {\n        returnType\n        data\n      }\n    }\n    ... on FailureStatus {\n      block {\n        id\n      }\n      time\n      reason\n    }\n  }\n}\n    ${ReceiptFragmentFragmentDoc}`;\nexport const CoinFragmentFragmentDoc = gql`\n    fragment coinFragment on Coin {\n  __typename\n  utxoId\n  owner\n  amount\n  assetId\n  maturity\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const MessageCoinFragmentFragmentDoc = gql`\n    fragment messageCoinFragment on MessageCoin {\n  __typename\n  sender\n  recipient\n  nonce\n  amount\n  assetId\n  daHeight\n}\n    `;\nexport const MessageFragmentFragmentDoc = gql`\n    fragment messageFragment on Message {\n  amount\n  sender\n  recipient\n  data\n  nonce\n  daHeight\n}\n    `;\nexport const MessageProofFragmentFragmentDoc = gql`\n    fragment messageProofFragment on MessageProof {\n  messageProof {\n    proofSet\n    proofIndex\n  }\n  blockProof {\n    proofSet\n    proofIndex\n  }\n  messageBlockHeader {\n    id\n    daHeight\n    transactionsCount\n    transactionsRoot\n    height\n    prevRoot\n    time\n    applicationHash\n    messageReceiptRoot\n    messageReceiptCount\n  }\n  commitBlockHeader {\n    id\n    daHeight\n    transactionsCount\n    transactionsRoot\n    height\n    prevRoot\n    time\n    applicationHash\n    messageReceiptRoot\n    messageReceiptCount\n  }\n  sender\n  recipient\n  nonce\n  amount\n  data\n}\n    `;\nexport const BalanceFragmentFragmentDoc = gql`\n    fragment balanceFragment on Balance {\n  owner\n  amount\n  assetId\n}\n    `;\nexport const ConsensusParametersFragmentFragmentDoc = gql`\n    fragment consensusParametersFragment on ConsensusParameters {\n  contractMaxSize\n  maxInputs\n  maxOutputs\n  maxWitnesses\n  maxGasPerTx\n  maxScriptLength\n  maxScriptDataLength\n  maxStorageSlots\n  maxPredicateLength\n  maxPredicateDataLength\n  maxGasPerPredicate\n  gasPriceFactor\n  gasPerByte\n  maxMessageDataLength\n  chainId\n}\n    `;\nexport const BlockFragmentFragmentDoc = gql`\n    fragment blockFragment on Block {\n  id\n  header {\n    height\n    time\n  }\n  transactions {\n    id\n  }\n}\n    `;\nexport const ChainInfoFragmentFragmentDoc = gql`\n    fragment chainInfoFragment on ChainInfo {\n  name\n  baseChainHeight\n  peerCount\n  consensusParameters {\n    ...consensusParametersFragment\n  }\n  latestBlock {\n    ...blockFragment\n  }\n}\n    ${ConsensusParametersFragmentFragmentDoc}\n${BlockFragmentFragmentDoc}`;\nexport const ContractBalanceFragmentFragmentDoc = gql`\n    fragment contractBalanceFragment on ContractBalance {\n  contract\n  amount\n  assetId\n}\n    `;\nexport const PageInfoFragmentFragmentDoc = gql`\n    fragment pageInfoFragment on PageInfo {\n  hasPreviousPage\n  hasNextPage\n  startCursor\n  endCursor\n}\n    `;\nexport const GetVersionDocument = gql`\n    query getVersion {\n  nodeInfo {\n    nodeVersion\n  }\n}\n    `;\nexport const GetInfoDocument = gql`\n    query getInfo {\n  nodeInfo {\n    nodeVersion\n    minGasPrice\n  }\n  chain {\n    consensusParameters {\n      gasPerByte\n      maxGasPerTx\n      gasPriceFactor\n    }\n  }\n}\n    `;\nexport const GetChainDocument = gql`\n    query getChain {\n  chain {\n    ...chainInfoFragment\n  }\n}\n    ${ChainInfoFragmentFragmentDoc}`;\nexport const GetTransactionDocument = gql`\n    query getTransaction($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentFragmentDoc}`;\nexport const GetTransactionWithReceiptsDocument = gql`\n    query getTransactionWithReceipts($transactionId: TransactionId!) {\n  transaction(id: $transactionId) {\n    ...transactionFragment\n    receipts {\n      ...receiptFragment\n    }\n  }\n  chain {\n    consensusParameters {\n      gasPerByte\n      gasPriceFactor\n    }\n  }\n}\n    ${TransactionFragmentFragmentDoc}\n${ReceiptFragmentFragmentDoc}`;\nexport const GetTransactionsDocument = gql`\n    query getTransactions($after: String, $before: String, $first: Int, $last: Int) {\n  transactions(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${TransactionFragmentFragmentDoc}`;\nexport const GetTransactionsByOwnerDocument = gql`\n    query getTransactionsByOwner($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  transactionsByOwner(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    pageInfo {\n      ...pageInfoFragment\n    }\n    edges {\n      node {\n        ...transactionFragment\n      }\n    }\n  }\n}\n    ${PageInfoFragmentFragmentDoc}\n${TransactionFragmentFragmentDoc}`;\nexport const EstimatePredicatesDocument = gql`\n    query estimatePredicates($encodedTransaction: HexString!) {\n  estimatePredicates(tx: $encodedTransaction) {\n    ...transactionFragment\n  }\n}\n    ${TransactionFragmentFragmentDoc}`;\nexport const GetBlockDocument = gql`\n    query getBlock($blockId: BlockId, $blockHeight: U64) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n  }\n}\n    ${BlockFragmentFragmentDoc}`;\nexport const GetBlockWithTransactionsDocument = gql`\n    query getBlockWithTransactions($blockId: BlockId, $blockHeight: U64) {\n  block(id: $blockId, height: $blockHeight) {\n    ...blockFragment\n    transactions {\n      ...transactionFragment\n    }\n  }\n}\n    ${BlockFragmentFragmentDoc}\n${TransactionFragmentFragmentDoc}`;\nexport const GetBlocksDocument = gql`\n    query getBlocks($after: String, $before: String, $first: Int, $last: Int) {\n  blocks(after: $after, before: $before, first: $first, last: $last) {\n    edges {\n      node {\n        ...blockFragment\n      }\n    }\n  }\n}\n    ${BlockFragmentFragmentDoc}`;\nexport const GetCoinDocument = gql`\n    query getCoin($coinId: UtxoId!) {\n  coin(utxoId: $coinId) {\n    ...coinFragment\n  }\n}\n    ${CoinFragmentFragmentDoc}`;\nexport const GetCoinsDocument = gql`\n    query getCoins($filter: CoinFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  coins(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        ...coinFragment\n      }\n    }\n  }\n}\n    ${CoinFragmentFragmentDoc}`;\nexport const GetCoinsToSpendDocument = gql`\n    query getCoinsToSpend($owner: Address!, $queryPerAsset: [SpendQueryElementInput!]!, $excludedIds: ExcludeInput) {\n  coinsToSpend(\n    owner: $owner\n    queryPerAsset: $queryPerAsset\n    excludedIds: $excludedIds\n  ) {\n    ...coinFragment\n    ...messageCoinFragment\n  }\n}\n    ${CoinFragmentFragmentDoc}\n${MessageCoinFragmentFragmentDoc}`;\nexport const GetContractDocument = gql`\n    query getContract($contractId: ContractId!) {\n  contract(id: $contractId) {\n    bytecode\n    id\n  }\n}\n    `;\nexport const GetContractBalanceDocument = gql`\n    query getContractBalance($contract: ContractId!, $asset: AssetId!) {\n  contractBalance(contract: $contract, asset: $asset) {\n    ...contractBalanceFragment\n  }\n}\n    ${ContractBalanceFragmentFragmentDoc}`;\nexport const GetBalanceDocument = gql`\n    query getBalance($owner: Address!, $assetId: AssetId!) {\n  balance(owner: $owner, assetId: $assetId) {\n    ...balanceFragment\n  }\n}\n    ${BalanceFragmentFragmentDoc}`;\nexport const GetBalancesDocument = gql`\n    query getBalances($filter: BalanceFilterInput!, $after: String, $before: String, $first: Int, $last: Int) {\n  balances(\n    filter: $filter\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        ...balanceFragment\n      }\n    }\n  }\n}\n    ${BalanceFragmentFragmentDoc}`;\nexport const GetMessagesDocument = gql`\n    query getMessages($owner: Address!, $after: String, $before: String, $first: Int, $last: Int) {\n  messages(\n    owner: $owner\n    after: $after\n    before: $before\n    first: $first\n    last: $last\n  ) {\n    edges {\n      node {\n        ...messageFragment\n      }\n    }\n  }\n}\n    ${MessageFragmentFragmentDoc}`;\nexport const GetMessageProofDocument = gql`\n    query getMessageProof($transactionId: TransactionId!, $messageId: MessageId!, $commitBlockId: BlockId, $commitBlockHeight: U32) {\n  messageProof(\n    transactionId: $transactionId\n    messageId: $messageId\n    commitBlockId: $commitBlockId\n    commitBlockHeight: $commitBlockHeight\n  ) {\n    ...messageProofFragment\n  }\n}\n    ${MessageProofFragmentFragmentDoc}`;\nexport const DryRunDocument = gql`\n    mutation dryRun($encodedTransaction: HexString!, $utxoValidation: Boolean) {\n  dryRun(tx: $encodedTransaction, utxoValidation: $utxoValidation) {\n    ...receiptFragment\n  }\n}\n    ${ReceiptFragmentFragmentDoc}`;\nexport const SubmitDocument = gql`\n    mutation submit($encodedTransaction: HexString!) {\n  submit(tx: $encodedTransaction) {\n    id\n  }\n}\n    `;\nexport const ProduceBlocksDocument = gql`\n    mutation produceBlocks($startTimestamp: Tai64Timestamp, $blocksToProduce: U64!) {\n  produceBlocks(\n    blocksToProduce: $blocksToProduce\n    startTimestamp: $startTimestamp\n  )\n}\n    `;\n\nexport type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;\n\n\nconst defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();\n\nexport function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {\n  return {\n    getVersion(variables?: GqlGetVersionQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetVersionQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetVersionQuery>(GetVersionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getVersion', 'query');\n    },\n    getInfo(variables?: GqlGetInfoQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetInfoQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetInfoQuery>(GetInfoDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getInfo', 'query');\n    },\n    getChain(variables?: GqlGetChainQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetChainQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetChainQuery>(GetChainDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getChain', 'query');\n    },\n    getTransaction(variables: GqlGetTransactionQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetTransactionQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetTransactionQuery>(GetTransactionDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTransaction', 'query');\n    },\n    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetTransactionWithReceiptsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetTransactionWithReceiptsQuery>(GetTransactionWithReceiptsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTransactionWithReceipts', 'query');\n    },\n    getTransactions(variables?: GqlGetTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetTransactionsQuery>(GetTransactionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTransactions', 'query');\n    },\n    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetTransactionsByOwnerQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetTransactionsByOwnerQuery>(GetTransactionsByOwnerDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getTransactionsByOwner', 'query');\n    },\n    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlEstimatePredicatesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlEstimatePredicatesQuery>(EstimatePredicatesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'estimatePredicates', 'query');\n    },\n    getBlock(variables?: GqlGetBlockQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetBlockQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetBlockQuery>(GetBlockDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getBlock', 'query');\n    },\n    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetBlockWithTransactionsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetBlockWithTransactionsQuery>(GetBlockWithTransactionsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getBlockWithTransactions', 'query');\n    },\n    getBlocks(variables?: GqlGetBlocksQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetBlocksQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetBlocksQuery>(GetBlocksDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getBlocks', 'query');\n    },\n    getCoin(variables: GqlGetCoinQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetCoinQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetCoinQuery>(GetCoinDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCoin', 'query');\n    },\n    getCoins(variables: GqlGetCoinsQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetCoinsQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetCoinsQuery>(GetCoinsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCoins', 'query');\n    },\n    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetCoinsToSpendQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetCoinsToSpendQuery>(GetCoinsToSpendDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getCoinsToSpend', 'query');\n    },\n    getContract(variables: GqlGetContractQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetContractQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetContractQuery>(GetContractDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getContract', 'query');\n    },\n    getContractBalance(variables: GqlGetContractBalanceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetContractBalanceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetContractBalanceQuery>(GetContractBalanceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getContractBalance', 'query');\n    },\n    getBalance(variables: GqlGetBalanceQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetBalanceQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetBalanceQuery>(GetBalanceDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getBalance', 'query');\n    },\n    getBalances(variables: GqlGetBalancesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetBalancesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetBalancesQuery>(GetBalancesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getBalances', 'query');\n    },\n    getMessages(variables: GqlGetMessagesQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetMessagesQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetMessagesQuery>(GetMessagesDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getMessages', 'query');\n    },\n    getMessageProof(variables: GqlGetMessageProofQueryVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlGetMessageProofQuery> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlGetMessageProofQuery>(GetMessageProofDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getMessageProof', 'query');\n    },\n    dryRun(variables: GqlDryRunMutationVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlDryRunMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlDryRunMutation>(DryRunDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'dryRun', 'mutation');\n    },\n    submit(variables: GqlSubmitMutationVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlSubmitMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlSubmitMutation>(SubmitDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'submit', 'mutation');\n    },\n    produceBlocks(variables: GqlProduceBlocksMutationVariables, requestHeaders?: Dom.RequestInit[\"headers\"]): Promise<GqlProduceBlocksMutation> {\n      return withWrapper((wrappedRequestHeaders) => client.request<GqlProduceBlocksMutation>(ProduceBlocksDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'produceBlocks', 'mutation');\n    }\n  };\n}\nexport type Sdk = ReturnType<typeof getSdk>;","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify } from '@ethersproject/bytes';\n\ntype Cache = {\n  [key: string]: {\n    expires: number;\n    value: BytesLike;\n  };\n};\nconst cache: Cache = {}; // it's a cache hash ~~> cash?\n\nconst DEFAULT_TTL_IN_MS = 30 * 1000; // 30seconds\n\nexport class MemoryCache {\n  ttl: number;\n  constructor(ttlInMs: number = DEFAULT_TTL_IN_MS) {\n    this.ttl = ttlInMs;\n\n    if (typeof ttlInMs !== 'number' || this.ttl <= 0) {\n      throw new Error(`Invalid TTL: ${this.ttl}. Use a value greater than zero.`);\n    }\n  }\n\n  get(value: BytesLike, isAutoExpiring = true): BytesLike | undefined {\n    const key = hexlify(value);\n    if (cache[key]) {\n      if (!isAutoExpiring || cache[key].expires > Date.now()) {\n        return cache[key].value;\n      }\n\n      this.del(value);\n    }\n\n    return undefined;\n  }\n\n  set(value: BytesLike): number {\n    const expiresAt = Date.now() + this.ttl;\n    const key = hexlify(value);\n    cache[key] = {\n      expires: expiresAt,\n      value,\n    };\n\n    return expiresAt;\n  }\n\n  getAllData(): BytesLike[] {\n    return Object.keys(cache).reduce((list, key) => {\n      const data = this.get(key, false);\n      if (data) {\n        list.push(data);\n      }\n\n      return list;\n    }, [] as BytesLike[]);\n  }\n\n  getActiveData(): BytesLike[] {\n    return Object.keys(cache).reduce((list, key) => {\n      const data = this.get(key);\n      if (data) {\n        list.push(data);\n      }\n\n      return list;\n    }, [] as BytesLike[]);\n  }\n\n  del(value: BytesLike) {\n    const key = hexlify(value);\n    delete cache[key];\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn, toNumber } from '@fuel-ts/math';\nimport type { Input } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\nexport type CoinTransactionRequestInput = {\n  type: InputType.Coin;\n\n  /** UTXO ID */\n  id: BytesLike;\n\n  /** Owning address or script hash */\n  owner: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Asset ID of the coins */\n  assetId: BytesLike;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Index of witness that authorizes spending the coin */\n  witnessIndex: number;\n\n  /** UTXO being spent must have been created at least this many blocks ago */\n  maturity?: number;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n};\n\nexport type MessageTransactionRequestInput = {\n  type: InputType.Message;\n\n  /** Address of sender */\n  sender: BytesLike;\n\n  /** Address of recipient */\n  recipient: BytesLike;\n\n  /** Amount of coins */\n  amount: BigNumberish;\n\n  /** Index of witness that authorizes the message */\n  witnessIndex: number;\n\n  /** Unique nonce of message */\n  nonce: BytesLike;\n\n  /** Gas used by predicate */\n  predicateGasUsed?: BigNumberish;\n\n  /** Predicate bytecode */\n  predicate?: BytesLike;\n\n  /** Predicate input data (parameters) */\n  predicateData?: BytesLike;\n\n  /** data of message */\n  data?: BytesLike;\n};\n\nexport type ContractTransactionRequestInput = {\n  type: InputType.Contract;\n\n  /** Points to the TX whose output is being spent. (TxPointer) */\n  txPointer: BytesLike;\n\n  /** Contract ID */\n  contractId: BytesLike;\n};\nexport type TransactionRequestInput =\n  | CoinTransactionRequestInput\n  | ContractTransactionRequestInput\n  | MessageTransactionRequestInput;\n\n/** @hidden */\nexport const inputify = (value: TransactionRequestInput): Input => {\n  switch (value.type) {\n    case InputType.Coin: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      return {\n        type: InputType.Coin,\n        utxoID: {\n          transactionId: hexlify(arrayify(value.id).slice(0, 32)),\n          outputIndex: arrayify(value.id)[32],\n        },\n        owner: hexlify(value.owner),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        witnessIndex: value.witnessIndex,\n        maturity: value.maturity ?? 0,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: predicate.length,\n        predicateDataLength: predicateData.length,\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n      };\n    }\n    case InputType.Contract: {\n      return {\n        type: InputType.Contract,\n        utxoID: {\n          transactionId: ZeroBytes32,\n          outputIndex: 0,\n        },\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n        txPointer: {\n          blockHeight: toNumber(arrayify(value.txPointer).slice(0, 8)),\n          txIndex: toNumber(arrayify(value.txPointer).slice(8, 16)),\n        },\n        contractID: hexlify(value.contractId),\n      };\n    }\n    case InputType.Message: {\n      const predicate = arrayify(value.predicate ?? '0x');\n      const predicateData = arrayify(value.predicateData ?? '0x');\n      const data = arrayify(value.data ?? '0x');\n      return {\n        type: InputType.Message,\n        sender: hexlify(value.sender),\n        recipient: hexlify(value.recipient),\n        amount: bn(value.amount),\n        nonce: hexlify(value.nonce),\n        witnessIndex: value.witnessIndex,\n        predicateGasUsed: bn(value.predicateGasUsed),\n        predicateLength: predicate.length,\n        predicateDataLength: predicateData.length,\n        predicate: hexlify(predicate),\n        predicateData: hexlify(predicateData),\n        data: hexlify(data),\n        dataLength: data.length,\n      };\n    }\n    default: {\n      throw new Error('Invalid Input type');\n    }\n  }\n};\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify } from '@ethersproject/bytes';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { BigNumberish } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { Output } from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\nexport type CoinTransactionRequestOutput = {\n  type: OutputType.Coin;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Amount of coins to send */\n  amount: BigNumberish;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type ContractTransactionRequestOutput = {\n  type: OutputType.Contract;\n  /** Index of input contract */\n  inputIndex: number;\n};\nexport type ChangeTransactionRequestOutput = {\n  type: OutputType.Change;\n  /** Receiving address or script hash */\n  to: BytesLike;\n  /** Asset ID of coins */\n  assetId: BytesLike;\n};\nexport type VariableTransactionRequestOutput = {\n  type: OutputType.Variable;\n};\nexport type ContractCreatedTransactionRequestOutput = {\n  type: OutputType.ContractCreated;\n  /** Contract ID */\n  contractId: BytesLike;\n  /** State Root */\n  stateRoot: BytesLike;\n};\nexport type TransactionRequestOutput =\n  | CoinTransactionRequestOutput\n  | ContractTransactionRequestOutput\n  | ChangeTransactionRequestOutput\n  | VariableTransactionRequestOutput\n  | ContractCreatedTransactionRequestOutput;\n\n/** @hidden */\nexport const outputify = (value: TransactionRequestOutput): Output => {\n  switch (value.type) {\n    case OutputType.Coin: {\n      return {\n        type: OutputType.Coin,\n        to: hexlify(value.to),\n        amount: bn(value.amount),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Contract: {\n      return {\n        type: OutputType.Contract,\n        inputIndex: value.inputIndex,\n        balanceRoot: ZeroBytes32,\n        stateRoot: ZeroBytes32,\n      };\n    }\n    case OutputType.Change: {\n      return {\n        type: OutputType.Change,\n        to: hexlify(value.to),\n        amount: bn(0),\n        assetId: hexlify(value.assetId),\n      };\n    }\n    case OutputType.Variable: {\n      return {\n        type: OutputType.Variable,\n        to: ZeroBytes32,\n        amount: bn(0),\n        assetId: ZeroBytes32,\n      };\n    }\n    case OutputType.ContractCreated: {\n      return {\n        type: OutputType.ContractCreated,\n        contractId: hexlify(value.contractId),\n        stateRoot: hexlify(value.stateRoot),\n      };\n    }\n    default: {\n      throw new Error('Invalid Output type');\n    }\n  }\n};\n","import type { BytesLike } from '@ethersproject/bytes';\n\nimport type { Coin } from './coin';\nimport type { MessageCoin } from './message';\n\nexport type RawCoin = {\n  utxoId: string;\n  owner: string;\n  amount: string;\n  assetId: string;\n  maturity: string;\n  blockCreated: string;\n  txCreatedIdx: string;\n};\n\nexport type RawMessage = {\n  amount: string;\n  sender: string;\n  assetId: string;\n  recipient: string;\n  data: string;\n  nonce: string;\n  daHeight: string;\n};\n\nexport type RawResource = RawCoin | RawMessage;\nexport type Resource = Coin | MessageCoin;\n\n/** @hidden */\nexport type ExcludeResourcesOption = {\n  utxos?: BytesLike[];\n  messages?: BytesLike[];\n};\n\n/** @hidden */\nexport const isRawCoin = (resource: RawResource): resource is RawCoin => 'utxoId' in resource;\n/** @hidden */\nexport const isRawMessage = (resource: RawResource): resource is RawMessage =>\n  'recipient' in resource;\n/** @hidden */\nexport const isCoin = (resource: Resource): resource is Coin => 'id' in resource;\n/** @hidden */\nexport const isMessage = (resource: Resource): resource is MessageCoin => 'recipient' in resource;\n","import { arrayify } from '@ethersproject/bytes';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptBurn,\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptMessageOut,\n  ReceiptMint,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptScriptResult,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n} from '@fuel-ts/transactions';\nimport {\n  ReceiptBurnCoder,\n  ReceiptMessageOutCoder,\n  ReceiptMintCoder,\n  ReceiptType,\n} from '@fuel-ts/transactions';\nimport { FAILED_TRANSFER_TO_ADDRESS_SIGNAL } from '@fuel-ts/transactions/configs';\n\nimport type { GqlReceiptFragmentFragment } from '../__generated__/operations';\nimport { GqlReceiptType } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\n\n/** @hidden */\nconst doesReceiptHaveMissingOutputVariables = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptRevert =>\n  receipt.type === ReceiptType.Revert &&\n  receipt.val.toString('hex') === FAILED_TRANSFER_TO_ADDRESS_SIGNAL;\n\n/** @hidden */\nconst doesReceiptHaveMissingContractId = (\n  receipt: TransactionResultReceipt\n): receipt is ReceiptPanic =>\n  receipt.type === ReceiptType.Panic &&\n  receipt.contractId !== '0x0000000000000000000000000000000000000000000000000000000000000000';\n\n/** @hidden */\nexport const getReceiptsWithMissingData = (receipts: Array<TransactionResultReceipt>) =>\n  receipts.reduce<{\n    missingOutputVariables: Array<ReceiptRevert>;\n    missingOutputContractIds: Array<ReceiptPanic>;\n  }>(\n    (memo, receipt) => {\n      if (doesReceiptHaveMissingOutputVariables(receipt)) {\n        memo.missingOutputVariables.push(receipt);\n      }\n      if (doesReceiptHaveMissingContractId(receipt)) {\n        memo.missingOutputContractIds.push(receipt);\n      }\n      return memo;\n    },\n    {\n      missingOutputVariables: [],\n      missingOutputContractIds: [],\n    }\n  );\n\nconst hexOrZero = (hex?: string | null) => hex || ZeroBytes32;\n\nexport function assembleReceiptByType(receipt: GqlReceiptFragmentFragment) {\n  switch (receipt.receiptType) {\n    case GqlReceiptType.Call: {\n      const callReceipt: ReceiptCall = {\n        type: ReceiptType.Call,\n        from: hexOrZero(receipt.contract?.id),\n        to: hexOrZero(receipt?.to?.id),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        gas: bn(receipt.gas),\n        param1: bn(receipt.param1),\n        param2: bn(receipt.param2),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return callReceipt;\n    }\n\n    case GqlReceiptType.Return: {\n      const returnReceipt: ReceiptReturn = {\n        type: ReceiptType.Return,\n        id: hexOrZero(receipt.contract?.id),\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnReceipt;\n    }\n\n    case GqlReceiptType.ReturnData: {\n      const returnDataReceipt: ReceiptReturnData = {\n        type: ReceiptType.ReturnData,\n        id: hexOrZero(receipt.contract?.id),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return returnDataReceipt;\n    }\n\n    case GqlReceiptType.Panic: {\n      const panicReceipt: ReceiptPanic = {\n        type: ReceiptType.Panic,\n        id: hexOrZero(receipt.contract?.id),\n        reason: bn(receipt.reason),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n        contractId: hexOrZero(receipt.contractId),\n      };\n\n      return panicReceipt;\n    }\n\n    case GqlReceiptType.Revert: {\n      const revertReceipt: ReceiptRevert = {\n        type: ReceiptType.Revert,\n        id: hexOrZero(receipt.contract?.id),\n        val: bn(receipt.ra),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return revertReceipt;\n    }\n\n    case GqlReceiptType.Log: {\n      const logReceipt: ReceiptLog = {\n        type: ReceiptType.Log,\n        id: hexOrZero(receipt.contract?.id),\n        val0: bn(receipt.ra),\n        val1: bn(receipt.rb),\n        val2: bn(receipt.rc),\n        val3: bn(receipt.rd),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return logReceipt;\n    }\n\n    case GqlReceiptType.LogData: {\n      const logDataReceipt: ReceiptLogData = {\n        type: ReceiptType.LogData,\n        id: hexOrZero(receipt.contract?.id),\n        val0: bn(receipt.ra),\n        val1: bn(receipt.rb),\n        ptr: bn(receipt.ptr),\n        len: bn(receipt.len),\n        digest: hexOrZero(receipt.digest),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return logDataReceipt;\n    }\n\n    case GqlReceiptType.Transfer: {\n      const transferReceipt: ReceiptTransfer = {\n        type: ReceiptType.Transfer,\n        from: hexOrZero(receipt.contract?.id),\n        to: hexOrZero(receipt?.to?.id),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return transferReceipt;\n    }\n\n    case GqlReceiptType.TransferOut: {\n      const transferOutReceipt: ReceiptTransferOut = {\n        type: ReceiptType.TransferOut,\n        from: hexOrZero(receipt.contract?.id),\n        to: hexOrZero(receipt?.to?.id),\n        amount: bn(receipt.amount),\n        assetId: hexOrZero(receipt.assetId),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n      return transferOutReceipt;\n    }\n\n    case GqlReceiptType.ScriptResult: {\n      const scriptResultReceipt: ReceiptScriptResult = {\n        type: ReceiptType.ScriptResult,\n        result: bn(receipt.result),\n        gasUsed: bn(receipt.gasUsed),\n      };\n\n      return scriptResultReceipt;\n    }\n\n    case GqlReceiptType.MessageOut: {\n      const sender = hexOrZero(receipt.sender);\n      const recipient = hexOrZero(receipt.recipient);\n      const nonce = hexOrZero(receipt.nonce);\n      const amount = bn(receipt.amount);\n      const data = receipt.data ? arrayify(receipt.data) : Uint8Array.from([]);\n      const digest = hexOrZero(receipt.digest);\n\n      const messageId = ReceiptMessageOutCoder.getMessageId({\n        sender,\n        recipient,\n        nonce,\n        amount,\n        data,\n      });\n\n      const receiptMessageOut: ReceiptMessageOut = {\n        type: ReceiptType.MessageOut,\n        sender,\n        recipient,\n        amount,\n        nonce,\n        data,\n        digest,\n        messageId,\n      };\n\n      return receiptMessageOut;\n    }\n\n    case GqlReceiptType.Mint: {\n      const contractId = hexOrZero(receipt.contract?.id);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = ReceiptMintCoder.getAssetId(contractId, subId);\n\n      const mintReceipt: ReceiptMint = {\n        type: ReceiptType.Mint,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return mintReceipt;\n    }\n\n    case GqlReceiptType.Burn: {\n      const contractId = hexOrZero(receipt.contract?.id);\n      const subId = hexOrZero(receipt.subId);\n      const assetId = ReceiptBurnCoder.getAssetId(contractId, subId);\n\n      const burnReceipt: ReceiptBurn = {\n        type: ReceiptType.Burn,\n        subId,\n        contractId,\n        assetId,\n        val: bn(receipt.val),\n        pc: bn(receipt.pc),\n        is: bn(receipt.is),\n      };\n\n      return burnReceipt;\n    }\n\n    default:\n      throw new Error('Unknown receipt type');\n  }\n}\n","import type { BN } from '@fuel-ts/math';\nimport { bn, multiply } from '@fuel-ts/math';\nimport type { Witness } from '@fuel-ts/transactions';\nimport { ReceiptType, TransactionType } from '@fuel-ts/transactions';\nimport { GAS_PER_BYTE, GAS_PRICE_FACTOR } from '@fuel-ts/transactions/configs';\n\nimport type {\n  TransactionResultReceipt,\n  TransactionResultScriptResultReceipt,\n} from '../transaction-response';\n\n/** @hidden */\nexport const calculatePriceWithFactor = (gasUsed: BN, gasPrice: BN, priceFactor: BN): BN =>\n  bn(Math.ceil(gasUsed.toNumber() / priceFactor.toNumber()) * gasPrice.toNumber());\n\n/** @hidden */\nexport const getGasUsedFromReceipts = (receipts: Array<TransactionResultReceipt>): BN => {\n  const scriptResult = receipts.filter(\n    (receipt) => receipt.type === ReceiptType.ScriptResult\n  ) as TransactionResultScriptResultReceipt[];\n\n  const gasUsed = scriptResult.reduce((prev, receipt) => prev.add(receipt.gasUsed), bn(0));\n\n  return gasUsed;\n};\n\n/** @hidden */\nexport function getGasUsedForContractCreated({\n  transactionBytes,\n  gasPerByte,\n  gasPriceFactor,\n  transactionWitnesses,\n}: {\n  transactionBytes: Uint8Array;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  transactionWitnesses: Witness[];\n}) {\n  const witnessSize = transactionWitnesses?.reduce((total, w) => total + w.dataLength, 0) || 0;\n\n  const txChargeableBytes = bn(transactionBytes.length - witnessSize);\n\n  const gasUsed = bn(\n    Math.ceil(\n      (txChargeableBytes.toNumber() * bn(gasPerByte).toNumber()) / bn(gasPriceFactor).toNumber()\n    )\n  );\n\n  return gasUsed;\n}\n\n/**\n * @hidden\n */\nexport interface ICalculateTransactionFee {\n  receipts: TransactionResultReceipt[];\n  gasPrice: BN;\n  transactionBytes: Uint8Array;\n  transactionType: TransactionType;\n  transactionWitnesses: Witness[];\n  gasPriceFactor?: BN;\n  gasPerByte?: BN;\n  margin?: number;\n}\n\n/** @hidden */\nexport const calculateTransactionFee = ({\n  receipts,\n  gasPrice,\n  gasPriceFactor,\n  gasPerByte,\n  transactionBytes,\n  transactionType,\n  transactionWitnesses,\n  margin,\n}: ICalculateTransactionFee) => {\n  let gasUsed;\n  let fee;\n\n  const isTypeCreate = transactionType === TransactionType.Create;\n\n  if (isTypeCreate) {\n    gasUsed = getGasUsedForContractCreated({\n      gasPerByte: gasPerByte || GAS_PER_BYTE,\n      gasPriceFactor: gasPriceFactor || GAS_PRICE_FACTOR,\n      transactionBytes,\n      transactionWitnesses,\n    });\n\n    fee = gasUsed.mul(gasPrice);\n  } else {\n    gasUsed = multiply(getGasUsedFromReceipts(receipts), margin || 1);\n    fee = calculatePriceWithFactor(gasUsed, gasPrice, gasPriceFactor || GAS_PRICE_FACTOR);\n  }\n\n  return {\n    fee,\n    gasUsed,\n  };\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { hexlify } from '@ethersproject/bytes';\nimport cloneDeep from 'lodash.clonedeep';\n\n// When parsing a Transaction to JSON we need\n// to convert special types into each respective\n// JSON friendly value. This enables a tx to be\n// stringified and parsed back into a Transaction\n/** @hidden */\nfunction normalize(object: any) {\n  Object.keys(object).forEach((key) => {\n    switch (object[key]?.constructor.name) {\n      case 'Uint8Array':\n        object[key] = hexlify(object[key]);\n        break;\n      case 'Array':\n        object[key] = normalize(object[key]);\n        break;\n      case 'BN':\n        object[key] = object[key].toHex();\n        break;\n      case 'Address':\n        object[key] = object[key].toB256();\n        break;\n      case 'Object':\n        object[key] = normalize(object[key]);\n        break;\n      default:\n        break;\n    }\n  });\n  return object;\n}\n\n/**\n * Stringify Transaction to a JSON object\n * compatible with the Transaction class constructor.\n */\n/** @hidden */\nexport function normalizeJSON(root: any) {\n  // Do a single deep clone before normalizing\n  // to avoid mutating the original object\n  // and doing extra clones on each iteration\n  return normalize(cloneDeep(root));\n}\n","/** @hidden */\nexport function sleep(time: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(true);\n    }, time);\n  });\n}\n","/**\n * @hidden\n *\n * Converts a TAI64 timestamp to a Unix timestamp in milliseconds.\n *\n * TAI64 is a 64-bit unsigned integer format that represents a point in time\n * as the number of TAI seconds elapsed since 00:00:00 TAI, January 1, 1970.\n *\n * Unix timestamp, on the other hand, represents the number of milliseconds\n * elapsed since 00:00:00 UTC, January 1, 1970.\n *\n * To convert a TAI64 timestamp to a Unix timestamp, we need to subtract the\n * TAI64 epoch time (00:00:00 TAI, January 1, 1970) from the TAI64 timestamp\n * and then add the Unix epoch time (00:00:00 UTC, January 1, 1970). The epoch\n * time difference between TAI64 and Unix is 2 ** 62 + 10.\n *\n * @param tai64Timestamp - The TAI64 timestamp to convert.\n * @returns - The Unix timestamp in milliseconds.\n */\nexport const fromTai64ToUnix = (tai64Timestamp: string) =>\n  Number(BigInt(tai64Timestamp) - BigInt(2 ** 62) - BigInt(10));\n\n/**\n * @hidden\n *\n * Converts a Unix timestamp in milliseconds to a TAI64 timestamp.\n *\n * Unix timestamp represents the number of milliseconds elapsed since\n * 00:00:00 UTC, January 1, 1970. TAI64 timestamp is a 64-bit unsigned\n * integer format that represents a point in time as the number of TAI\n * seconds elapsed since 00:00:00 TAI, January 1, 1970.\n *\n * To convert a Unix timestamp to a TAI64 timestamp, we need to add the\n * TAI64 epoch time (00:00:00 TAI, January 1, 1970) to the Unix timestamp\n * and then subtract the Unix epoch time (00:00:00 UTC, January 1, 1970).\n * The epoch time difference between TAI64 and Unix is 2 ** 62 + 10.\n *\n * @param unixTimestampMs - The Unix timestamp in milliseconds to convert.\n * @returns - The TAI64 timestamp as a string.\n */\nexport const fromUnixToTai64 = (unixTimestampMs: number) =>\n  (BigInt(unixTimestampMs) + BigInt(2 ** 62) + BigInt(10)).toString();\n","/* eslint-disable max-classes-per-file */\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\n\n/**\n * @hidden\n */\nexport class ChangeOutputCollisionError extends Error {\n  name = 'ChangeOutputCollisionError';\n  message = 'A ChangeOutput with the same \"assetId\" already exists for a different \"to\" address';\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessAtIndexError extends Error {\n  name = 'NoWitnessAtIndexError';\n  constructor(public readonly index: number) {\n    super();\n    this.message = `Witness at index \"${index}\" was not found`;\n  }\n}\n\n/**\n * @hidden\n */\nexport class NoWitnessByOwnerError extends Error {\n  name = 'NoWitnessByOwnerError';\n  constructor(public readonly owner: AbstractAddress) {\n    super();\n    this.message = `A witness for the given owner \"${owner}\" was not found`;\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport type { Witness } from '@fuel-ts/transactions';\n\nexport type TransactionRequestWitness = BytesLike;\n\nexport const witnessify = (value: TransactionRequestWitness): Witness => {\n  const data = arrayify(value);\n\n  return {\n    data: hexlify(data),\n    dataLength: data.length,\n  };\n};\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { addressify } from '@fuel-ts/address';\nimport { BaseAssetId } from '@fuel-ts/address/configs';\nimport type { AddressLike, AbstractAddress } from '@fuel-ts/interfaces';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionCreate, TransactionScript } from '@fuel-ts/transactions';\nimport { TransactionType, TransactionCoder, InputType, OutputType } from '@fuel-ts/transactions';\nimport { GAS_PRICE_FACTOR } from '@fuel-ts/transactions/configs';\n\nimport type { CoinQuantity, CoinQuantityLike } from '../coin-quantity';\nimport { coinQuantityfy } from '../coin-quantity';\nimport type { Resource } from '../resource';\nimport { isCoin } from '../resource';\nimport { calculatePriceWithFactor, normalizeJSON } from '../utils';\n\nimport type { CoinTransactionRequestOutput } from '.';\nimport { NoWitnessAtIndexError, NoWitnessByOwnerError, ChangeOutputCollisionError } from './errors';\nimport type {\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n  MessageTransactionRequestInput,\n} from './input';\nimport { inputify } from './input';\nimport type { TransactionRequestOutput, ChangeTransactionRequestOutput } from './output';\nimport { outputify } from './output';\nimport type { TransactionRequestWitness } from './witness';\nimport { witnessify } from './witness';\n\nexport {\n  /**\n   * @hidden\n   */\n  TransactionType,\n};\n\n/**\n * @hidden\n *\n * Interface defining a like structure for a base transaction request.\n */\nexport interface BaseTransactionRequestLike {\n  /** Gas price for transaction */\n  gasPrice?: BigNumberish;\n  /** Gas limit for transaction */\n  gasLimit?: BigNumberish;\n  /** Block until which tx cannot be included */\n  maturity?: number;\n  /** List of inputs */\n  inputs?: TransactionRequestInput[];\n  /** List of outputs */\n  outputs?: TransactionRequestOutput[];\n  /** List of witnesses */\n  witnesses?: TransactionRequestWitness[];\n}\n\n/**\n * Abstract class to define the functionalities of a transaction request transaction request.\n */\nexport abstract class BaseTransactionRequest implements BaseTransactionRequestLike {\n  /** Type of the transaction */\n  abstract type: TransactionType;\n  /** Gas price for transaction */\n  gasPrice: BN;\n  /** Gas limit for transaction */\n  gasLimit: BN;\n  /** Block until which tx cannot be included */\n  maturity: number;\n  /** List of inputs */\n  inputs: TransactionRequestInput[] = [];\n  /** List of outputs */\n  outputs: TransactionRequestOutput[] = [];\n  /** List of witnesses */\n  witnesses: TransactionRequestWitness[] = [];\n\n  /**\n   * Constructor for initializing a base transaction request.\n   *\n   * @param baseTransactionRequest - Optional object containing properties to initialize the transaction request.\n   */\n  constructor({\n    gasPrice,\n    gasLimit,\n    maturity,\n    inputs,\n    outputs,\n    witnesses,\n  }: BaseTransactionRequestLike = {}) {\n    this.gasPrice = bn(gasPrice ?? 0);\n    this.gasLimit = bn(gasLimit ?? 0);\n    this.maturity = maturity ?? 0;\n    this.inputs = [...(inputs ?? [])];\n    this.outputs = [...(outputs ?? [])];\n    this.witnesses = [...(witnesses ?? [])];\n  }\n\n  /**\n   * Method to obtain the base transaction details.\n   *\n   * @returns The base transaction details.\n   */\n  protected getBaseTransaction(): Pick<\n    TransactionScript | TransactionCreate,\n    keyof BaseTransactionRequestLike | 'inputsCount' | 'outputsCount' | 'witnessesCount'\n  > {\n    const inputs = this.inputs?.map(inputify) ?? [];\n    const outputs = this.outputs?.map(outputify) ?? [];\n    const witnesses = this.witnesses?.map(witnessify) ?? [];\n    return {\n      gasPrice: this.gasPrice,\n      gasLimit: this.gasLimit,\n      maturity: this.maturity,\n      inputs,\n      outputs,\n      witnesses,\n      inputsCount: inputs.length,\n      outputsCount: outputs.length,\n      witnessesCount: witnesses.length,\n    };\n  }\n\n  abstract toTransaction(): TransactionCreate | TransactionScript;\n\n  /**\n   * Converts the transaction request to a byte array.\n   *\n   * @returns The transaction bytes.\n   */\n  toTransactionBytes(): Uint8Array {\n    return new TransactionCoder().encode(this.toTransaction());\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an input to the list without any side effects and returns the index\n   */\n  protected pushInput(input: TransactionRequestInput): number {\n    this.inputs.push(input);\n    return this.inputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Pushes an output to the list without any side effects and returns the index\n   */\n  protected pushOutput(output: TransactionRequestOutput): number {\n    this.outputs.push(output);\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * @hidden\n   *\n   * Creates an empty witness without any side effects and returns the index\n   */\n  protected createWitness() {\n    this.witnesses.push('0x');\n    return this.witnesses.length - 1;\n  }\n\n  /**\n   * Updates the witness for a given owner and signature.\n   *\n   * @param address - The address to get the coin input witness index for.\n   * @param signature - The signature to update the witness with.\n   */\n  updateWitnessByOwner(address: AbstractAddress, signature: BytesLike) {\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(address);\n    if (typeof witnessIndex === 'number') {\n      this.updateWitness(witnessIndex, signature);\n    }\n  }\n\n  /**\n   * Updates an existing witness without any side effects.\n   *\n   * @param index - The index of the witness to update.\n   * @param witness - The new witness.\n   * @throws If the witness does not exist.\n   */\n  updateWitness(index: number, witness: TransactionRequestWitness) {\n    if (!this.witnesses[index]) {\n      throw new NoWitnessAtIndexError(index);\n    }\n    this.witnesses[index] = witness;\n  }\n\n  /**\n   * Gets the coin inputs for a transaction.\n   *\n   * @returns The coin inputs.\n   */\n  getCoinInputs(): CoinTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is CoinTransactionRequestInput => input.type === InputType.Coin\n    );\n  }\n\n  /**\n   * Gets the coin outputs for a transaction.\n   *\n   * @returns The coin outputs.\n   */\n  getCoinOutputs(): CoinTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is CoinTransactionRequestOutput => output.type === OutputType.Coin\n    );\n  }\n\n  /**\n   * Gets the change outputs for a transaction.\n   *\n   * @returns The change outputs.\n   */\n  getChangeOutputs(): ChangeTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ChangeTransactionRequestOutput => output.type === OutputType.Change\n    );\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the witnessIndex of the found CoinInput.\n   */\n  getCoinInputWitnessIndexByOwner(owner: AddressLike): number | null {\n    const ownerAddress = addressify(owner);\n    return (\n      this.inputs.find(\n        (input): input is CoinTransactionRequestInput =>\n          input.type === InputType.Coin && hexlify(input.owner) === ownerAddress.toB256()\n      )?.witnessIndex ??\n      this.inputs.find(\n        (input): input is MessageTransactionRequestInput =>\n          input.type === InputType.Message && hexlify(input.recipient) === ownerAddress.toB256()\n      )?.witnessIndex ??\n      null\n    );\n  }\n\n  /**\n   * Updates the witness for the given CoinInput owner.\n   *\n   * @param owner - The owner of the CoinInput.\n   * @param witness - The witness to update.\n   * @throws If no witness exists for the given owner.\n   */\n  updateWitnessByCoinInputOwner(owner: AddressLike, witness: BytesLike) {\n    const witnessIndex = this.getCoinInputWitnessIndexByOwner(owner);\n\n    if (!witnessIndex) {\n      throw new NoWitnessByOwnerError(addressify(owner));\n    }\n\n    this.updateWitness(witnessIndex, witness);\n  }\n\n  /**\n   * Adds a single resource to the transaction by adding inputs and outputs.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResourceInputAndOutput(resource: Resource) {\n    const ownerAddress = isCoin(resource) ? resource.owner : resource.recipient;\n    const assetId = isCoin(resource) ? resource.assetId : BaseAssetId;\n    const type = isCoin(resource) ? InputType.Coin : InputType.Message;\n    let witnessIndex = this.getCoinInputWitnessIndexByOwner(ownerAddress);\n\n    // Insert a dummy witness if no witness exists\n    if (typeof witnessIndex !== 'number') {\n      witnessIndex = this.createWitness();\n    }\n\n    // Insert the Input\n    this.pushInput(\n      isCoin(resource)\n        ? ({\n            type,\n            ...resource,\n            owner: resource.owner.toB256(),\n            witnessIndex,\n            txPointer: '0x00000000000000000000000000000000',\n          } as CoinTransactionRequestInput)\n        : ({\n            type,\n            ...resource,\n            sender: resource.sender.toB256(),\n            recipient: resource.recipient.toB256(),\n            witnessIndex,\n            txPointer: '0x00000000000000000000000000000000',\n          } as MessageTransactionRequestInput)\n    );\n\n    // Find the ChangeOutput for the AssetId of the Resource\n    const changeOutput = this.getChangeOutputs().find(\n      (output) => hexlify(output.assetId) === assetId\n    );\n\n    // Throw if the existing ChangeOutput is not for the same owner\n    if (changeOutput && hexlify(changeOutput.to) !== ownerAddress.toB256()) {\n      throw new ChangeOutputCollisionError();\n    }\n\n    // Insert a ChangeOutput if it does not exist\n    if (!changeOutput) {\n      this.pushOutput({\n        type: OutputType.Change,\n        to: ownerAddress.toB256(),\n        assetId,\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds multiple resources to the transaction by adding inputs and outputs.\n   *\n   * @param resources - The resources to add.\n   * @returns This transaction.\n   */\n  addResourceInputsAndOutputs(resources: ReadonlyArray<Resource>) {\n    resources.forEach((resource) => this.addResourceInputAndOutput(resource));\n\n    return this;\n  }\n\n  /**\n   * Adds a coin input to the transaction.\n   *\n   * @param to - Address of the owner.\n   * @param amount - Amount of coin.\n   * @param assetId - Asset ID of coin.\n   */\n  addCoinOutput(\n    /** Address of the destination */\n    to: AddressLike,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId\n  ) {\n    this.pushOutput({\n      type: OutputType.Coin,\n      to: addressify(to).toB256(),\n      amount,\n      assetId,\n    });\n  }\n\n  /**\n   * Adds multiple coin outputs to the transaction.\n   *\n   * @param to - Address of the destination.\n   * @param quantities - Quantities of coins.\n   */\n  addCoinOutputs(\n    /** Address of the destination */\n    to: AddressLike,\n    /** Quantities of coins */\n    quantities: CoinQuantityLike[]\n  ) {\n    quantities.map(coinQuantityfy).forEach((quantity) => {\n      this.pushOutput({\n        type: OutputType.Coin,\n        to: addressify(to).toB256(),\n        amount: quantity.amount,\n        assetId: quantity.assetId,\n      });\n    });\n  }\n\n  /**\n   * @hidden\n   */\n  byteSize() {\n    return this.toTransactionBytes().length;\n  }\n\n  /**\n   * @hidden\n   */\n  chargeableByteSize() {\n    const witnessSize = this.witnesses.reduce((total, w) => total + arrayify(w).length, 0);\n    return bn(this.toTransactionBytes().length - witnessSize);\n  }\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction. This is required even if the gasPrice is 0.\n   *\n   * @returns The minimum amount in coins required to create a transaction.\n   */\n  calculateFee(): CoinQuantity {\n    const gasFee = calculatePriceWithFactor(this.gasLimit, this.gasPrice, GAS_PRICE_FACTOR);\n\n    return {\n      assetId: BaseAssetId,\n      amount: gasFee.isZero() ? bn(1) : gasFee,\n    };\n  }\n\n  /**\n   * Return the minimum amount in native coins required to create\n   * a transaction.\n   *\n   * @returns The transaction as a JSON object.\n   */\n  toJSON() {\n    return normalizeJSON(this);\n  }\n\n  /**\n   * @hidden\n   *\n   * Determines whether the transaction has a predicate input.\n   *\n   * @returns Whether the transaction has a predicate input.\n   */\n  hasPredicateInput(): boolean {\n    return Boolean(\n      this.inputs.find(\n        (input) => 'predicate' in input && input.predicate && input.predicate !== arrayify('0x')\n      )\n    );\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify, arrayify } from '@ethersproject/bytes';\nimport type { StorageSlot } from '@fuel-ts/transactions';\n\nexport type TransactionRequestStorageSlot =\n  | {\n      /** Key */\n      key: BytesLike;\n      /** Value */\n      value: BytesLike;\n    }\n  | [key: BytesLike, value: BytesLike];\n\n// Make sure all values have 32 bytes\nconst getStorageValue = (value: BytesLike): Uint8Array => {\n  const v = new Uint8Array(32);\n  v.set(arrayify(value));\n  return v;\n};\n\nexport const storageSlotify = (storageSlot: TransactionRequestStorageSlot): StorageSlot => {\n  let key;\n  let value;\n\n  if (Array.isArray(storageSlot)) {\n    key = storageSlot[0];\n    value = storageSlot[1];\n  } else {\n    key = storageSlot.key;\n    value = storageSlot.value;\n  }\n\n  return {\n    key: hexlify(key),\n    value: hexlify(getStorageValue(value)),\n  };\n};\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify } from '@ethersproject/bytes';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { TransactionCreate } from '@fuel-ts/transactions';\nimport { TransactionType, OutputType } from '@fuel-ts/transactions';\n\nimport type { ContractCreatedTransactionRequestOutput } from './output';\nimport type { TransactionRequestStorageSlot } from './storage-slot';\nimport { storageSlotify } from './storage-slot';\nimport { BaseTransactionRequest } from './transaction-request';\nimport type { BaseTransactionRequestLike } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface CreateTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex?: number;\n  /** Salt */\n  salt?: BytesLike;\n  /** List of storage slots to initialize */\n  storageSlots?: TransactionRequestStorageSlot[];\n}\n\n/**\n * `CreateTransactionRequest` provides functionalities for creating a transaction request that creates a contract.\n */\nexport class CreateTransactionRequest extends BaseTransactionRequest {\n  static from(obj: CreateTransactionRequestLike) {\n    if (obj instanceof this) {\n      return obj;\n    }\n    return new this(obj);\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Create as const;\n  /** Witness index of contract bytecode to create */\n  bytecodeWitnessIndex: number;\n  /** Salt */\n  salt: string;\n  /** List of storage slots to initialize */\n  storageSlots: TransactionRequestStorageSlot[];\n\n  /**\n   * Creates an instance `CreateTransactionRequest`.\n   *\n   * @param createTransactionRequestLike - The initial values for the instance\n   */\n  constructor({\n    bytecodeWitnessIndex,\n    salt,\n    storageSlots,\n    ...rest\n  }: CreateTransactionRequestLike = {}) {\n    super(rest);\n    this.bytecodeWitnessIndex = bytecodeWitnessIndex ?? 0;\n    this.salt = hexlify(salt ?? ZeroBytes32);\n    this.storageSlots = [...(storageSlots ?? [])];\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionCreate`.\n   *\n   * @returns The transaction create object.\n   */\n  toTransaction(): TransactionCreate {\n    const baseTransaction = this.getBaseTransaction();\n    const bytecodeWitnessIndex = this.bytecodeWitnessIndex;\n    const storageSlots = this.storageSlots?.map(storageSlotify) ?? [];\n    return {\n      type: TransactionType.Create,\n      ...baseTransaction,\n      bytecodeLength: baseTransaction.witnesses[bytecodeWitnessIndex].dataLength / 4,\n      bytecodeWitnessIndex,\n      storageSlotsCount: storageSlots.length,\n      salt: this.salt ? hexlify(this.salt) : ZeroBytes32,\n      storageSlots,\n    };\n  }\n\n  /**\n   * Get contract created outputs for the transaction.\n   *\n   * @returns An array of contract created transaction request outputs.\n   */\n  getContractCreatedOutputs(): ContractCreatedTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractCreatedTransactionRequestOutput =>\n        output.type === OutputType.ContractCreated\n    );\n  }\n\n  /**\n   * Adds a contract created output to the transaction request.\n   *\n   * @param contractId - The contract ID.\n   * @param stateRoot - The state root.\n   */\n  addContractCreatedOutput(\n    /** Contract ID */\n    contractId: BytesLike,\n    /** State Root */\n    stateRoot: BytesLike\n  ) {\n    this.pushOutput({\n      type: OutputType.ContractCreated,\n      contractId,\n      stateRoot,\n    });\n  }\n}\n","import { arrayify } from '@ethersproject/bytes';\nimport type { AbstractScriptRequest } from '@fuel-ts/interfaces';\n\n// We can't import this from `@fuel-ts/script` because it causes\n// cyclic dependency errors so we duplicate it here.\n/** @hidden */\nexport const returnZeroScript: AbstractScriptRequest<void> = {\n  /*\n      Opcode::RET(REG_ZERO)\n      Opcode::NOOP\n    */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x24000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n\n/** @hidden */\nexport const withdrawScript: AbstractScriptRequest<void> = {\n  /*\n          The following code loads some basic values into registers and calls SMO to create an output message\n  \n          5040C010 \t- ADDI r16 $is i16   [r16 now points to memory 16 bytes from the start of this program (start of receiver data)]\n          5D44C006\t- LW r17 $is i6      [r17 set to the 6th word in this program (6*8=48 bytes from the start of this program)]\n          4C400011\t- SMO r16 r0 r0 r17  [send message out to address starting at memory position r16 with amount in r17]\n          24000000\t- RET                [return 0]\n          00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000 [recipient address]\n          00000000 00000000 [amount value]\n      */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  bytes: arrayify('0x5040C0105D44C0064C40001124000000'),\n  encodeScriptData: () => new Uint8Array(0),\n};\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport { addressify } from '@fuel-ts/address';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport type { AbstractScriptRequest, ContractIdLike } from '@fuel-ts/interfaces';\nimport type { TransactionScript } from '@fuel-ts/transactions';\nimport { InputType, OutputType, TransactionType } from '@fuel-ts/transactions';\n\nimport type { ContractTransactionRequestInput } from './input';\nimport type { ContractTransactionRequestOutput, VariableTransactionRequestOutput } from './output';\nimport { returnZeroScript } from './scripts';\nimport type { BaseTransactionRequestLike } from './transaction-request';\nimport { BaseTransactionRequest } from './transaction-request';\n\n/**\n * @hidden\n */\nexport interface ScriptTransactionRequestLike extends BaseTransactionRequestLike {\n  /** Script to execute */\n  script?: BytesLike;\n  /** Script input data (parameters) */\n  scriptData?: BytesLike;\n  /** determined bytes offset for start of script data */\n  bytesOffset?: number | undefined;\n}\n\n/**\n * `ScriptTransactionRequest` provides functionalities for creating a transaction request that uses a script.\n */\nexport class ScriptTransactionRequest extends BaseTransactionRequest {\n  static from(obj: ScriptTransactionRequestLike) {\n    if (obj instanceof this) {\n      return obj;\n    }\n    return new this(obj);\n  }\n\n  /** Type of the transaction */\n  type = TransactionType.Script as const;\n  /** Script to execute */\n  script: Uint8Array;\n  /** Script input data (parameters) */\n  scriptData: Uint8Array;\n  /** determined bytes offset for start of script data */\n  bytesOffset: number | undefined;\n\n  /**\n   * Constructor for `ScriptTransactionRequest`.\n   *\n   * @param scriptTransactionRequestLike - The initial values for the instance.\n   */\n  constructor({ script, scriptData, bytesOffset, ...rest }: ScriptTransactionRequestLike = {}) {\n    super(rest);\n    this.script = arrayify(script ?? returnZeroScript.bytes);\n    this.scriptData = arrayify(scriptData ?? returnZeroScript.encodeScriptData());\n    this.bytesOffset = bytesOffset;\n  }\n\n  /**\n   * Converts the transaction request to a `TransactionScript`.\n   *\n   * @returns The transaction script object.\n   */\n  toTransaction(): TransactionScript {\n    const script = arrayify(this.script ?? '0x');\n    const scriptData = arrayify(this.scriptData ?? '0x');\n    return {\n      type: TransactionType.Script,\n      ...super.getBaseTransaction(),\n      scriptLength: script.length,\n      scriptDataLength: scriptData.length,\n      receiptsRoot: ZeroBytes32,\n      script: hexlify(script),\n      scriptData: hexlify(scriptData),\n    };\n  }\n\n  /**\n   * Get contract inputs for the transaction.\n   *\n   * @returns An array of contract transaction request inputs.\n   */\n  getContractInputs(): ContractTransactionRequestInput[] {\n    return this.inputs.filter(\n      (input): input is ContractTransactionRequestInput => input.type === InputType.Contract\n    );\n  }\n\n  /**\n   * Get contract outputs for the transaction.\n   *\n   * @returns An array of contract transaction request outputs.\n   */\n  getContractOutputs(): ContractTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is ContractTransactionRequestOutput => output.type === OutputType.Contract\n    );\n  }\n\n  /**\n   * Get variable outputs for the transaction.\n   *\n   * @returns An array of variable transaction request outputs.\n   */\n  getVariableOutputs(): VariableTransactionRequestOutput[] {\n    return this.outputs.filter(\n      (output): output is VariableTransactionRequestOutput => output.type === OutputType.Variable\n    );\n  }\n\n  /**\n   * Set the script and its data.\n   *\n   * @param script - The abstract script request.\n   * @param data - The script data.\n   */\n  setScript<T>(script: AbstractScriptRequest<T>, data: T) {\n    this.scriptData = script.encodeScriptData(data);\n    this.script = script.bytes;\n\n    if (this.bytesOffset === undefined) {\n      this.bytesOffset = this.scriptData.byteLength;\n    }\n  }\n\n  /**\n   * Adds variable outputs to the transaction request.\n   *\n   * @param numberOfVariables - The number of variables to add.\n   * @returns The new length of the outputs array.\n   */\n  addVariableOutputs(numberOfVariables: number = 1) {\n    let outputsNumber = numberOfVariables;\n\n    while (outputsNumber) {\n      this.pushOutput({\n        type: OutputType.Variable,\n      });\n      outputsNumber -= 1;\n    }\n\n    return this.outputs.length - 1;\n  }\n\n  /**\n   * Adds a contract input and output to the transaction request.\n   *\n   * @param contract - The contract ID.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  addContractInputAndOutput(contract: ContractIdLike): ScriptTransactionRequest {\n    const contractAddress = addressify(contract);\n\n    // Add only one input contract per contractId\n    if (this.getContractInputs().find((i) => i.contractId === contractAddress.toB256())) {\n      return this;\n    }\n\n    const inputIndex = super.pushInput({\n      type: InputType.Contract,\n      contractId: contractAddress.toB256(),\n      txPointer: '0x00000000000000000000000000000000',\n    });\n\n    this.pushOutput({\n      type: OutputType.Contract,\n      inputIndex,\n    });\n\n    return this;\n  }\n\n  /**\n   * Sets the data for the transaction request.\n   *\n   * @param abi - Script JSON ABI.\n   * @param args - The input arguments.\n   * @returns The current instance of the `ScriptTransactionRequest`.\n   */\n  setData(abi: JsonAbi, args: InputValue[]): ScriptTransactionRequest {\n    const abiInterface = new Interface(abi);\n    this.scriptData = abiInterface.functions.main.encodeArguments(args);\n    return this;\n  }\n}\n","import { TransactionType } from '@fuel-ts/transactions';\n\nimport { CreateTransactionRequest } from './create-transaction-request';\nimport { ScriptTransactionRequest } from './script-transaction-request';\nimport type { TransactionRequestLike, TransactionRequest } from './types';\n\n/** @hidden */\nexport const transactionRequestify = (obj: TransactionRequestLike): TransactionRequest => {\n  if (obj instanceof ScriptTransactionRequest || obj instanceof CreateTransactionRequest) {\n    return obj;\n  }\n  switch (obj.type) {\n    case TransactionType.Script: {\n      return ScriptTransactionRequest.from(obj);\n    }\n    case TransactionType.Create: {\n      return CreateTransactionRequest.from(obj);\n    }\n    default: {\n      throw new Error(\n        `Unknown transaction type: ${\n          // @ts-expect-error Unreachable code\n          obj.type\n        }`\n      );\n    }\n  }\n};\n","import type { Input, InputCoin, InputContract, InputMessage } from '@fuel-ts/transactions';\nimport { InputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getInputsByType<T = Input>(inputs: Input[], type: InputType) {\n  return inputs.filter((i) => i.type === type) as T[];\n}\n\n/** @hidden */\nexport function getInputsCoin(inputs: Input[]) {\n  return getInputsByType<InputCoin>(inputs, InputType.Coin);\n}\n\n/** @hidden */\nexport function getInputsMessage(inputs: Input[]) {\n  return getInputsByType<InputMessage>(inputs, InputType.Message);\n}\n\n/** @hidden */\nexport function getInputFromAssetId(inputs: Input[], assetId: string) {\n  const coinInputs = getInputsCoin(inputs);\n  const messageInputs = getInputsMessage(inputs);\n  const coinInput = coinInputs.find((i) => i.assetId === assetId);\n  // TODO: should include assetId in InputMessage as well. for now we're mocking ETH\n  const messageInput = messageInputs.find(\n    (_) => assetId === '0x0000000000000000000000000000000000000000000000000000000000000000'\n  );\n\n  return coinInput || messageInput;\n}\n\n/** @hidden */\nexport function getInputContractFromIndex(\n  inputs: Input[],\n  inputIndex: number\n): InputContract | undefined {\n  if (inputIndex == null) return undefined;\n\n  const contractInput = inputs?.[inputIndex];\n\n  if (!contractInput) return undefined;\n  if (contractInput.type !== InputType.Contract) {\n    throw new Error('Contract input should be of type Contract');\n  }\n\n  return contractInput as InputContract;\n}\n\n/** @hidden */\nexport function getInputAccountAddress(input: Input) {\n  if (input.type === InputType.Coin) {\n    return input.owner.toString();\n  }\n\n  if (input.type === InputType.Message) {\n    return input.recipient.toString();\n  }\n\n  return '';\n}\n","import type {\n  Output,\n  OutputCoin,\n  OutputContract,\n  OutputContractCreated,\n} from '@fuel-ts/transactions';\nimport { OutputType } from '@fuel-ts/transactions';\n\n/** @hidden */\nexport function getOutputsByType<T = Output>(outputs: Output[], type: OutputType) {\n  return outputs.filter((o) => o.type === type) as T[];\n}\n\n/** @hidden */\nexport function getOutputsContractCreated(outputs: Output[]) {\n  return getOutputsByType<OutputContractCreated>(outputs, OutputType.ContractCreated);\n}\n\n/** @hidden */\nexport function getOutputsCoin(outputs: Output[]) {\n  return getOutputsByType<OutputCoin>(outputs, OutputType.Coin);\n}\n\n/** @hidden */\nexport function getOutputsContract(outputs: Output[]) {\n  return getOutputsByType<OutputContract>(outputs, OutputType.Contract);\n}\n","import { bn } from '@fuel-ts/math';\nimport { ReceiptType, type Output, TransactionType } from '@fuel-ts/transactions';\n\nimport type {\n  TransactionResultCallReceipt,\n  TransactionResultMessageOutReceipt,\n  TransactionResultReceipt,\n  TransactionResultTransferOutReceipt,\n} from '../transaction-response';\n\nimport { getFunctionCall } from './call';\nimport {\n  getInputFromAssetId,\n  getInputAccountAddress,\n  getInputContractFromIndex,\n  getInputsCoin,\n} from './input';\nimport { getOutputsCoin, getOutputsContract, getOutputsContractCreated } from './output';\nimport type {\n  AbiParam,\n  InputOutputParam,\n  InputParam,\n  OperationCoin,\n  RawPayloadParam,\n  ReceiptParam,\n} from './types';\nimport {\n  type Operation,\n  type GetOperationParams,\n  AddressType,\n  ChainName,\n  OperationName,\n  TransactionTypeNameEnum,\n} from './types';\n\n/** @hidden */\nexport function getReceiptsByType<T = TransactionResultReceipt>(\n  receipts: TransactionResultReceipt[],\n  type: ReceiptType\n) {\n  return (receipts ?? []).filter((r) => r.type === type) as T[];\n}\n\n/** @hidden */\nexport function getTransactionTypeName(transactionType: TransactionType): TransactionTypeNameEnum {\n  switch (transactionType) {\n    case TransactionType.Mint:\n      return TransactionTypeNameEnum.Mint;\n    case TransactionType.Create:\n      return TransactionTypeNameEnum.Create;\n    case TransactionType.Script:\n      return TransactionTypeNameEnum.Script;\n    default:\n      throw new Error('Unknown transaction type');\n  }\n}\n\n/** @hidden */\nexport function isType(transactionType: TransactionType, type: TransactionTypeNameEnum) {\n  const txType = getTransactionTypeName(transactionType);\n\n  return txType === type;\n}\n\n/** @hidden */\nexport function isTypeMint(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeNameEnum.Mint);\n}\n\n/** @hidden */\nexport function isTypeCreate(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeNameEnum.Create);\n}\n\n/** @hidden */\nexport function isTypeScript(transactionType: TransactionType) {\n  return isType(transactionType, TransactionTypeNameEnum.Script);\n}\n\n/** @hidden */\nexport function hasSameAssetId(a: OperationCoin) {\n  return (b: OperationCoin) => a.assetId === b.assetId;\n}\n\n/** @hidden */\nexport function getReceiptsCall(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultCallReceipt>(receipts, ReceiptType.Call);\n}\n\n/** @hidden */\nexport function getReceiptsMessageOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultMessageOutReceipt>(receipts, ReceiptType.MessageOut);\n}\n\n/** @hidden */\nconst mergeAssets = (op1: Operation, op2: Operation) => {\n  const assets1 = op1.assetsSent || [];\n  const assets2 = op2.assetsSent || [];\n  const filtered = assets2.filter((c) => !assets1.some(hasSameAssetId(c)));\n  return assets1\n    .map((coin) => {\n      const asset = assets2.find(hasSameAssetId(coin));\n      if (!asset) return coin;\n      return { ...coin, amount: bn(coin.amount).add(asset.amount) };\n    })\n    .concat(filtered);\n};\n\n/** @hidden */\nfunction isSameOperation(a: Operation, b: Operation) {\n  return (\n    a.name === b.name &&\n    a.from?.address === b.from?.address &&\n    a.to?.address === b.to?.address &&\n    a.from?.type === b.from?.type &&\n    a.to?.type === b.to?.type\n  );\n}\n\n/** @hidden */\nexport function addOperation(operations: Operation[], toAdd: Operation) {\n  const ops = operations\n    .map((op) => {\n      // if it's not same operation, don't change. we just wanna stack the same operation\n      if (!isSameOperation(op, toAdd)) return null;\n\n      let newOp = { ...op };\n\n      // if it's adding new assets\n      if (toAdd.assetsSent?.length) {\n        // if prev op had assets, merge them. Otherwise just add the new assets\n        newOp = {\n          ...newOp,\n          assetsSent: op.assetsSent?.length ? mergeAssets(op, toAdd) : toAdd.assetsSent,\n        };\n      }\n\n      // if it's adding new calls,\n      if (toAdd.calls?.length) {\n        /*\n[]          for calls we don't stack as grouping is not desired.\n          we wanna show all calls in the same operation\n          with each respective assets, amounts, functions, arguments.\n        */\n        newOp = {\n          ...newOp,\n          calls: [...(op.calls || []), ...(toAdd.calls || [])],\n        };\n      }\n\n      return newOp;\n    })\n    .filter(Boolean) as Operation[];\n\n  // if this operation didn't exist before just add it to the end\n  return ops.length ? ops : [...operations, toAdd];\n}\n\n/** @hidden */\nexport function getReceiptsTransferOut(receipts: TransactionResultReceipt[]) {\n  return getReceiptsByType<TransactionResultTransferOutReceipt>(receipts, ReceiptType.TransferOut);\n}\n\n/** @hidden */\nexport function getContractTransferOperations({ receipts }: ReceiptParam): Operation[] {\n  const transferOutReceipts = getReceiptsTransferOut(receipts);\n\n  const contractTransferOperations = transferOutReceipts.reduce(\n    (prevContractTransferOps, receipt) => {\n      const newContractTransferOps = addOperation(prevContractTransferOps, {\n        name: OperationName.contractTransfer,\n        from: {\n          type: AddressType.contract,\n          address: receipt.from,\n        },\n        to: {\n          type: AddressType.account,\n          address: receipt.to,\n        },\n        assetsSent: [\n          {\n            amount: receipt.amount,\n            assetId: receipt.assetId,\n          },\n        ],\n      });\n\n      return newContractTransferOps;\n    },\n    [] as Operation[]\n  );\n\n  return contractTransferOperations;\n}\n\n/** @hidden */\nexport function getWithdrawFromFuelOperations({\n  inputs,\n  receipts,\n}: InputParam & ReceiptParam): Operation[] {\n  const messageOutReceipts = getReceiptsMessageOut(receipts);\n\n  const withdrawFromFuelOperations = messageOutReceipts.reduce(\n    (prevWithdrawFromFuelOps, receipt) => {\n      // TODO: replace this hardcode with receipt.assetId when assetId gets added to MessageOutReceipt\n      const assetId = '0x0000000000000000000000000000000000000000000000000000000000000000';\n      const input = getInputFromAssetId(inputs, assetId);\n      if (input) {\n        const inputAddress = getInputAccountAddress(input);\n        const newWithdrawFromFuelOps = addOperation(prevWithdrawFromFuelOps, {\n          name: OperationName.withdrawFromFuel,\n          from: {\n            type: AddressType.account,\n            address: inputAddress,\n          },\n          to: {\n            type: AddressType.account,\n            address: receipt.recipient.toString(),\n            chain: ChainName.ethereum,\n          },\n          assetsSent: [\n            {\n              amount: receipt.amount,\n              assetId,\n            },\n          ],\n        });\n\n        return newWithdrawFromFuelOps;\n      }\n\n      return prevWithdrawFromFuelOps;\n    },\n    [] as Operation[]\n  );\n\n  return withdrawFromFuelOperations;\n}\n\n/** @hidden */\nexport function getContractCallOperations({\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n}: InputOutputParam & ReceiptParam & AbiParam & RawPayloadParam): Operation[] {\n  const contractCallReceipts = getReceiptsCall(receipts);\n  const contractOutputs = getOutputsContract(outputs);\n\n  const contractCallOperations = contractOutputs.reduce((prevOutputCallOps, output) => {\n    const contractInput = getInputContractFromIndex(inputs, output.inputIndex);\n\n    if (contractInput) {\n      const newCallOps = contractCallReceipts.reduce((prevContractCallOps, receipt) => {\n        if (receipt.to === contractInput.contractID) {\n          const input = getInputFromAssetId(inputs, receipt.assetId);\n          if (input) {\n            const inputAddress = getInputAccountAddress(input);\n            const calls = [];\n\n            const abi = abiMap?.[contractInput.contractID];\n            if (abi) {\n              calls.push(\n                getFunctionCall({\n                  abi,\n                  receipt,\n                  rawPayload,\n                })\n              );\n            }\n\n            const newContractCallOps = addOperation(prevContractCallOps, {\n              name: OperationName.contractCall,\n              from: {\n                type: AddressType.account,\n                address: inputAddress,\n              },\n              to: {\n                type: AddressType.contract,\n                address: receipt.to,\n              },\n              // if no amount is forwarded to the contract, skip showing assetsSent\n              assetsSent: receipt.amount?.isZero()\n                ? undefined\n                : [\n                    {\n                      amount: receipt.amount,\n                      assetId: receipt.assetId,\n                    },\n                  ],\n              calls,\n            });\n\n            return newContractCallOps;\n          }\n        }\n        return prevContractCallOps;\n      }, prevOutputCallOps as Operation[]);\n\n      return newCallOps;\n    }\n\n    return prevOutputCallOps;\n  }, [] as Operation[]);\n\n  return contractCallOperations;\n}\n\n/** @hidden */\nexport function getTransferOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n\n  let operations: Operation[] = [];\n  coinOutputs.forEach((output) => {\n    const input = getInputFromAssetId(inputs, output.assetId);\n\n    if (input) {\n      const inputAddress = getInputAccountAddress(input);\n      operations = addOperation(operations, {\n        name: OperationName.transfer,\n        from: {\n          type: AddressType.account,\n          address: inputAddress,\n        },\n        to: {\n          type: AddressType.account,\n          address: output.to.toString(),\n        },\n        assetsSent: [\n          {\n            assetId: output.assetId.toString(),\n            amount: output.amount,\n          },\n        ],\n      });\n    }\n  });\n\n  return operations;\n}\n\n/** @hidden */\nexport function getPayProducerOperations(outputs: Output[]): Operation[] {\n  const coinOutputs = getOutputsCoin(outputs);\n  const payProducerOperations = coinOutputs.reduce((prev, output) => {\n    const operations = addOperation(prev, {\n      name: OperationName.payBlockProducer,\n      from: {\n        type: AddressType.account,\n        address: 'Network',\n      },\n      to: {\n        type: AddressType.account,\n        address: output.to.toString(),\n      },\n      assetsSent: [\n        {\n          assetId: output.assetId.toString(),\n          amount: output.amount,\n        },\n      ],\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return payProducerOperations;\n}\n\n/** @hidden */\nexport function getContractCreatedOperations({ inputs, outputs }: InputOutputParam): Operation[] {\n  const contractCreatedOutputs = getOutputsContractCreated(outputs);\n  const input = getInputsCoin(inputs)[0];\n  const fromAddress = getInputAccountAddress(input);\n  const contractCreatedOperations = contractCreatedOutputs.reduce((prev, contractCreatedOutput) => {\n    const operations = addOperation(prev, {\n      name: OperationName.contractCreated,\n      from: {\n        type: AddressType.account,\n        address: fromAddress,\n      },\n      to: {\n        type: AddressType.contract,\n        address: contractCreatedOutput?.contractId || '',\n      },\n    });\n\n    return operations;\n  }, [] as Operation[]);\n\n  return contractCreatedOperations;\n}\n\n/** @hidden */\nexport function getOperations({\n  transactionType,\n  inputs,\n  outputs,\n  receipts,\n  abiMap,\n  rawPayload,\n}: GetOperationParams): Operation[] {\n  if (isTypeCreate(transactionType)) {\n    return [\n      ...getContractCreatedOperations({ inputs, outputs }),\n      ...getTransferOperations({ inputs, outputs }),\n    ];\n  }\n\n  if (isTypeScript(transactionType)) {\n    return [\n      ...getTransferOperations({ inputs, outputs }),\n      ...getContractCallOperations({\n        inputs,\n        outputs,\n        receipts,\n        abiMap,\n        rawPayload,\n      }),\n      ...getContractTransferOperations({ receipts }),\n      ...getWithdrawFromFuelOperations({ inputs, receipts }),\n    ];\n  }\n  // at this point we are sure it's a mint transaction\n  return [...getPayProducerOperations(outputs)];\n}\n","import { Interface, VM_TX_MEMORY, type JsonAbi } from '@fuel-ts/abi-coder';\nimport { bn } from '@fuel-ts/math';\nimport type { ReceiptCall } from '@fuel-ts/transactions';\n\ntype GetFunctionCallProps = {\n  abi: JsonAbi;\n  receipt: ReceiptCall;\n  rawPayload?: string;\n};\n\nexport const getFunctionCall = ({ abi, receipt, rawPayload }: GetFunctionCallProps) => {\n  const abiInterface = new Interface(abi);\n  const callFunctionSelector = receipt.param1.toHex(8);\n  const functionFragment = abiInterface.getFunction(callFunctionSelector);\n  const inputs = functionFragment.jsonFn.inputs;\n\n  let encodedArgs;\n\n  // if has more than 1 input or input type is bigger than 8 bytes, then it's a pointer to data\n  if (functionFragment.isInputDataPointer()) {\n    if (rawPayload) {\n      // calculate offset to get function params from rawPayload. should also consider vm offset: VM_TX_MEMORY\n      const argsOffset = bn(receipt.param2).sub(VM_TX_MEMORY).toNumber();\n\n      // slice(2) to remove first 0x, then slice again to remove offset and get only args\n      encodedArgs = `0x${rawPayload.slice(2).slice(argsOffset * 2)}`;\n    }\n  } else {\n    // for small inputs, param2 is directly the value\n    encodedArgs = receipt.param2.toHex();\n  }\n\n  let argumentsProvided;\n  if (encodedArgs) {\n    // use bytes got from rawPayload to decode function params\n    const data = functionFragment.decodeArguments(encodedArgs);\n    if (data) {\n      // put together decoded data with input names from abi\n      argumentsProvided = inputs.reduce((prev, input, index) => {\n        const value = data[index];\n        const name = input.name;\n\n        if (name) {\n          return {\n            ...prev,\n            // reparse to remove bn\n            [name]: JSON.parse(JSON.stringify(value)),\n          };\n        }\n\n        return prev;\n      }, {});\n    }\n  }\n\n  const call = {\n    functionSignature: functionFragment.signature,\n    functionName: functionFragment.name,\n    argumentsProvided,\n    ...(receipt.amount?.isZero() ? {} : { amount: receipt.amount, assetId: receipt.assetId }),\n  };\n\n  return call;\n};\n","import { ReceiptType } from '@fuel-ts/transactions';\n\nimport type { GqlReceiptFragmentFragment } from '../__generated__/operations';\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { assembleReceiptByType } from '../utils';\n\nimport type { BurnedOrMintedAsset } from './types';\n\nexport const processGqlReceipt = (\n  gqlReceipt: GqlReceiptFragmentFragment\n): TransactionResultReceipt => {\n  const receipt = assembleReceiptByType(gqlReceipt);\n\n  switch (receipt.type) {\n    case ReceiptType.ReturnData: {\n      return {\n        ...receipt,\n        data: gqlReceipt.data || '0x',\n      };\n    }\n    case ReceiptType.LogData: {\n      return {\n        ...receipt,\n        data: gqlReceipt.data || '0x',\n      };\n    }\n    default:\n      return receipt;\n  }\n};\n\nexport const extractAssetIdFromBurnOrMintReceipts = (\n  receipts: Array<TransactionResultReceipt>\n): {\n  mintedAssets: BurnedOrMintedAsset[];\n  burnedAssets: BurnedOrMintedAsset[];\n} => {\n  const mintedAssets: BurnedOrMintedAsset[] = [];\n  const burnedAssets: BurnedOrMintedAsset[] = [];\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.Mint) {\n      mintedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    } else if (receipt.type === ReceiptType.Burn) {\n      burnedAssets.push({\n        subId: receipt.subId,\n        contractId: receipt.contractId,\n        assetId: receipt.assetId,\n        amount: receipt.val,\n      });\n    }\n  });\n\n  return { mintedAssets, burnedAssets };\n};\n","import type {\n  BlockId,\n  GqlTransactionStatusesNames,\n  GraphqlTransactionStatus,\n  Time,\n  TransactionSummary,\n} from './types';\nimport { SimplifiedTransactionStatusNameEnum } from './types';\n\n/** @hidden */\nexport const getTransactionStatusName = (gqlStatus: GqlTransactionStatusesNames) => {\n  switch (gqlStatus) {\n    case 'FailureStatus':\n      return SimplifiedTransactionStatusNameEnum.failure;\n    case 'SuccessStatus':\n      return SimplifiedTransactionStatusNameEnum.success;\n    case 'SubmittedStatus':\n      return SimplifiedTransactionStatusNameEnum.submitted;\n    case 'SqueezedOutStatus':\n      return SimplifiedTransactionStatusNameEnum.squeezedout;\n    default:\n      throw new Error('Unknown transaction status');\n  }\n};\n\ntype IProcessGraphqlStatusResponse = Pick<\n  TransactionSummary,\n  'time' | 'blockId' | 'isStatusPending' | 'isStatusSuccess' | 'isStatusFailure' | 'status'\n>;\n\n/** @hidden */\nexport const processGraphqlStatus = (gqlTransactionStatus?: GraphqlTransactionStatus) => {\n  let time: Time;\n  let blockId: BlockId | undefined;\n  let status: SimplifiedTransactionStatusNameEnum | undefined;\n\n  let isStatusFailure = false;\n  let isStatusSuccess = false;\n  let isStatusPending = false;\n\n  if (gqlTransactionStatus?.type) {\n    status = getTransactionStatusName(gqlTransactionStatus.type);\n\n    switch (gqlTransactionStatus.type) {\n      case 'SuccessStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block.id;\n        isStatusSuccess = true;\n        break;\n\n      case 'FailureStatus':\n        time = gqlTransactionStatus.time;\n        blockId = gqlTransactionStatus.block.id;\n        isStatusFailure = true;\n        break;\n\n      case 'SubmittedStatus':\n        time = gqlTransactionStatus.time;\n        isStatusPending = true;\n        break;\n      default:\n    }\n  }\n\n  const processedGraphqlStatus: IProcessGraphqlStatusResponse = {\n    time,\n    blockId,\n    status,\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n  };\n\n  return processedGraphqlStatus;\n};\n","import { hexlify } from '@ethersproject/bytes';\nimport type { BN } from '@fuel-ts/math';\nimport { type Transaction } from '@fuel-ts/transactions';\n\nimport type { TransactionResultReceipt } from '../transaction-response';\nimport { calculateTransactionFee } from '../utils';\n\nimport {\n  getOperations,\n  getTransactionTypeName,\n  isTypeMint,\n  isTypeCreate,\n  isTypeScript,\n} from './operations';\nimport { extractAssetIdFromBurnOrMintReceipts } from './receipt';\nimport { processGraphqlStatus } from './status';\nimport type { AbiParam, GraphqlTransactionStatus, TransactionSummary } from './types';\n\ninterface IAssembleTransactionSummaryParams {\n  id?: string;\n  gasPrice: BN;\n  gasPerByte?: BN;\n  gasPriceFactor?: BN;\n  transaction: Transaction;\n  transactionBytes: Uint8Array;\n  gqlTransactionStatus?: GraphqlTransactionStatus;\n  receipts: TransactionResultReceipt[];\n  abiParam?: AbiParam;\n}\n\n/** @hidden */\nexport function assembleTransactionSummary<TTransactionType = void>(\n  params: IAssembleTransactionSummaryParams\n) {\n  const {\n    receipts,\n    gasPerByte,\n    gasPrice,\n    gasPriceFactor,\n    transaction,\n    transactionBytes,\n    id,\n    gqlTransactionStatus,\n    abiParam,\n  } = params;\n\n  const { gasUsed, fee } = calculateTransactionFee({\n    receipts,\n    gasPrice,\n    gasPerByte,\n    gasPriceFactor,\n    transactionBytes,\n    transactionType: transaction.type,\n    transactionWitnesses: transaction?.witnesses || [],\n  });\n\n  const operations = getOperations({\n    transactionType: transaction.type,\n    inputs: transaction.inputs || [],\n    outputs: transaction.outputs || [],\n    receipts,\n    rawPayload: hexlify(transactionBytes),\n    abiMap: abiParam?.abiMap,\n  });\n\n  const typeName = getTransactionTypeName(transaction.type);\n\n  const { isStatusFailure, isStatusPending, isStatusSuccess, blockId, status, time } =\n    processGraphqlStatus(gqlTransactionStatus);\n\n  const { mintedAssets, burnedAssets } = extractAssetIdFromBurnOrMintReceipts(receipts);\n\n  const transactionSummary: TransactionSummary<TTransactionType> = {\n    id,\n    fee,\n    gasUsed,\n    operations,\n    type: typeName,\n    blockId,\n    time,\n    status,\n    receipts,\n    mintedAssets,\n    burnedAssets,\n    isTypeMint: isTypeMint(transaction.type),\n    isTypeCreate: isTypeCreate(transaction.type),\n    isTypeScript: isTypeScript(transaction.type),\n    isStatusFailure,\n    isStatusSuccess,\n    isStatusPending,\n    transaction: transaction as Transaction<TTransactionType>,\n  };\n\n  return transactionSummary;\n}\n","import { arrayify } from '@ethersproject/bytes';\nimport type { BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  ReceiptCall,\n  ReceiptLog,\n  ReceiptLogData,\n  ReceiptPanic,\n  ReceiptReturn,\n  ReceiptReturnData,\n  ReceiptRevert,\n  ReceiptTransfer,\n  ReceiptTransferOut,\n  ReceiptScriptResult,\n  ReceiptMessageOut,\n  Transaction,\n  ReceiptMint,\n  ReceiptBurn,\n} from '@fuel-ts/transactions';\nimport { TransactionCoder } from '@fuel-ts/transactions';\n\nimport type { GqlGetTransactionWithReceiptsQuery } from '../__generated__/operations';\nimport type Provider from '../provider';\nimport { assembleTransactionSummary } from '../transaction-summary/assemble-transaction-summary';\nimport { processGqlReceipt } from '../transaction-summary/receipt';\nimport type {\n  TransactionSummary,\n  FailureStatus,\n  GqlTransaction,\n} from '../transaction-summary/types';\nimport { sleep } from '../utils';\n\n/** @hidden */\nexport type TransactionResultCallReceipt = ReceiptCall;\n/** @hidden */\nexport type TransactionResultReturnReceipt = ReceiptReturn;\n/** @hidden */\nexport type TransactionResultReturnDataReceipt = ReceiptReturnData & { data: string };\n/** @hidden */\nexport type TransactionResultPanicReceipt = ReceiptPanic;\n/** @hidden */\nexport type TransactionResultRevertReceipt = ReceiptRevert;\n/** @hidden */\nexport type TransactionResultLogReceipt = ReceiptLog;\n/** @hidden */\nexport type TransactionResultLogDataReceipt = ReceiptLogData & { data: string };\n/** @hidden */\nexport type TransactionResultTransferReceipt = ReceiptTransfer;\n/** @hidden */\nexport type TransactionResultTransferOutReceipt = ReceiptTransferOut;\n/** @hidden */\nexport type TransactionResultScriptResultReceipt = ReceiptScriptResult;\n/** @hidden */\nexport type TransactionResultMessageOutReceipt = ReceiptMessageOut;\nexport type TransactionResultMintReceipt = ReceiptMint;\nexport type TransactionResultBurnReceipt = ReceiptBurn;\n\n/** @hidden */\nexport type TransactionResultReceipt =\n  | ReceiptCall\n  | ReceiptReturn\n  | (ReceiptReturnData & { data: string })\n  | ReceiptPanic\n  | ReceiptRevert\n  | ReceiptLog\n  | (ReceiptLogData & { data: string })\n  | ReceiptTransfer\n  | ReceiptTransferOut\n  | ReceiptScriptResult\n  | ReceiptMessageOut\n  | TransactionResultMintReceipt\n  | TransactionResultBurnReceipt;\n\nconst STATUS_POLLING_INTERVAL_MAX_MS = 5000;\nconst STATUS_POLLING_INTERVAL_MIN_MS = 1000;\n\n/** @hidden */\nexport type TransactionResult<TTransactionType = void> = TransactionSummary<TTransactionType> & {\n  gqlTransaction: GqlTransaction;\n};\n\n/**\n * Represents a response for a transaction.\n */\nexport class TransactionResponse {\n  /** Transaction ID */\n  id: string;\n  /** Current provider */\n  provider: Provider;\n  /** Gas used on the transaction */\n  gasUsed: BN = bn(0);\n  /** Number off attempts to get the committed tx */\n  attempts: number = 0;\n\n  /**\n   * Constructor for `TransactionResponse`.\n   *\n   * @param id - The transaction ID.\n   * @param provider - The provider.\n   */\n  constructor(id: string, provider: Provider) {\n    this.id = id;\n    this.provider = provider;\n  }\n\n  /**\n   * Fetch the transaction with receipts from the provider.\n   *\n   * @returns Transaction with receipts query result.\n   */\n  async fetch(): Promise<GqlGetTransactionWithReceiptsQuery> {\n    const transaction = await this.provider.operations.getTransactionWithReceipts({\n      transactionId: this.id,\n    });\n\n    return transaction;\n  }\n\n  /**\n   * Decode the raw payload of the transaction.\n   *\n   * @param transactionWithReceipts - The transaction with receipts object.\n   * @returns The decoded transaction.\n   */\n  decodeTransaction<TTransactionType = void>(\n    transactionWithReceipts: NonNullable<GqlGetTransactionWithReceiptsQuery['transaction']>\n  ) {\n    return new TransactionCoder().decode(\n      arrayify(transactionWithReceipts.rawPayload),\n      0\n    )?.[0] as Transaction<TTransactionType>;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction result\n   */\n  async waitForResult<TTransactionType = void>(): Promise<TransactionResult<TTransactionType>> {\n    const {\n      transaction: gqlTransaction,\n      chain: {\n        consensusParameters: { gasPerByte, gasPriceFactor },\n      },\n    } = await this.fetch();\n\n    const nullResponse = !gqlTransaction?.status?.type;\n    const isStatusSubmitted = gqlTransaction?.status?.type === 'SubmittedStatus';\n\n    if (nullResponse || isStatusSubmitted) {\n      // This code implements a similar approach from the fuel-core await_transaction_commit\n      // https://github.com/FuelLabs/fuel-core/blob/cb37f9ce9a81e033bde0dc43f91494bc3974fb1b/fuel-client/src/client.rs#L356\n      // double the interval duration on each attempt until max is reached\n      //\n      // This can wait forever, it would be great to implement a max timeout here, but it would require\n      // improve request handler as response Error not mean that the tx fail.\n      this.attempts += 1;\n      await sleep(\n        Math.min(STATUS_POLLING_INTERVAL_MIN_MS * this.attempts, STATUS_POLLING_INTERVAL_MAX_MS)\n      );\n      return this.waitForResult();\n    }\n\n    const decodedTransaction = this.decodeTransaction<TTransactionType>(\n      gqlTransaction\n    ) as Transaction<TTransactionType>;\n\n    const receipts = gqlTransaction.receipts?.map(processGqlReceipt) || [];\n\n    const transactionSummary = assembleTransactionSummary<TTransactionType>({\n      id: this.id,\n      gasPrice: bn(gqlTransaction.gasPrice),\n      receipts,\n      transaction: decodedTransaction,\n      transactionBytes: arrayify(gqlTransaction.rawPayload),\n      gqlTransactionStatus: gqlTransaction.status,\n      gasPerByte: bn(gasPerByte),\n      gasPriceFactor: bn(gasPriceFactor),\n    });\n\n    const transactionResult: TransactionResult<TTransactionType> = {\n      gqlTransaction,\n      ...transactionSummary,\n    };\n\n    return transactionResult;\n  }\n\n  /**\n   * Waits for transaction to complete and returns the result.\n   *\n   * @returns The completed transaction.\n   */\n  async wait<TTransactionType = void>(): Promise<TransactionResult<TTransactionType>> {\n    const result = await this.waitForResult<TTransactionType>();\n\n    if (result.isStatusFailure) {\n      throw new Error(\n        `Transaction failed: ${(<FailureStatus>result.gqlTransaction.status).reason}`\n      );\n    }\n\n    return result;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport type { Network } from '@ethersproject/networks';\nimport { Address } from '@fuel-ts/address';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { BN } from '@fuel-ts/math';\nimport { max, bn } from '@fuel-ts/math';\nimport type { Transaction } from '@fuel-ts/transactions';\nimport {\n  InputType,\n  TransactionType,\n  InputMessageCoder,\n  TransactionCoder,\n} from '@fuel-ts/transactions';\nimport { GraphQLClient } from 'graphql-request';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { getSdk as getOperationsSdk } from './__generated__/operations';\nimport type {\n  GqlChainInfoFragmentFragment,\n  GqlGetBlocksQueryVariables,\n  GqlGetInfoQuery,\n} from './__generated__/operations';\nimport type { Coin } from './coin';\nimport type { CoinQuantity, CoinQuantityLike } from './coin-quantity';\nimport { coinQuantityfy } from './coin-quantity';\nimport { MemoryCache } from './memory-cache';\nimport type { Message, MessageCoin, MessageProof } from './message';\nimport type { ExcludeResourcesOption, Resource } from './resource';\nimport type {\n  TransactionRequestLike,\n  TransactionRequest,\n  TransactionRequestInput,\n  CoinTransactionRequestInput,\n} from './transaction-request';\nimport { transactionRequestify, ScriptTransactionRequest } from './transaction-request';\nimport type { TransactionResultReceipt } from './transaction-response';\nimport { TransactionResponse } from './transaction-response';\nimport { processGqlReceipt } from './transaction-summary/receipt';\nimport { calculateTransactionFee, fromUnixToTai64, getReceiptsWithMissingData } from './utils';\n\nconst MAX_RETRIES = 10;\n\nexport type CallResult = {\n  receipts: TransactionResultReceipt[];\n};\n\n/**\n * A Fuel block\n */\nexport type Block = {\n  id: string;\n  height: BN;\n  time: string;\n  transactionIds: string[];\n};\n\n/**\n * Deployed Contract bytecode and contract id\n */\nexport type ContractResult = {\n  id: string;\n  bytecode: string;\n};\n\n/**\n * Chain information\n */\nexport type ChainInfo = {\n  name: string;\n  baseChainHeight: BN;\n  peerCount: number;\n  consensusParameters: {\n    contractMaxSize: BN;\n    maxInputs: BN;\n    maxOutputs: BN;\n    maxWitnesses: BN;\n    maxGasPerTx: BN;\n    maxScriptLength: BN;\n    maxScriptDataLength: BN;\n    maxStorageSlots: BN;\n    maxPredicateLength: BN;\n    maxPredicateDataLength: BN;\n    maxGasPerPredicate: BN;\n    gasPriceFactor: BN;\n    gasPerByte: BN;\n    maxMessageDataLength: BN;\n    chainId: BN;\n  };\n  latestBlock: {\n    id: string;\n    height: BN;\n    time: string;\n    transactions: Array<{ id: string }>;\n  };\n};\n\n/**\n * Node information\n */\nexport type NodeInfoAndConsensusParameters = {\n  minGasPrice: BN;\n  nodeVersion: string;\n  gasPerByte: BN;\n  gasPriceFactor: BN;\n  maxGasPerTx: BN;\n};\n\n// #region cost-estimation-1\nexport type TransactionCost = {\n  minGasPrice: BN;\n  gasPrice: BN;\n  gasUsed: BN;\n  fee: BN;\n};\n// #endregion cost-estimation-1\n\nconst processGqlChain = (chain: GqlChainInfoFragmentFragment): ChainInfo => {\n  const { name, baseChainHeight, peerCount, consensusParameters, latestBlock } = chain;\n\n  return {\n    name,\n    baseChainHeight: bn(baseChainHeight),\n    peerCount,\n    consensusParameters: {\n      contractMaxSize: bn(consensusParameters.contractMaxSize),\n      maxInputs: bn(consensusParameters.maxInputs),\n      maxOutputs: bn(consensusParameters.maxOutputs),\n      maxWitnesses: bn(consensusParameters.maxWitnesses),\n      maxGasPerTx: bn(consensusParameters.maxGasPerTx),\n      maxScriptLength: bn(consensusParameters.maxScriptLength),\n      maxScriptDataLength: bn(consensusParameters.maxScriptDataLength),\n      maxStorageSlots: bn(consensusParameters.maxStorageSlots),\n      maxPredicateLength: bn(consensusParameters.maxPredicateLength),\n      maxPredicateDataLength: bn(consensusParameters.maxPredicateDataLength),\n      maxGasPerPredicate: bn(consensusParameters.maxGasPerPredicate),\n      gasPriceFactor: bn(consensusParameters.gasPriceFactor),\n      gasPerByte: bn(consensusParameters.gasPerByte),\n      maxMessageDataLength: bn(consensusParameters.maxMessageDataLength),\n      chainId: bn(consensusParameters.chainId),\n    },\n    latestBlock: {\n      id: latestBlock.id,\n      height: bn(latestBlock.header.height),\n      time: latestBlock.header.time,\n      transactions: latestBlock.transactions.map((i) => ({\n        id: i.id,\n      })),\n    },\n  };\n};\n\nconst processNodeInfoAndConsensusParameters = (\n  nodeInfo: GqlGetInfoQuery['nodeInfo'],\n  consensusParameters: GqlGetInfoQuery['chain']['consensusParameters']\n) => ({\n  minGasPrice: bn(nodeInfo.minGasPrice),\n  nodeVersion: nodeInfo.nodeVersion,\n  gasPerByte: bn(consensusParameters.gasPerByte),\n  gasPriceFactor: bn(consensusParameters.gasPriceFactor),\n  maxGasPerTx: bn(consensusParameters.maxGasPerTx),\n});\n\n/**\n * @hidden\n *\n * Cursor pagination arguments\n *\n * https://relay.dev/graphql/connections.htm#sec-Arguments\n */\nexport type CursorPaginationArgs = {\n  /** Forward pagination limit */\n  first?: number | null;\n  /** Forward pagination cursor */\n  after?: string | null;\n  /** Backward pagination limit  */\n  last?: number | null;\n  /** Backward pagination cursor */\n  before?: string | null;\n};\n\nexport type BuildPredicateOptions = {\n  fundTransaction?: boolean;\n} & Pick<TransactionRequestLike, 'gasLimit' | 'gasPrice' | 'maturity'>;\n\nexport type FetchRequestOptions = {\n  method: 'POST';\n  headers: { [key: string]: string };\n  body: string;\n};\n\n/*\n * Provider initialization options\n */\nexport type ProviderOptions = {\n  fetch?: (url: string, options: FetchRequestOptions) => Promise<unknown>;\n  cacheUtxo?: number;\n};\n\n/**\n * Provider Call transaction params\n */\nexport type ProviderCallParams = {\n  utxoValidation?: boolean;\n};\n\n/**\n * A provider for connecting to a node\n */\nexport default class Provider {\n  operations: ReturnType<typeof getOperationsSdk>;\n  cache?: MemoryCache;\n\n  /**\n   * Constructor to initialize a Provider.\n   *\n   * @param url - GraphQL endpoint of the Fuel node\n   * @param options - Additional options for the provider\n   */\n  constructor(\n    /** GraphQL endpoint of the Fuel node */\n    public url: string,\n    public options: ProviderOptions = {}\n  ) {\n    this.operations = this.createOperations(url, options);\n    this.cache = options.cacheUtxo ? new MemoryCache(options.cacheUtxo) : undefined;\n  }\n\n  /**\n   * Create GraphQL client and set operations.\n   *\n   * @param url - The URL of the Fuel node\n   * @param options - Additional options for the provider\n   * @returns The operation SDK object\n   */\n  private createOperations(url: string, options: ProviderOptions = {}) {\n    this.url = url;\n    const gqlClient = new GraphQLClient(url, options.fetch ? { fetch: options.fetch } : undefined);\n    return getOperationsSdk(gqlClient);\n  }\n\n  /**\n   * Connect provider to a different node url.\n   *\n   * @param url - The URL of the Fuel node to connect to.\n   */\n  connect(url: string) {\n    this.operations = this.createOperations(url);\n  }\n\n  /**\n   * Returns the version of the connected node.\n   *\n   * @returns A promise that resolves to the version string.\n   */\n  async getVersion(): Promise<string> {\n    const {\n      nodeInfo: { nodeVersion },\n    } = await this.operations.getVersion();\n    return nodeVersion;\n  }\n\n  /**\n   * @hidden\n   *\n   * Returns the network configuration of the connected Fuel node.\n   *\n   * @returns A promise that resolves to the network configuration object\n   */\n  async getNetwork(): Promise<Network> {\n    return Promise.resolve({\n      name: 'fuelv2',\n      chainId: 0xdeadbeef,\n    });\n  }\n\n  /**\n   * Returns the block number.\n   *\n   * @returns A promise that resolves to the block number\n   */\n  async getBlockNumber(): Promise<BN> {\n    const { chain } = await this.operations.getChain();\n    return bn(chain.latestBlock.header.height, 10);\n  }\n\n  /**\n   * Returns node information.\n   *\n   * @returns A promise that resolves to the node information object.\n   */\n  async getNodeInfo(): Promise<NodeInfoAndConsensusParameters> {\n    const { nodeInfo, chain } = await this.operations.getInfo();\n    return processNodeInfoAndConsensusParameters(nodeInfo, chain.consensusParameters);\n  }\n\n  /**\n   * Returns chain information.\n   *\n   * @returns A promise that resolves to the chain information object\n   */\n  async getChain(): Promise<ChainInfo> {\n    const { chain } = await this.operations.getChain();\n    return processGqlChain(chain);\n  }\n\n  /**\n   * Returns the chain ID\n   * @returns A promise that resolves to the chain ID number\n   */\n  async getChainId(): Promise<number> {\n    const {\n      consensusParameters: { chainId },\n    } = await this.getChain();\n    return chainId.toNumber();\n  }\n\n  /**\n   * @hidden\n   */\n  #cacheInputs(inputs: TransactionRequestInput[]): void {\n    if (!this.cache) {\n      return;\n    }\n\n    inputs.forEach((input) => {\n      if (input.type === InputType.Coin) {\n        this.cache?.set(input.id);\n      }\n    });\n  }\n\n  /**\n   * Submits a transaction to the chain to be executed.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @returns A promise that resolves to the transaction response object.\n   */\n  // #region Provider-sendTransaction\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    this.#cacheInputs(transactionRequest.inputs);\n    await this.estimateTxDependencies(transactionRequest);\n    // #endregion Provider-sendTransaction\n\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { gasUsed, minGasPrice } = await this.getTransactionCost(transactionRequest, 0);\n\n    // Fail transaction before submit to avoid submit failure\n    // Resulting in lost of funds on a OutOfGas situation.\n    if (bn(gasUsed).gt(bn(transactionRequest.gasLimit))) {\n      throw new Error(\n        `gasLimit(${transactionRequest.gasLimit}) is lower than the required (${gasUsed})`\n      );\n    } else if (bn(minGasPrice).gt(bn(transactionRequest.gasPrice))) {\n      throw new Error(\n        `gasPrice(${transactionRequest.gasPrice}) is lower than the required ${minGasPrice}`\n      );\n    }\n\n    const {\n      submit: { id: transactionId },\n    } = await this.operations.submit({ encodedTransaction });\n\n    const response = new TransactionResponse(transactionId, this);\n    return response;\n  }\n\n  /**\n   * Executes a transaction without actually submitting it to the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added.\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param utxoValidation - Additional provider call parameters.\n   * @returns A promise that resolves to the call result object.\n   */\n  async call(\n    transactionRequestLike: TransactionRequestLike,\n    { utxoValidation }: ProviderCallParams = {}\n  ): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.estimateTxDependencies(transactionRequest);\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: gqlReceipts } = await this.operations.dryRun({\n      encodedTransaction,\n      utxoValidation: utxoValidation || false,\n    });\n    const receipts = gqlReceipts.map(processGqlReceipt);\n    return {\n      receipts,\n    };\n  }\n\n  /**\n   * Verifies whether enough gas is available to complete transaction.\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise that resolves to the estimated transaction request object.\n   */\n  async estimatePredicates(transactionRequest: TransactionRequest): Promise<TransactionRequest> {\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const response = await this.operations.estimatePredicates({\n      encodedTransaction,\n    });\n\n    const estimatedTransaction = transactionRequest;\n    const [decodedTransaction] = new TransactionCoder().decode(\n      arrayify(response.estimatePredicates.rawPayload),\n      0\n    );\n\n    if (decodedTransaction.inputs) {\n      decodedTransaction.inputs.forEach((input, index) => {\n        if ('predicate' in input && input.predicateGasUsed.gt(0)) {\n          (<CoinTransactionRequestInput>estimatedTransaction.inputs[index]).predicateGasUsed =\n            input.predicateGasUsed;\n        }\n      });\n    }\n\n    return estimatedTransaction;\n  }\n\n  /**\n   * Will dryRun a transaction and check for missing dependencies.\n   *\n   * If there are missing variable outputs,\n   * `addVariableOutputs` is called on the transaction.\n   *\n   * @privateRemarks\n   * TODO: Investigate support for missing contract IDs\n   * TODO: Add support for missing output messages\n   *\n   * @param transactionRequest - The transaction request object.\n   * @returns A promise.\n   */\n  async estimateTxDependencies(transactionRequest: TransactionRequest): Promise<void> {\n    let missingOutputVariableCount = 0;\n    let missingOutputContractIdsCount = 0;\n    let tries = 0;\n\n    if (transactionRequest.type === TransactionType.Create) {\n      return;\n    }\n\n    const encodedTransaction = transactionRequest.hasPredicateInput()\n      ? hexlify((await this.estimatePredicates(transactionRequest)).toTransactionBytes())\n      : hexlify(transactionRequest.toTransactionBytes());\n\n    do {\n      const { dryRun: gqlReceipts } = await this.operations.dryRun({\n        encodedTransaction,\n        utxoValidation: false,\n      });\n      const receipts = gqlReceipts.map(processGqlReceipt);\n      const { missingOutputVariables, missingOutputContractIds } =\n        getReceiptsWithMissingData(receipts);\n\n      missingOutputVariableCount = missingOutputVariables.length;\n      missingOutputContractIdsCount = missingOutputContractIds.length;\n\n      if (missingOutputVariableCount === 0 && missingOutputContractIdsCount === 0) {\n        return;\n      }\n\n      if (transactionRequest instanceof ScriptTransactionRequest) {\n        transactionRequest.addVariableOutputs(missingOutputVariableCount);\n\n        missingOutputContractIds.forEach(({ contractId }) =>\n          transactionRequest.addContractInputAndOutput(Address.fromString(contractId))\n        );\n      }\n\n      tries += 1;\n    } while (tries < MAX_RETRIES);\n  }\n\n  /**\n   * Executes a signed transaction without applying the states changes\n   * on the chain.\n   *\n   * If the transaction is missing any dependencies,\n   * the transaction will be mutated and those dependencies will be added\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @returns A promise that resolves to the call result object.\n   */\n  async simulate(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.estimateTxDependencies(transactionRequest);\n    const encodedTransaction = hexlify(transactionRequest.toTransactionBytes());\n    const { dryRun: gqlReceipts } = await this.operations.dryRun({\n      encodedTransaction,\n      utxoValidation: true,\n    });\n    const receipts = gqlReceipts.map(processGqlReceipt);\n    return {\n      receipts,\n    };\n  }\n\n  /**\n   * Returns a transaction cost to enable user\n   * to set gasLimit and also reserve balance amounts\n   * on the the transaction.\n   *\n   * @privateRemarks\n   * The tolerance is add on top of the gasUsed calculated\n   * from the node, this create a safe margin costs like\n   * change states on transfer that don't occur on the dryRun\n   * transaction. The default value is 0.2 or 20%\n   *\n   * @param transactionRequestLike - The transaction request object.\n   * @param tolerance - The tolerance to add on top of the gasUsed.\n   * @returns A promise that resolves to the transaction cost object.\n   */\n  async getTransactionCost(\n    transactionRequestLike: TransactionRequestLike,\n    tolerance: number = 0.2\n  ): Promise<TransactionCost> {\n    const transactionRequest = transactionRequestify(cloneDeep(transactionRequestLike));\n    const { minGasPrice, gasPerByte, gasPriceFactor, maxGasPerTx } = await this.getNodeInfo();\n    const gasPrice = max(transactionRequest.gasPrice, minGasPrice);\n    const margin = 1 + tolerance;\n\n    // Set gasLimit to the maximum of the chain\n    // and gasPrice to 0 for measure\n    // Transaction without arrive to OutOfGas\n    transactionRequest.gasLimit = maxGasPerTx;\n    transactionRequest.gasPrice = bn(0);\n\n    // Execute dryRun not validated transaction to query gasUsed\n    const { receipts } = await this.call(transactionRequest);\n    const transaction = transactionRequest.toTransaction();\n\n    const { gasUsed, fee } = calculateTransactionFee({\n      gasPrice,\n      receipts,\n      margin,\n      gasPerByte,\n      gasPriceFactor,\n      transactionBytes: transactionRequest.toTransactionBytes(),\n      transactionType: transactionRequest.type,\n      transactionWitnesses: transaction.witnesses,\n    });\n\n    return {\n      minGasPrice,\n      gasPrice,\n      gasUsed,\n      fee,\n    };\n  }\n\n  /**\n   * Returns coins for the given owner.\n   */\n  async getCoins(\n    /** The address to get coins for */\n    owner: AbstractAddress,\n    /** The asset ID of coins to get */\n    assetId?: BytesLike,\n    /** Pagination arguments */\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<Coin[]> {\n    const result = await this.operations.getCoins({\n      first: 10,\n      ...paginationArgs,\n      filter: { owner: owner.toB256(), assetId: assetId && hexlify(assetId) },\n    });\n\n    const coins = result.coins.edges!.map((edge) => edge!.node!);\n\n    return coins.map((coin) => ({\n      id: coin.utxoId,\n      assetId: coin.assetId,\n      amount: bn(coin.amount),\n      owner: Address.fromAddressOrString(coin.owner),\n      maturity: bn(coin.maturity).toNumber(),\n      blockCreated: bn(coin.blockCreated),\n      txCreatedIdx: bn(coin.txCreatedIdx),\n    }));\n  }\n\n  /**\n   * Returns resources for the given owner satisfying the spend query.\n   *\n   * @param owner - The address to get resources for.\n   * @param quantities - The quantities to get.\n   * @param excludedIds - IDs of excluded resources from the selection.\n   * @returns A promise that resolves to the resources.\n   */\n  async getResourcesToSpend(\n    /** The address to get coins for */\n    owner: AbstractAddress,\n    /** The quantities to get */\n    quantities: CoinQuantityLike[],\n    /** IDs of excluded resources from the selection. */\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    const excludeInput = {\n      messages: excludedIds?.messages?.map((id) => hexlify(id)) || [],\n      utxos: excludedIds?.utxos?.map((id) => hexlify(id)) || [],\n    };\n\n    if (this.cache) {\n      const uniqueUtxos = new Set(\n        excludeInput.utxos.concat(this.cache?.getActiveData().map((id) => hexlify(id)))\n      );\n      excludeInput.utxos = Array.from(uniqueUtxos);\n    }\n    const coinsQuery = {\n      owner: owner.toB256(),\n      queryPerAsset: quantities\n        .map(coinQuantityfy)\n        .map(({ assetId, amount, max: maxPerAsset }) => ({\n          assetId: hexlify(assetId),\n          amount: amount.toString(10),\n          max: maxPerAsset ? maxPerAsset.toString(10) : undefined,\n        })),\n      excludedIds: excludeInput,\n    };\n\n    const result = await this.operations.getCoinsToSpend(coinsQuery);\n\n    const coins = result.coinsToSpend\n      .flat()\n      .map((coin) => {\n        switch (coin.__typename) {\n          case 'MessageCoin':\n            return {\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              daHeight: bn(coin.daHeight),\n              sender: Address.fromAddressOrString(coin.sender),\n              recipient: Address.fromAddressOrString(coin.recipient),\n              nonce: coin.nonce,\n            } as MessageCoin;\n          case 'Coin':\n            return {\n              id: coin.utxoId,\n              amount: bn(coin.amount),\n              assetId: coin.assetId,\n              owner: Address.fromAddressOrString(coin.owner),\n              maturity: bn(coin.maturity).toNumber(),\n              blockCreated: bn(coin.blockCreated),\n              txCreatedIdx: bn(coin.txCreatedIdx),\n            } as Coin;\n          default:\n            return null;\n        }\n      })\n      .filter((v) => !!v) as Array<Resource>;\n\n    return coins;\n  }\n\n  /**\n   * Returns block matching the given ID or height.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlock(\n    /** ID or height of the block */\n    idOrHeight: string | number | 'latest'\n  ): Promise<Block | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString(10) };\n    } else if (idOrHeight.length === 66) {\n      variables = { blockId: idOrHeight };\n    } else {\n      variables = { blockId: bn(idOrHeight).toString(10) };\n    }\n\n    const { block } = await this.operations.getBlock(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.header.height),\n      time: block.header.time,\n      transactionIds: block.transactions.map((tx) => tx.id),\n    };\n  }\n\n  /**\n   * Returns all the blocks matching the given parameters.\n   *\n   * @param params - The parameters to query blocks.\n   * @returns A promise that resolves to the blocks.\n   */\n  async getBlocks(params: GqlGetBlocksQueryVariables): Promise<Block[]> {\n    const { blocks: fetchedData } = await this.operations.getBlocks(params);\n\n    const blocks: Block[] = fetchedData.edges.map(({ node: block }) => ({\n      id: block.id,\n      height: bn(block.header.height),\n      time: block.header.time,\n      transactionIds: block.transactions.map((tx) => tx.id),\n    }));\n\n    return blocks;\n  }\n\n  /**\n   * Returns block matching the given ID or type, including transaction data.\n   *\n   * @param idOrHeight - ID or height of the block.\n   * @returns A promise that resolves to the block.\n   */\n  async getBlockWithTransactions(\n    /** ID or height of the block */\n    idOrHeight: string | number | 'latest'\n  ): Promise<(Block & { transactions: Transaction[] }) | null> {\n    let variables;\n    if (typeof idOrHeight === 'number') {\n      variables = { blockHeight: bn(idOrHeight).toString(10) };\n    } else if (idOrHeight === 'latest') {\n      variables = { blockHeight: (await this.getBlockNumber()).toString() };\n    } else {\n      variables = { blockId: idOrHeight };\n    }\n\n    const { block } = await this.operations.getBlockWithTransactions(variables);\n\n    if (!block) {\n      return null;\n    }\n\n    return {\n      id: block.id,\n      height: bn(block.header.height, 10),\n      time: block.header.time,\n      transactionIds: block.transactions.map((tx) => tx.id),\n      transactions: block.transactions.map(\n        (tx) => new TransactionCoder().decode(arrayify(tx.rawPayload), 0)?.[0]\n      ),\n    };\n  }\n\n  /**\n   * Get transaction with the given ID.\n   *\n   * @param transactionId - ID of the transaction.\n   * @returns A promise that resolves to the transaction.\n   */\n  async getTransaction<TTransactionType = void>(\n    transactionId: string\n  ): Promise<Transaction<TTransactionType> | null> {\n    const { transaction } = await this.operations.getTransaction({ transactionId });\n    if (!transaction) {\n      return null;\n    }\n    return new TransactionCoder().decode(\n      arrayify(transaction.rawPayload),\n      0\n    )?.[0] as Transaction<TTransactionType>;\n  }\n\n  /**\n   * Get deployed contract with the given ID.\n   *\n   * @param contractId - ID of the contract.\n   * @returns A promise that resolves to the contract.\n   */\n  async getContract(contractId: string): Promise<ContractResult | null> {\n    const { contract } = await this.operations.getContract({ contractId });\n    if (!contract) {\n      return null;\n    }\n    return contract;\n  }\n\n  /**\n   * Returns the balance for the given contract for the given asset ID.\n   *\n   * @param contractId - The contract ID to get the balance for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getContractBalance(\n    /** The contract ID to get the balance for */\n    contractId: AbstractAddress,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { contractBalance } = await this.operations.getContractBalance({\n      contract: contractId.toB256(),\n      asset: hexlify(assetId),\n    });\n    return bn(contractBalance.amount, 10);\n  }\n\n  /**\n   * Returns the balance for the given owner for the given asset ID.\n   *\n   * @param owner - The address to get coins for.\n   * @param assetId - The asset ID of coins to get.\n   * @returns A promise that resolves to the balance.\n   */\n  async getBalance(\n    /** The address to get coins for */\n    owner: AbstractAddress,\n    /** The asset ID of coins to get */\n    assetId: BytesLike\n  ): Promise<BN> {\n    const { balance } = await this.operations.getBalance({\n      owner: owner.toB256(),\n      assetId: hexlify(assetId),\n    });\n    return bn(balance.amount, 10);\n  }\n\n  /**\n   * Returns balances for the given owner.\n   *\n   * @param owner - The address to get coins for.\n   * @param paginationArgs - Pagination arguments.\n   * @returns A promise that resolves to the balances.\n   */\n  async getBalances(\n    /** The address to get coins for */\n    owner: AbstractAddress,\n    /** Pagination arguments */\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<CoinQuantity[]> {\n    const result = await this.operations.getBalances({\n      first: 10,\n      ...paginationArgs,\n      filter: { owner: owner.toB256() },\n    });\n\n    const balances = result.balances.edges!.map((edge) => edge!.node!);\n\n    return balances.map((balance) => ({\n      assetId: balance.assetId,\n      amount: bn(balance.amount),\n    }));\n  }\n\n  /**\n   * Returns message for the given address.\n   *\n   * @param address - The address to get message from.\n   * @param paginationArgs - Pagination arguments.\n   * @returns A promise that resolves to the messages.\n   */\n  async getMessages(\n    /** The address to get message from */\n    address: AbstractAddress,\n    /** Pagination arguments */\n    paginationArgs?: CursorPaginationArgs\n  ): Promise<Message[]> {\n    const result = await this.operations.getMessages({\n      first: 10,\n      ...paginationArgs,\n      owner: address.toB256(),\n    });\n\n    const messages = result.messages.edges!.map((edge) => edge!.node!);\n\n    return messages.map((message) => ({\n      messageId: InputMessageCoder.getMessageId({\n        sender: message.sender,\n        recipient: message.recipient,\n        nonce: message.nonce,\n        amount: bn(message.amount),\n        data: message.data,\n      }),\n      sender: Address.fromAddressOrString(message.sender),\n      recipient: Address.fromAddressOrString(message.recipient),\n      nonce: message.nonce,\n      amount: bn(message.amount),\n      data: InputMessageCoder.decodeData(message.data),\n      daHeight: bn(message.daHeight),\n    }));\n  }\n\n  /**\n   * Returns Message Proof for given transaction id and the message id from MessageOut receipt.\n   *\n   * @param transactionId - The transaction to get message from.\n   * @param messageId - The message id from MessageOut receipt.\n   * @param commitBlockId - The commit block id.\n   * @param commitBlockHeight - The commit block height.\n   * @returns A promise that resolves to the message proof.\n   */\n  async getMessageProof(\n    /** The transaction to get message from */\n    transactionId: string,\n    /** The message id from MessageOut receipt */\n    messageId: string,\n    commitBlockId?: string,\n    commitBlockHeight?: BN\n  ): Promise<MessageProof | null> {\n    let inputObject: {\n      /** The transaction to get message from */\n      transactionId: string;\n      /** The message id from MessageOut receipt */\n      messageId: string;\n      commitBlockId?: string;\n      commitBlockHeight?: string;\n    } = {\n      transactionId,\n      messageId,\n    };\n\n    if (commitBlockId && commitBlockHeight) {\n      throw new Error('commitBlockId and commitBlockHeight cannot be used together');\n    }\n\n    if (commitBlockId) {\n      inputObject = {\n        ...inputObject,\n        commitBlockId,\n      };\n    }\n\n    if (commitBlockHeight) {\n      inputObject = {\n        ...inputObject,\n        // Conver BN into a number string required on the query\n        // This should problably be fixed on the fuel client side\n        commitBlockHeight: commitBlockHeight.toNumber().toString(),\n      };\n    }\n\n    const result = await this.operations.getMessageProof(inputObject);\n\n    if (!result.messageProof) {\n      return null;\n    }\n\n    const {\n      messageProof,\n      messageBlockHeader,\n      commitBlockHeader,\n      blockProof,\n      nonce,\n      sender,\n      recipient,\n      amount,\n      data,\n    } = result.messageProof;\n\n    return {\n      messageProof: {\n        proofIndex: bn(messageProof.proofIndex),\n        proofSet: messageProof.proofSet,\n      },\n      blockProof: {\n        proofIndex: bn(blockProof.proofIndex),\n        proofSet: blockProof.proofSet,\n      },\n      messageBlockHeader: {\n        id: messageBlockHeader.id,\n        daHeight: bn(messageBlockHeader.daHeight),\n        transactionsCount: bn(messageBlockHeader.transactionsCount),\n        transactionsRoot: messageBlockHeader.transactionsRoot,\n        height: bn(messageBlockHeader.height),\n        prevRoot: messageBlockHeader.prevRoot,\n        time: messageBlockHeader.time,\n        applicationHash: messageBlockHeader.applicationHash,\n        messageReceiptRoot: messageBlockHeader.messageReceiptRoot,\n        messageReceiptCount: bn(messageBlockHeader.messageReceiptCount),\n      },\n      commitBlockHeader: {\n        id: commitBlockHeader.id,\n        daHeight: bn(commitBlockHeader.daHeight),\n        transactionsCount: bn(commitBlockHeader.transactionsCount),\n        transactionsRoot: commitBlockHeader.transactionsRoot,\n        height: bn(commitBlockHeader.height),\n        prevRoot: commitBlockHeader.prevRoot,\n        time: commitBlockHeader.time,\n        applicationHash: commitBlockHeader.applicationHash,\n        messageReceiptRoot: commitBlockHeader.messageReceiptRoot,\n        messageReceiptCount: bn(commitBlockHeader.messageReceiptCount),\n      },\n      sender: Address.fromAddressOrString(sender),\n      recipient: Address.fromAddressOrString(recipient),\n      nonce,\n      amount: bn(amount),\n      data,\n    };\n  }\n\n  /**\n   * Lets you produce blocks with custom timestamps and the block number of the last block produced.\n   *\n   * @param amount - The amount of blocks to produce\n   * @param startTime - The UNIX timestamp to set for the first produced block\n   * @returns A promise that resolves to the block number of the last produced block.\n   */\n  async produceBlocks(amount: number, startTime?: number) {\n    const { produceBlocks: latestBlockHeight } = await this.operations.produceBlocks({\n      blocksToProduce: bn(amount).toString(10),\n      startTimestamp: startTime ? fromUnixToTai64(startTime) : undefined,\n    });\n    return bn(latestBlockHeight);\n  }\n}\n","let wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*Adds two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for equality.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of another.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for greater-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for less-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer logarithm of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer root of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy from one register to another.\n* @param {number} dst\n* @param {number} src\n* @returns {Instruction}\n*/\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise NOT a register.\n* @param {number} dst\n* @param {number} arg\n* @returns {Instruction}\n*/\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context with data.\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Allocate a number of bytes from the heap.\n* @param {number} bytes\n* @returns {Instruction}\n*/\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare bytes in memory.\n* @param {number} result\n* @param {number} lhs_addr\n* @param {number} rhs_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get block header hash for height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block height.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction burn(amount, sub_id_addr) {\n    const ret = wasm$1.burn(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call a contract.\n* @param {number} target_struct\n* @param {number} fwd_coins\n* @param {number} asset_id_addr\n* @param {number} fwd_gas\n* @returns {Instruction}\n*/\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy contract code for a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code root of a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code size of a contract.\n* @param {number} dst\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block proposer's address.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a contract's code as executable.\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ldc(contract_id_addr, offset, len) {\n    const ret = wasm$1.ldc(contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log an event.\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log data.\n* @param {number} a\n* @param {number} b\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n* @param {number} amount\n* @param {number} sub_id_addr\n* @returns {Instruction}\n*/\nfunction mint(amount, sub_id_addr) {\n    const ret = wasm$1.mint(amount, sub_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Halt execution, reverting state changes and returning a value.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a series of slots from contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a word from contract storage.\n* @param {number} dst\n* @param {number} status\n* @param {number} key_addr\n* @returns {Instruction}\n*/\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a series of 32 byte slots from contract storage.\n* @param {number} dst_addr\n* @param {number} status\n* @param {number} key_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a word in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a series of 32 byte slots in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} src_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a contract unconditionally.\n* @param {number} contract_id_addr\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a variable output.\n* @param {number} contract_id_addr\n* @param {number} output_index\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Verify ED25519 public key and signature match a 32-byte message.\n* @param {number} pub_key_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ed19(pub_key_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The keccak-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The SHA-2-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get timestamp of block at given height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Performs no operation.\n* @returns {Instruction}\n*/\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Set flag register to a register.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get the balance of contract of an asset ID.\n* @param {number} dst\n* @param {number} asset_id_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional dynamic jump.\n* @param {number} abs_target\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Send a message to recipient address with call abi, coins, and output.\n* @param {number} recipient_addr\n* @param {number} data_addr\n* @param {number} data_len\n* @param {number} coins\n* @returns {Instruction}\n*/\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A word is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write the least significant byte of a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy an immediate number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get transaction fields.\n* @param {number} dst\n* @param {number} arg\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear an immediate number of bytes in memory.\n* @param {number} addr\n* @param {number} count\n* @returns {Instruction}\n*/\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get metadata from memory.\n* @param {number} dst\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy immediate value into a register\n* @param {number} dst\n* @param {number} val\n* @returns {Instruction}\n*/\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump against zero.\n* @param {number} cond_nz\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshl(bitmask) {\n    const ret = wasm$1.pshl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction pshh(bitmask) {\n    const ret = wasm$1.pshh(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction popl(bitmask) {\n    const ret = wasm$1.popl(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n* @param {number} bitmask\n* @returns {Instruction}\n*/\nfunction poph(bitmask) {\n    const ret = wasm$1.poph(bitmask);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 128bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 256bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 128bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 256bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 128bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 256bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} args\n* @returns {Instruction}\n*/\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} args\n* @returns {Instruction}\n*/\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm$1.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*r\" Argument list for GM (get metadata) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GMArgs = Object.freeze({\n/**\n*r\" Get if caller is external.\n*/\nIsCallerExternal:1,\"1\":\"IsCallerExternal\",\n/**\n*r\" Get caller's contract ID.\n*/\nGetCaller:2,\"2\":\"GetCaller\",\n/**\n*r\" Get index of current predicate.\n*/\nGetVerifyingPredicate:3,\"3\":\"GetVerifyingPredicate\",\n/**\n*r\" Get the Chain ID this VM is operating within\n*/\nGetChainId:4,\"4\":\"GetChainId\", });\n/**\n*r\" Argument list for GTF (get tx fields) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GTFArgs = Object.freeze({\n/**\n*r\" Set `$rA` to `tx.type`\n*/\nType:1,\"1\":\"Type\",\n/**\n*r\" Set `$rA` to `tx.gasPrice`\n*/\nScriptGasPrice:2,\"2\":\"ScriptGasPrice\",\n/**\n*r\" Set `$rA` to `tx.gasLimit`\n*/\nScriptGasLimit:3,\"3\":\"ScriptGasLimit\",\n/**\n*r\" Set `$rA` to `tx.maturity`\n*/\nScriptMaturity:4,\"4\":\"ScriptMaturity\",\n/**\n*r\" Set `$rA` to `tx.scriptLength`\n*/\nScriptLength:5,\"5\":\"ScriptLength\",\n/**\n*r\" Set `$rA` to `tx.scriptDataLength`\n*/\nScriptDataLength:6,\"6\":\"ScriptDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nScriptInputsCount:7,\"7\":\"ScriptInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nScriptOutputsCount:8,\"8\":\"ScriptOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nScriptWitnessesCound:9,\"9\":\"ScriptWitnessesCound\",\n/**\n*r\" Set `$rA` to `Memory address of tx.receiptsRoot`\n*/\nScriptReceiptsRoot:10,\"10\":\"ScriptReceiptsRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.script`\n*/\nScript:11,\"11\":\"Script\",\n/**\n*r\" Set `$rA` to `Memory address of tx.scriptData`\n*/\nScriptData:12,\"12\":\"ScriptData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nScriptInputAtIndex:13,\"13\":\"ScriptInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nScriptOutputAtIndex:14,\"14\":\"ScriptOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nScriptWitnessAtIndex:15,\"15\":\"ScriptWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.gasPrice`\n*/\nCreateGasPrice:16,\"16\":\"CreateGasPrice\",\n/**\n*r\" Set `$rA` to `tx.gasLimit`\n*/\nCreateGasLimit:17,\"17\":\"CreateGasLimit\",\n/**\n*r\" Set `$rA` to `tx.maturity`\n*/\nCreateMaturity:18,\"18\":\"CreateMaturity\",\n/**\n*r\" Set `$rA` to `tx.bytecodeLength`\n*/\nCreateBytecodeLength:19,\"19\":\"CreateBytecodeLength\",\n/**\n*r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n*/\nCreateBytecodeWitnessIndex:20,\"20\":\"CreateBytecodeWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.storageSlotsCount`\n*/\nCreateStorageSlotsCount:21,\"21\":\"CreateStorageSlotsCount\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nCreateInputsCount:22,\"22\":\"CreateInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nCreateOutputsCount:23,\"23\":\"CreateOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nCreateWitnessesCount:24,\"24\":\"CreateWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.salt`\n*/\nCreateSalt:25,\"25\":\"CreateSalt\",\n/**\n*r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n*/\nCreateStorageSlotAtIndex:26,\"26\":\"CreateStorageSlotAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nCreateInputAtIndex:27,\"27\":\"CreateInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nCreateOutputAtIndex:28,\"28\":\"CreateOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nCreateWitnessAtIndex:29,\"29\":\"CreateWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].type`\n*/\nInputType:257,\"257\":\"InputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputCoinTxId:258,\"258\":\"InputCoinTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputCoinOutputIndex:259,\"259\":\"InputCoinOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n*/\nInputCoinOwner:260,\"260\":\"InputCoinOwner\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputCoinAmount:261,\"261\":\"InputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n*/\nInputCoinAssetId:262,\"262\":\"InputCoinAssetId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputCoinTxPointer:263,\"263\":\"InputCoinTxPointer\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputCoinWitnessIndex:264,\"264\":\"InputCoinWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].maturity`\n*/\nInputCoinMaturity:265,\"265\":\"InputCoinMaturity\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputCoinPredicateLength:266,\"266\":\"InputCoinPredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputCoinPredicateDataLength:267,\"267\":\"InputCoinPredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputCoinPredicate:268,\"268\":\"InputCoinPredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputCoinPredicateData:269,\"269\":\"InputCoinPredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputCoinPredicateGasUsed:270,\"270\":\"InputCoinPredicateGasUsed\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputContractTxId:271,\"271\":\"InputContractTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputContractOutputIndex:272,\"272\":\"InputContractOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].balanceRoot`\n*/\nInputContractBalanceRoot:273,\"273\":\"InputContractBalanceRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].stateRoot`\n*/\nInputContractStateRoot:274,\"274\":\"InputContractStateRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputContractTxPointer:275,\"275\":\"InputContractTxPointer\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n*/\nInputContractId:276,\"276\":\"InputContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n*/\nInputMessageSender:277,\"277\":\"InputMessageSender\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n*/\nInputMessageRecipient:278,\"278\":\"InputMessageRecipient\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputMessageAmount:279,\"279\":\"InputMessageAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n*/\nInputMessageNonce:280,\"280\":\"InputMessageNonce\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputMessageWitnessIndex:281,\"281\":\"InputMessageWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n*/\nInputMessageDataLength:282,\"282\":\"InputMessageDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputMessagePredicateLength:283,\"283\":\"InputMessagePredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputMessagePredicateDataLength:284,\"284\":\"InputMessagePredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n*/\nInputMessageData:285,\"285\":\"InputMessageData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputMessagePredicate:286,\"286\":\"InputMessagePredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputMessagePredicateData:287,\"287\":\"InputMessagePredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputMessagePredicateGasUsed:288,\"288\":\"InputMessagePredicateGasUsed\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].type`\n*/\nOutputType:513,\"513\":\"OutputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n*/\nOutputCoinTo:514,\"514\":\"OutputCoinTo\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].amount`\n*/\nOutputCoinAmount:515,\"515\":\"OutputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n*/\nOutputCoinAssetId:516,\"516\":\"OutputCoinAssetId\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n*/\nOutputContractInputIndex:517,\"517\":\"OutputContractInputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].balanceRoot`\n*/\nOutputContractBalanceRoot:518,\"518\":\"OutputContractBalanceRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractStateRoot:519,\"519\":\"OutputContractStateRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n*/\nOutputContractCreatedContractId:520,\"520\":\"OutputContractCreatedContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractCreatedStateRoot:521,\"521\":\"OutputContractCreatedStateRoot\",\n/**\n*r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n*/\nWitnessDataLength:769,\"769\":\"WitnessDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n*/\nWitnessData:770,\"770\":\"WitnessData\", });\n/**\n*r\" Panic reason representation for the interpreter.\n*/\nconst PanicReason = Object.freeze({\n/**\n*r\" The byte can't be mapped to any known `PanicReason`.\n*/\nUnknownPanicReason:0,\"0\":\"UnknownPanicReason\",\n/**\n*r\" Found `RVRT` instruction.\n*/\nRevert:1,\"1\":\"Revert\",\n/**\n*r\" Execution ran out of gas.\n*/\nOutOfGas:2,\"2\":\"OutOfGas\",\n/**\n*r\" The transaction validity is violated.\n*/\nTransactionValidity:3,\"3\":\"TransactionValidity\",\n/**\n*r\" Attempt to write outside interpreter memory boundaries.\n*/\nMemoryOverflow:4,\"4\":\"MemoryOverflow\",\n/**\n*r\" Overflow while executing arithmetic operation.\n*r\" These errors are ignored using the WRAPPING flag.\n*/\nArithmeticOverflow:5,\"5\":\"ArithmeticOverflow\",\n/**\n*r\" Designed contract was not found in the storage.\n*/\nContractNotFound:6,\"6\":\"ContractNotFound\",\n/**\n*r\" Memory ownership rules are violated.\n*/\nMemoryOwnership:7,\"7\":\"MemoryOwnership\",\n/**\n*r\" The asset ID balance isn't enough for the instruction.\n*/\nNotEnoughBalance:8,\"8\":\"NotEnoughBalance\",\n/**\n*r\" The interpreter is expected to be in internal context.\n*/\nExpectedInternalContext:9,\"9\":\"ExpectedInternalContext\",\n/**\n*r\" The queried asset ID was not found in the state.\n*/\nAssetIdNotFound:10,\"10\":\"AssetIdNotFound\",\n/**\n*r\" The provided input is not found in the transaction.\n*/\nInputNotFound:11,\"11\":\"InputNotFound\",\n/**\n*r\" The provided output is not found in the transaction.\n*/\nOutputNotFound:12,\"12\":\"OutputNotFound\",\n/**\n*r\" The provided witness is not found in the transaction.\n*/\nWitnessNotFound:13,\"13\":\"WitnessNotFound\",\n/**\n*r\" The transaction maturity is not valid for this request.\n*/\nTransactionMaturity:14,\"14\":\"TransactionMaturity\",\n/**\n*r\" The metadata identifier is invalid.\n*/\nInvalidMetadataIdentifier:15,\"15\":\"InvalidMetadataIdentifier\",\n/**\n*r\" The call structure is not valid.\n*/\nMalformedCallStructure:16,\"16\":\"MalformedCallStructure\",\n/**\n*r\" The provided register does not allow write operations.\n*/\nReservedRegisterNotWritable:17,\"17\":\"ReservedRegisterNotWritable\",\n/**\n*r\" The execution resulted in an erroneous state of the interpreter.\n*/\nErrorFlag:18,\"18\":\"ErrorFlag\",\n/**\n*r\" The provided immediate value is not valid for this instruction.\n*/\nInvalidImmediateValue:19,\"19\":\"InvalidImmediateValue\",\n/**\n*r\" The provided transaction input is not of type `Coin`.\n*/\nExpectedCoinInput:20,\"20\":\"ExpectedCoinInput\",\n/**\n*r\" This entry is no longer used, and can be repurposed.\n*/\nUnused0x15:21,\"21\":\"Unused0x15\",\n/**\n*r\" Two segments of the interpreter memory should not intersect for write operations.\n*/\nMemoryWriteOverlap:22,\"22\":\"MemoryWriteOverlap\",\n/**\n*r\" The requested contract is not listed in the transaction inputs.\n*/\nContractNotInInputs:23,\"23\":\"ContractNotInInputs\",\n/**\n*r\" The internal asset ID balance overflowed with the provided instruction.\n*/\nInternalBalanceOverflow:24,\"24\":\"InternalBalanceOverflow\",\n/**\n*r\" The maximum allowed contract size is violated.\n*/\nContractMaxSize:25,\"25\":\"ContractMaxSize\",\n/**\n*r\" This instruction expects the stack area to be unallocated for this call.\n*/\nExpectedUnallocatedStack:26,\"26\":\"ExpectedUnallocatedStack\",\n/**\n*r\" The maximum allowed number of static contracts was reached for this transaction.\n*/\nMaxStaticContractsReached:27,\"27\":\"MaxStaticContractsReached\",\n/**\n*r\" The requested transfer amount cannot be zero.\n*/\nTransferAmountCannotBeZero:28,\"28\":\"TransferAmountCannotBeZero\",\n/**\n*r\" The provided transaction output should be of type `Variable`.\n*/\nExpectedOutputVariable:29,\"29\":\"ExpectedOutputVariable\",\n/**\n*r\" The expected context of the stack parent is internal.\n*/\nExpectedParentInternalContext:30,\"30\":\"ExpectedParentInternalContext\",\n/**\n*r\" The jump instruction cannot move backwards in predicate verification.\n*/\nIllegalJump:31,\"31\":\"IllegalJump\",\n/**\n*r\" The contract ID is already deployed and can't be overwritten.\n*/\nContractIdAlreadyDeployed:32,\"32\":\"ContractIdAlreadyDeployed\",\n/**\n*r\" The loaded contract mismatch expectations.\n*/\nContractMismatch:33,\"33\":\"ContractMismatch\",\n/**\n*r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n*/\nMessageDataTooLong:34,\"34\":\"MessageDataTooLong\",\n/**\n*r\" Mathimatically invalid arguments where given to an arithmetic instruction.\n*r\" For instance, division by zero produces this.\n*r\" These errors are ignored using the UNSAFEMATH flag.\n*/\nArithmeticError:35,\"35\":\"ArithmeticError\",\n/**\n*r\" The contract instruction is not allowed in predicates.\n*/\nContractInstructionNotAllowed:36,\"36\":\"ContractInstructionNotAllowed\",\n/**\n*r\" Transfer of zero coins is not allowed.\n*/\nTransferZeroCoins:37,\"37\":\"TransferZeroCoins\", });\n/**\n* Comparison mode used by WDCM and WQCM instructions.\n*/\nconst CompareMode = Object.freeze({\n/**\n* Equality (`==`)\n*/\nEQ:0,\"0\":\"EQ\",\n/**\n* Inequality (`!=`)\n*/\nNE:1,\"1\":\"NE\",\n/**\n* Less than (`<`)\n*/\nLT:2,\"2\":\"LT\",\n/**\n* Greater than (`>`)\n*/\nGT:3,\"3\":\"GT\",\n/**\n* Less than or equals (`>=`)\n*/\nLTE:4,\"4\":\"LTE\",\n/**\n* Greater than or equals (`>=`)\n*/\nGTE:5,\"5\":\"GTE\",\n/**\n* Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n*/\nLZC:6,\"6\":\"LZC\", });\n/**\n* The operation performed by WDOP and WQOP instructions, determined as\n*/\nconst MathOp = Object.freeze({\n/**\n* Add\n*/\nADD:0,\"0\":\"ADD\",\n/**\n* Subtract\n*/\nSUB:1,\"1\":\"SUB\",\n/**\n* Invert bits (discards rhs)\n*/\nNOT:2,\"2\":\"NOT\",\n/**\n* Bitwise or\n*/\nOR:3,\"3\":\"OR\",\n/**\n* Bitwise exclusive or\n*/\nXOR:4,\"4\":\"XOR\",\n/**\n* Bitwise and\n*/\nAND:5,\"5\":\"AND\",\n/**\n* Shift left\n*/\nSHL:6,\"6\":\"SHL\",\n/**\n* Shift right\n*/\nSHR:7,\"7\":\"SHR\", });\n/**\n*Adds two registers.\n*/\nclass ADD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ADD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ADD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Adds a register and an immediate value.\n*/\nclass ADDI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ADDI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ADDI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Allocate a number of bytes from the heap.\n*/\nclass ALOC {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ALOC.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} bytes\n    */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return ALOC.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ANDs two registers.\n*/\nclass AND {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AND.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return AND.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ANDs a register and an immediate value.\n*/\nclass ANDI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ANDI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ANDI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Get the balance of contract of an asset ID.\n*/\nclass BAL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BAL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} asset_id_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return BAL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get current block height.\n*/\nclass BHEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BHEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return BHEI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get block header hash for height.\n*/\nclass BHSH {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BHSH.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return BHSH.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Burns `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass BURN {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BURN.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return BURN.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Call a contract.\n*/\nclass CALL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CALL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} target_struct\n    * @param {RegId} fwd_coins\n    * @param {RegId} asset_id_addr\n    * @param {RegId} fwd_gas\n    */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return CALL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get current block proposer's address.\n*/\nclass CB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy contract code for a contract.\n*/\nclass CCP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CCP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return CCP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Extend the current call frame's stack\n*/\nclass CFE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CFE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Extend the current call frame's stack by an immediate value.\n*/\nclass CFEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return CFEI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Shrink the current call frame's stack\n*/\nclass CFS {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFS.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CFS.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Shrink the current call frame's stack by an immediate value.\n*/\nclass CFSI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFSI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return CFSI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Get code root of a contract.\n*/\nclass CROO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CROO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return CROO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get code size of a contract.\n*/\nclass CSIZ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CSIZ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return CSIZ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n* Arguments for WDCM and WQCM instructions.\n*/\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr);\n    }\n    /**\n    * Comparison mode\n    * @returns {number}\n    */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Comparison mode\n    * @param {number} arg0\n    */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Convert to immediate value.\n    * @returns {Imm06}\n    */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n    * @param {Imm06} bits\n    * @returns {CompareArgs | undefined}\n    */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n/**\n*Divides two registers.\n*/\nclass DIV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DIV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return DIV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Divides a register and an immediate value.\n*/\nclass DIVI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DIVI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return DIVI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n* Additional arguments for WMDV and WDDV instructions.\n*/\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message.\n*/\nclass ECK1 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ECK1.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ECK1.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message.\n*/\nclass ECR1 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ECR1.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ECR1.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Verify ED25519 public key and signature match a 32-byte message.\n*/\nclass ED19 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ED19.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} pub_key_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(pub_key_addr, sig_addr, msg_hash_addr) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ED19.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for equality.\n*/\nclass EQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return EQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Raises one register to the power of another.\n*/\nclass EXP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EXP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return EXP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Raises one register to the power of an immediate value.\n*/\nclass EXPI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EXPI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return EXPI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Set flag register to a register.\n*/\nclass FLAG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FLAG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return FLAG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get metadata from memory.\n*/\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} selector\n    */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return GM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n    /**\n    * Construct a `GM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {number} args\n    * @returns {GM}\n    */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for greater-than.\n*/\nclass GT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return GT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get transaction fields.\n*/\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    * @param {Imm12} selector\n    */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return GTF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n    /**\n    * Construct a `GTF` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {number} args\n    * @returns {GTF}\n    */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n}\n/**\n* Represents a 6-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr);\n    }\n}\n/**\n* Represents a 12-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr);\n    }\n}\n/**\n* Represents a 18-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr);\n    }\n}\n/**\n* Represents a 24-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr);\n    }\n}\n/**\n* Representation of a single instruction for the interpreter.\n*\n* The opcode is represented in the tag (variant), or may be retrieved in the\n* form of an `Opcode` byte using the `opcode` method.\n*\n* The register and immediate data associated with the instruction is represented\n* within an inner unit type wrapper around the 3 remaining bytes.\n*/\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr);\n    }\n    /**\n    * Convenience method for converting to bytes\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Size of an instruction in bytes\n    * @returns {number}\n    */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n/**\n*Jump.\n*/\nclass JI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return JI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Dynamic jump.\n*/\nclass JMP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return JMP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n*/\nclass JMPB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMPB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JMPB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n*/\nclass JMPF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMPF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JMPF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Conditional dynamic jump.\n*/\nclass JNE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return JNE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return JNEB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return JNEF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n/**\n*Conditional jump.\n*/\nclass JNEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {Imm12} abs_target\n    */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNEI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n*/\nclass JNZB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNZB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n*/\nclass JNZF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNZF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Conditional jump against zero.\n*/\nclass JNZI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {Imm18} abs_target\n    */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JNZI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*The keccak-256 hash of a slice.\n*/\nclass K256 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K256.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return K256.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n*/\nclass LB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return LB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Load a contract's code as executable.\n*/\nclass LDC {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LDC.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(contract_id_addr, offset, len) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return LDC.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Log an event.\n*/\nclass LOG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LOG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return LOG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Log data.\n*/\nclass LOGD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LOGD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return LOGD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for less-than.\n*/\nclass LT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return LT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*A word is loaded from the specified address offset by an immediate value.\n*/\nclass LW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return LW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Clear a variable number of bytes in memory.\n*/\nclass MCL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return MCL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Clear an immediate number of bytes in memory.\n*/\nclass MCLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {Imm18} count\n    */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return MCLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Copy a variable number of bytes in memory.\n*/\nclass MCP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MCP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy an immediate number of bytes in memory.\n*/\nclass MCPI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCPI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {Imm12} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MCPI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Compare bytes in memory.\n*/\nclass MEQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MEQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} result\n    * @param {RegId} lhs_addr\n    * @param {RegId} rhs_addr\n    * @param {RegId} len\n    */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return MEQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Mints `amount` coins of the asset ID created from `sub_id` for the current contract.\n*/\nclass MINT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MINT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    * @param {RegId} sub_id_addr\n    */\n    constructor(amount, sub_id_addr) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        _assertClass(sub_id_addr, RegId);\n        var ptr1 = sub_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return MINT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n*/\nclass MLDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MLDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return MLDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*The integer logarithm of a register.\n*/\nclass MLOG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MLOG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MLOG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Modulo remainder of two registers.\n*/\nclass MOD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MOD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Modulo remainder of a register and an immediate value.\n*/\nclass MODI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MODI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MODI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Copy from one register to another.\n*/\nclass MOVE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOVE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} src\n    */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return MOVE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy immediate value into a register\n*/\nclass MOVI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOVI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} val\n    */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return MOVI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*The integer root of a register.\n*/\nclass MROO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MROO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MROO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiplies two registers.\n*/\nclass MUL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MUL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MUL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiplies a register and an immediate value.\n*/\nclass MULI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MULI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MULI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n* Additional arguments for WDOP and WQOP instructions.\n*/\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr);\n    }\n    /**\n    * The operation to perform\n    * @returns {number}\n    */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The operation to perform\n    * @param {number} arg0\n    */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n* Additional arguments for WDML and WQML instructions.\n*/\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr);\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n*Performs no operation.\n*/\nclass NOOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NOOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr);\n    }\n    /**\n    * Construct the instruction.\n    */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        return NOOP.__wrap(ret);\n    }\n}\n/**\n*Bitwise NOT a register.\n*/\nclass NOT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NOT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return NOT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ORs two registers.\n*/\nclass OR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return OR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ORs a register and an immediate value.\n*/\nclass ORI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ORI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ORI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Pop a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass POPH {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(POPH.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_poph_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return POPH.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Pop a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass POPL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(POPL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_popl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return POPL.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Push a bitmask-selected set of registers in range 40..64 to the stack.\n*/\nclass PSHH {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PSHH.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshh_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return PSHH.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Push a bitmask-selected set of registers in range 16..40 to the stack.\n*/\nclass PSHL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PSHL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_pshl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} bitmask\n    */\n    constructor(bitmask) {\n        _assertClass(bitmask, Imm24);\n        var ptr0 = bitmask.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return PSHL.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n* Describe a panic reason with the instruction that generated it\n*/\nclass PanicInstruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PanicInstruction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr);\n    }\n    /**\n    * Represents an error described by a reason and an instruction.\n    * @param {number} reason\n    * @param {number} instruction\n    */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        return PanicInstruction.__wrap(ret);\n    }\n    /**\n    * Underlying panic reason\n    * @returns {number}\n    */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Underlying instruction\n    * @returns {number}\n    */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*Return from context.\n*/\nclass RET {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RET.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return RET.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Return from context with data.\n*/\nclass RETD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RETD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return RETD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Halt execution, reverting state changes and returning a value.\n*/\nclass RVRT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RVRT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return RVRT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n* Represents a 6-bit register ID, guaranteed to be masked by construction.\n*/\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * Returns `None` if the value is outside the 6-bit value range.\n    * @param {number} u\n    * @returns {RegId | undefined}\n    */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n    * Received balance for this context.\n    * @returns {RegId}\n    */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas in the context.\n    * @returns {RegId}\n    */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Error codes for particular operations.\n    * @returns {RegId}\n    */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Flags register.\n    * @returns {RegId}\n    */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Frame pointer. Memory address of beginning of current call frame.\n    * @returns {RegId}\n    */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas globally.\n    * @returns {RegId}\n    */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Heap pointer. Memory address below the current bottom of the heap (points to free\n    * memory).\n    * @returns {RegId}\n    */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Instructions start. Pointer to the start of the currently-executing code.\n    * @returns {RegId}\n    */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains overflow/underflow of addition, subtraction, and multiplication.\n    * @returns {RegId}\n    */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains one (1), for convenience.\n    * @returns {RegId}\n    */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * The program counter. Memory address of the current instruction.\n    * @returns {RegId}\n    */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value or pointer.\n    * @returns {RegId}\n    */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value length in bytes.\n    * @returns {RegId}\n    */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack pointer. Memory address on top of current writable stack area (points to\n    * free memory).\n    * @returns {RegId}\n    */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack start pointer. Memory address of bottom of current writable stack area.\n    * @returns {RegId}\n    */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Smallest writable register.\n    * @returns {RegId}\n    */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains zero (0), for convenience.\n    * @returns {RegId}\n    */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * The given value will be masked to 6 bits.\n    * @param {number} u\n    */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * A const alternative to the `Into<u8>` implementation.\n    * @returns {number}\n    */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n/**\n*The SHA-2-256 hash of a slice.\n*/\nclass S256 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(S256.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return S256.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Write the least significant byte of a register to memory.\n*/\nclass SB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Clear a series of slots from contract storage.\n*/\nclass SCWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SCWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SCWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Left shifts a register by a register.\n*/\nclass SLL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SLL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SLL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Left shifts a register by an immediate value.\n*/\nclass SLLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SLLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SLLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Send a message to recipient address with call abi, coins, and output.\n*/\nclass SMO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SMO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} recipient_addr\n    * @param {RegId} data_addr\n    * @param {RegId} data_len\n    * @param {RegId} coins\n    */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SMO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Right shifts a register by a register.\n*/\nclass SRL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SRL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Right shifts a register by an immediate value.\n*/\nclass SRLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SRLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Load a word from contract storage.\n*/\nclass SRW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SRW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Load a series of 32 byte slots from contract storage.\n*/\nclass SRWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    * @param {RegId} lenq\n    */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SRWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Subtracts two registers.\n*/\nclass SUB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SUB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SUB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Subtracts a register and an immediate value.\n*/\nclass SUBI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SUBI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SUBI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Write a register to memory.\n*/\nclass SW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Store a word in contract storage.\n*/\nclass SWW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SWW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} value\n    */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SWW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Store a series of 32 byte slots in contract storage.\n*/\nclass SWWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SWWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} src_addr\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SWWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get timestamp of block at given height.\n*/\nclass TIME {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TIME.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return TIME.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Transfer coins to a contract unconditionally.\n*/\nclass TR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return TR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Transfer coins to a variable output.\n*/\nclass TRO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TRO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} output_index\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return TRO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*AddMod 128bit\n*/\nclass WDAM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDAM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDAM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compare 128bit integers\n*/\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WDCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n}\n/**\n*Divide 128bit\n*/\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WDDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide 128bit\n*/\nclass WDMD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDMD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDMD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiply 128bit\n*/\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WDML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n}\n/**\n*MulMod 128bit\n*/\nclass WDMM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDMM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDMM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Simple 128bit operations\n*/\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WDOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n}\n/**\n*AddMod 256bit\n*/\nclass WQAM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQAM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQAM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compare 256bit integers\n*/\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WQCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n}\n/**\n*Divide 256bit\n*/\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WQDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide 256bit\n*/\nclass WQMD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQMD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQMD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiply 256bit\n*/\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WQML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n}\n/**\n*MulMod 256bit\n*/\nclass WQMM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQMM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQMM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Simple 256bit operations\n*/\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WQOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n}\n/**\n*Bitwise XORs two registers.\n*/\nclass XOR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(XOR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return XOR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise XORs a register and an immediate value.\n*/\nclass XORI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(XORI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return XORI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm$1 !== undefined) return wasm$1;\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(1, null, '', imports)}\n\nasync function initWasm () {\n  return await __wbg_init(wasm());\n}\n\n/**\n * calling it right away for pre-caching\n * the wasm async initialization at startup\n */\ninitWasm();\n\nexport { ADD, ADDI, ALOC, AND, ANDI, BAL, BHEI, BHSH, BURN, CALL, CB, CCP, CFE, CFEI, CFS, CFSI, CROO, CSIZ, CompareArgs, CompareMode, DIV, DIVI, DivArgs, ECK1, ECR1, ED19, EQ, EXP, EXPI, FLAG, GM, GMArgs, GT, GTF, GTFArgs, Imm06, Imm12, Imm18, Imm24, Instruction, JI, JMP, JMPB, JMPF, JNE, JNEB, JNEF, JNEI, JNZB, JNZF, JNZI, K256, LB, LDC, LOG, LOGD, LT, LW, MCL, MCLI, MCP, MCPI, MEQ, MINT, MLDV, MLOG, MOD, MODI, MOVE, MOVI, MROO, MUL, MULI, MathArgs, MathOp, MulArgs, NOOP, NOT, OR, ORI, POPH, POPL, PSHH, PSHL, PanicInstruction, PanicReason, RET, RETD, RVRT, RegId, S256, SB, SCWQ, SLL, SLLI, SMO, SRL, SRLI, SRW, SRWQ, SUB, SUBI, SW, SWW, SWWQ, TIME, TR, TRO, WDAM, WDCM, WDDV, WDMD, WDML, WDMM, WDOP, WQAM, WQCM, WQDV, WQMD, WQML, WQMM, WQOP, XOR, XORI, add, addi, aloc, and, andi, bal, bhei, bhsh, burn, call, cb, ccp, cfe, cfei, cfs, cfsi, croo, csiz, div, divi, eck1, ecr1, ed19, eq, exp, expi, flag, gm, gm_args, gt, gtf, gtf_args, initSync, initWasm, ji, jmp, jmpb, jmpf, jne, jneb, jnef, jnei, jnzb, jnzf, jnzi, k256, lb, ldc, log, logd, lt, lw, mcl, mcli, mcp, mcpi, meq, mint, mldv, mlog, mod_, modi, move_, movi, mroo, mul, muli, noop, not, or, ori, poph, popl, pshh, pshl, ret, retd, rvrt, s256, sb, scwq, sll, slli, smo, srl, srli, srw, srwq, sub, subi, sw, sww, swwq, time, tr, tro, wdam, wdcm, wdcm_args, wddv, wddv_args, wdmd, wdml, wdml_args, wdmm, wdop, wdop_args, wqam, wqcm, wqcm_args, wqdv, wqdv_args, wqmd, wqml, wqml_args, wqmm, wqop, wqop_args, xor, xori };\n","// From https://github.com/FuelLabs/fuel-asm/blob/eb78378c3b7c22a53b834381c387d89b3c0ef122/src/panic_reason.rs#L13\nexport const PANIC_REASONS = [\n  'Success',\n  'Revert',\n  'OutOfGas',\n  'TransactionValidity',\n  'MemoryOverflow',\n  'ArithmeticOverflow',\n  'ContractNotFound',\n  'MemoryOwnership',\n  'NotEnoughBalance',\n  'ExpectedInternalContext',\n  'AssetIdNotFound',\n  'InputNotFound',\n  'OutputNotFound',\n  'WitnessNotFound',\n  'TransactionMaturity',\n  'InvalidMetadataIdentifier',\n  'MalformedCallStructure',\n  'ReservedRegisterNotWritable',\n  'ErrorFlag',\n  'InvalidImmediateValue',\n  'ExpectedCoinInput',\n  'MaxMemoryAccess',\n  'MemoryWriteOverlap',\n  'ContractNotInInputs',\n  'InternalBalanceOverflow',\n  'ContractMaxSize',\n  'ExpectedUnallocatedStack',\n  'MaxStaticContractsReached',\n  'TransferAmountCannotBeZero',\n  'ExpectedOutputVariable',\n  'ExpectedParentInternalContext',\n  'IllegalJump',\n  'NonZeroMessageOutputRecipient',\n  'ZeroedMessageOutputRecipient',\n];\nexport const PANIC_DOC_URL = 'https://docs.rs/fuel-asm/latest/fuel_asm/enum.PanicReason.html';\n","import type { TransactionResult } from '@fuel-ts/providers';\n\nimport { PANIC_REASONS, PANIC_DOC_URL } from './configs';\n\n/**\n * @hidden\n */\nconst getFailureReason = (reason: string): string =>\n  PANIC_REASONS.includes(reason) ? reason : 'unknown';\n\n/**\n * @hidden\n */\nexport const getDocs = (\n  status: TransactionResult['gqlTransaction']['status']\n): { doc: string; reason: string } => {\n  if (status?.type === 'FailureStatus') {\n    const reason = getFailureReason(status.reason);\n    return {\n      doc: reason !== 'unknown' ? `${PANIC_DOC_URL}#variant.${reason}` : PANIC_DOC_URL,\n      reason,\n    };\n  }\n  return { doc: PANIC_DOC_URL, reason: 'unknown' };\n};\n\n/**\n * @hidden\n *\n * Generic assert function to avoid undesirable errors\n */\nexport function assert(condition: unknown, message: string): asserts condition {\n  if (!condition) {\n    throw new Error(message);\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport type { TransactionResultRevertReceipt } from '@fuel-ts/providers';\nimport {\n  FAILED_ASSERT_EQ_SIGNAL,\n  FAILED_ASSERT_SIGNAL,\n  FAILED_REQUIRE_SIGNAL,\n  FAILED_SEND_MESSAGE_SIGNAL,\n  FAILED_TRANSFER_TO_ADDRESS_SIGNAL,\n  FAILED_UNKNOWN_SIGNAL,\n} from '@fuel-ts/transactions/configs';\n\n/**\n * Represents the possible reasons for a revert.\n */\nexport type RevertReason =\n  | 'RequireFailed'\n  | 'TransferToAddressFailed'\n  | 'SendMessageFailed'\n  | 'AssertEqFailed'\n  | 'AssertFailed'\n  | 'Unknown';\n\n/**\n * A mapping of hex codes to their corresponding revert reasons.\n */\nconst REVERT_MAP: { [signal: string]: RevertReason } = {\n  [FAILED_REQUIRE_SIGNAL]: 'RequireFailed',\n  [FAILED_TRANSFER_TO_ADDRESS_SIGNAL]: 'TransferToAddressFailed',\n  [FAILED_SEND_MESSAGE_SIGNAL]: 'SendMessageFailed',\n  [FAILED_ASSERT_EQ_SIGNAL]: 'AssertEqFailed',\n  [FAILED_ASSERT_SIGNAL]: 'AssertFailed',\n  [FAILED_UNKNOWN_SIGNAL]: 'Unknown',\n};\n\n/**\n * Decode the revert error code from the given receipt.\n *\n * @param receipt - The transaction revert receipt.\n * @returns The revert reason, or undefined if not found.\n */\nconst decodeRevertErrorCode = (\n  receipt: TransactionResultRevertReceipt\n): RevertReason | undefined => {\n  const signalHex = receipt.val.toHex();\n  return REVERT_MAP[signalHex] ? REVERT_MAP[signalHex] : undefined;\n};\n\n/**\n * @hidden\n *\n * An error class for revert errors.\n */\nexport class RevertError extends Error {\n  /**\n   * The receipt associated with the revert error.\n   */\n  receipt: TransactionResultRevertReceipt;\n\n  /**\n   * Creates a new instance of RevertError.\n   *\n   * @param receipt - The transaction revert receipt.\n   * @param reason - The revert reason.\n   */\n  constructor(receipt: TransactionResultRevertReceipt, reason: RevertReason) {\n    super(`The script reverted with reason ${reason}`);\n    this.name = 'RevertError';\n    this.receipt = receipt;\n  }\n\n  /**\n   * Returns a string representation of the RevertError.\n   *\n   * @returns The string representation of the error.\n   */\n  toString() {\n    const { id, ...r } = this.receipt;\n    return `${this.name}: ${this.message}\n    ${id}: ${JSON.stringify(r)}`;\n  }\n}\n\n/**\n * @hidden\n *\n * An error class for Require revert errors.\n */\nexport class RequireRevertError extends RevertError {\n  /**\n   * Creates a new instance of RequireRevertError.\n   *\n   * @param receipt - The transaction revert receipt.\n   * @param reason - The revert reason.\n   */\n  constructor(receipt: TransactionResultRevertReceipt, reason: RevertReason) {\n    super(receipt, reason);\n    this.name = 'RequireRevertError';\n  }\n}\n\n/**\n * @hidden\n *\n * An error class for TransferToAddress revert errors.\n */\nexport class TransferToAddressRevertError extends RevertError {\n  /**\n   * Creates a new instance of TransferToAddressRevertError.\n   *\n   * @param receipt - The transaction revert receipt.\n   * @param reason - The revert reason.\n   */\n  constructor(receipt: TransactionResultRevertReceipt, reason: RevertReason) {\n    super(receipt, reason);\n    this.name = 'TransferToAddressRevertError';\n  }\n}\n\n/**\n * @hidden\n *\n * An error class for SendMessage revert errors.\n */\nexport class SendMessageRevertError extends RevertError {\n  /**\n   * Creates a new instance of SendMessageRevertError.\n   *\n   * @param receipt - The transaction revert receipt.\n   * @param reason - The revert reason.\n   */\n  constructor(receipt: TransactionResultRevertReceipt, reason: RevertReason) {\n    super(receipt, reason);\n    this.name = 'SendMessageRevertError';\n  }\n}\n\n/**\n * @hidden\n *\n * An error class for AssertFailed revert errors.\n */\nexport class AssertFailedRevertError extends RevertError {\n  /**\n   * Creates a new instance of AssertFailedRevertError.\n   *\n   * @param receipt - The transaction revert receipt.\n   * @param reason - The revert reason.\n   */\n  constructor(receipt: TransactionResultRevertReceipt, reason: RevertReason) {\n    super(receipt, reason);\n    this.name = 'AssertFailedRevertError';\n  }\n}\n\n/**\n * @hidden\n *\n * Factory function to create the appropriate RevertError instance based on the given receipt.\n *\n * @param receipt - The transaction revert receipt.\n * @returns The RevertError instance, or undefined if the revert reason is not recognized.\n */\nexport const revertErrorFactory = (\n  receipt: TransactionResultRevertReceipt\n): RevertError | undefined => {\n  const reason = decodeRevertErrorCode(receipt);\n  if (!reason) {\n    return undefined;\n  }\n\n  switch (reason) {\n    case 'RequireFailed':\n      return new RequireRevertError(receipt, reason);\n    case 'TransferToAddressFailed':\n      return new TransferToAddressRevertError(receipt, reason);\n    case 'SendMessageFailed':\n      return new SendMessageRevertError(receipt, reason);\n    case 'AssertFailed':\n      return new AssertFailedRevertError(receipt, reason);\n    default:\n      return new RevertError(receipt, reason);\n  }\n};\n","import { Logger } from '@ethersproject/logger';\nimport type { TransactionResultReceipt, TransactionResultRevertReceipt } from '@fuel-ts/providers';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport { versions } from '@fuel-ts/versions';\n\nimport type { RevertError } from './revert-error';\nimport { revertErrorFactory } from './revert-error';\n\nconst logger = new Logger(versions.FUELS);\n\nconst getRevertReceipts = (\n  receipts: TransactionResultReceipt[]\n): TransactionResultRevertReceipt[] =>\n  receipts.filter((r) => r.type === ReceiptType.Revert) as TransactionResultRevertReceipt[];\n\nexport class RevertErrorCodes {\n  private revertReceipts: TransactionResultRevertReceipt[];\n\n  constructor(receipts: TransactionResultReceipt[]) {\n    this.revertReceipts = getRevertReceipts(receipts);\n  }\n\n  assert(detailedError: Error): void {\n    const revertError = this.getError();\n    if (revertError) {\n      revertError.cause = detailedError;\n      throw revertError;\n    }\n  }\n\n  getError(): RevertError | undefined {\n    if (!this.revertReceipts.length) {\n      return undefined;\n    }\n\n    if (this.revertReceipts.length !== 1) {\n      logger.warn(\n        'Multiple revert receipts found, expected one. Receipts:',\n        JSON.stringify(this.revertReceipts)\n      );\n    }\n\n    return revertErrorFactory(this.revertReceipts[0]);\n  }\n}\n","import type { TransactionResult } from '@fuel-ts/providers';\nimport { ReceiptType } from '@fuel-ts/transactions';\n\nimport { RevertErrorCodes } from './revert/revert-error-codes';\nimport { getDocs } from './utils';\n\nconst bigintReplacer = (key: unknown, value: unknown) =>\n  typeof value === 'bigint' ? value.toString() : value;\n\n/**\n * @hidden\n */\nexport class ScriptResultDecoderError extends Error {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  logs: any[];\n  constructor(result: TransactionResult, message: string, logs: Array<unknown>) {\n    const docLink = JSON.stringify(getDocs(result.gqlTransaction.status), null, 2);\n    const logsText = logs.length ? `Logs:\\n${JSON.stringify(logs, null, 2)}` : null;\n    const receiptsText = `Receipts:\\n${JSON.stringify(\n      result.receipts.map(({ type, ...r }) => ({ type: ReceiptType[type], ...r })),\n      bigintReplacer,\n      2\n    )}`;\n    super(`${message}\\n\\n${docLink}\\n\\n${logsText ? `${logsText}\\n\\n` : ''}${receiptsText}`);\n    this.logs = logs;\n\n    new RevertErrorCodes(result.receipts).assert(this);\n  }\n}\n","import { concat, hexlify } from '@ethersproject/bytes';\nimport type * as asm from '@fuels/vm-asm';\n\n/**\n * A wrapper around fuel-asm to make dynamic instructions and convert to different formats\n */\nexport class InstructionSet {\n  #operations: asm.Instruction[];\n\n  constructor(...args: asm.Instruction[]) {\n    this.#operations = args || [];\n  }\n\n  entries(): asm.Instruction[] {\n    return this.#operations;\n  }\n\n  push(...args: asm.Instruction[]) {\n    this.#operations.push(...args);\n  }\n\n  concat(ops: asm.Instruction[]): asm.Instruction[] {\n    return this.#operations.concat(ops);\n  }\n\n  extend(ops: asm.Instruction[]) {\n    this.#operations.push(...ops);\n  }\n\n  toBytes(): Uint8Array {\n    return concat(\n      this.#operations.reduce((instructions, line) => {\n        instructions.push(line.to_bytes());\n        return instructions;\n      }, [] as Uint8Array[])\n    );\n  }\n\n  toHex(): string {\n    return hexlify(this.toBytes());\n  }\n\n  toString() {\n    return `Program:\\n${JSON.stringify(this.#operations, null, 2)}`;\n  }\n\n  byteLength() {\n    return this.toBytes().byteLength;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport {\n  VM_TX_MEMORY,\n  TRANSACTION_SCRIPT_FIXED_SIZE,\n  ASSET_ID_LEN,\n  WORD_SIZE,\n  CONTRACT_ID_LEN,\n} from '@fuel-ts/abi-coder';\nimport type { BN } from '@fuel-ts/math';\nimport type {\n  TransactionResultReturnDataReceipt,\n  TransactionResultRevertReceipt,\n  CallResult,\n  TransactionResultReceipt,\n  TransactionResultReturnReceipt,\n  TransactionResultScriptResultReceipt,\n  TransactionResult,\n} from '@fuel-ts/providers';\nimport type { ReceiptScriptResult } from '@fuel-ts/transactions';\nimport { ReceiptType } from '@fuel-ts/transactions';\nimport { versions } from '@fuel-ts/versions';\n\nimport { ScriptResultDecoderError } from './errors';\nimport type { CallConfig } from './types';\n\nconst logger = new Logger(versions.FUELS);\n\nexport const SCRIPT_DATA_BASE_OFFSET = VM_TX_MEMORY + TRANSACTION_SCRIPT_FIXED_SIZE;\nexport const POINTER_DATA_OFFSET = ASSET_ID_LEN + 2 * WORD_SIZE + CONTRACT_ID_LEN + 2 * WORD_SIZE;\n\n/**\n * Represents a script result, containing information about the script execution.\n */\nexport type ScriptResult = {\n  code: BN;\n  gasUsed: BN;\n  receipts: TransactionResultReceipt[];\n  scriptResultReceipt: TransactionResultScriptResultReceipt;\n  returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt;\n  callResult: CallResult;\n};\n\n/**\n * Converts a CallResult to a ScriptResult by extracting relevant information.\n *\n * @param callResult - The CallResult from the script call.\n * @returns The converted ScriptResult.\n */\nfunction callResultToScriptResult(callResult: CallResult): ScriptResult {\n  const receipts = [...callResult.receipts];\n\n  let scriptResultReceipt: ReceiptScriptResult | undefined;\n  let returnReceipt:\n    | TransactionResultReturnReceipt\n    | TransactionResultReturnDataReceipt\n    | TransactionResultRevertReceipt\n    | undefined;\n\n  receipts.forEach((receipt) => {\n    if (receipt.type === ReceiptType.ScriptResult) {\n      scriptResultReceipt = receipt;\n    } else if (\n      receipt.type === ReceiptType.Return ||\n      receipt.type === ReceiptType.ReturnData ||\n      receipt.type === ReceiptType.Revert\n    ) {\n      returnReceipt = receipt;\n    }\n  });\n\n  if (!scriptResultReceipt) {\n    throw new Error(`Expected scriptResultReceipt`);\n  }\n\n  if (!returnReceipt) {\n    throw new Error(`Expected returnReceipt`);\n  }\n\n  const scriptResult: ScriptResult = {\n    code: scriptResultReceipt.result,\n    gasUsed: scriptResultReceipt.gasUsed,\n    receipts,\n    scriptResultReceipt,\n    returnReceipt,\n    callResult,\n  };\n\n  return scriptResult;\n}\n\n/**\n * Decodes a CallResult using the provided decoder function.\n *\n * @param callResult - The CallResult to decode.\n * @param decoder - The decoding function to apply on the ScriptResult.\n * @param logs - Optional logs associated with the decoding.\n * @returns The decoded result.\n * @throws Throws an error if decoding fails.\n */\nexport function decodeCallResult<TResult>(\n  callResult: CallResult,\n  decoder: (scriptResult: ScriptResult) => TResult,\n  logs: Array<any> = []\n): TResult {\n  try {\n    const scriptResult = callResultToScriptResult(callResult);\n    return decoder(scriptResult);\n  } catch (error) {\n    throw new ScriptResultDecoderError(\n      callResult as TransactionResult,\n      (error as Error).message,\n      logs\n    );\n  }\n}\n\n/**\n * Converts a CallResult to an invocation result based on the provided call configuration.\n *\n * @param callResult - The CallResult from the script call.\n * @param call - The call configuration.\n * @param logs - Optional logs associated with the decoding.\n * @returns The decoded invocation result.\n */\nexport function callResultToInvocationResult<TReturn>(\n  callResult: CallResult,\n  call: CallConfig,\n  logs?: unknown[]\n): TReturn {\n  return decodeCallResult(\n    callResult,\n    (scriptResult: ScriptResult) => {\n      if (scriptResult.returnReceipt.type === ReceiptType.Revert) {\n        logger.throwError('Script Reverted', Logger.errors.CALL_EXCEPTION, logs);\n      }\n\n      if (\n        scriptResult.returnReceipt.type !== ReceiptType.Return &&\n        scriptResult.returnReceipt.type !== ReceiptType.ReturnData\n      ) {\n        logger.throwError(\n          `Script Return Type [${scriptResult.returnReceipt.type}] Invalid`,\n          Logger.errors.CALL_EXCEPTION,\n          {\n            logs,\n            receipt: scriptResult.returnReceipt,\n          }\n        );\n      }\n\n      let value;\n      if (scriptResult.returnReceipt.type === ReceiptType.Return) {\n        value = scriptResult.returnReceipt.val;\n      }\n      if (scriptResult.returnReceipt.type === ReceiptType.ReturnData) {\n        const decoded = call.program.interface.decodeFunctionResult(\n          call.func,\n          scriptResult.returnReceipt.data\n        );\n        value = (decoded as [TReturn])[0];\n      }\n\n      return value as TReturn;\n    },\n    logs\n  );\n}\n\nexport type EncodedScriptCall = Uint8Array | { data: Uint8Array; script: Uint8Array };\n\n/**\n * `ScriptRequest` provides functionality to encode and decode script data and results.\n *\n * @template TData - Type of the script data.\n * @template TResult - Type of the script result.\n */\nexport class ScriptRequest<TData = void, TResult = void> {\n  /**\n   * The bytes of the script.\n   */\n  bytes: Uint8Array;\n\n  /**\n   * A function to encode the script data.\n   */\n  scriptDataEncoder: (data: TData) => EncodedScriptCall;\n\n  /**\n   * A function to decode the script result.\n   */\n  scriptResultDecoder: (scriptResult: ScriptResult) => TResult;\n\n  /**\n   * Creates an instance of the ScriptRequest class.\n   *\n   * @param bytes - The bytes of the script.\n   * @param scriptDataEncoder - The script data encoder function.\n   * @param scriptResultDecoder - The script result decoder function.\n   */\n  constructor(\n    bytes: BytesLike,\n    scriptDataEncoder: (data: TData) => EncodedScriptCall,\n    scriptResultDecoder: (scriptResult: ScriptResult) => TResult\n  ) {\n    this.bytes = arrayify(bytes);\n    this.scriptDataEncoder = scriptDataEncoder;\n    this.scriptResultDecoder = scriptResultDecoder;\n  }\n\n  /**\n   * Gets the script data offset for the given bytes.\n   *\n   * @param bytes - The bytes of the script.\n   * @returns The script data offset.\n   */\n  static getScriptDataOffsetWithScriptBytes(byteLength: number): number {\n    return SCRIPT_DATA_BASE_OFFSET + byteLength;\n  }\n\n  /**\n   * Gets the script data offset.\n   *\n   * @returns The script data offset.\n   */\n  getScriptDataOffset() {\n    return ScriptRequest.getScriptDataOffsetWithScriptBytes(this.bytes.length);\n  }\n\n  /**\n   * Gets the offset for the contract call argument (used for struct inputs).\n   *\n   * @returns The memory offset.\n   */\n  getArgOffset() {\n    const callDataOffset = this.getScriptDataOffset() + ASSET_ID_LEN + WORD_SIZE;\n    return callDataOffset + CONTRACT_ID_LEN + WORD_SIZE + WORD_SIZE;\n  }\n\n  /**\n   * Encodes the data for a script call.\n   *\n   * @param data - The script data.\n   * @returns The encoded data.\n   */\n  encodeScriptData(data: TData): Uint8Array {\n    const callScript = this.scriptDataEncoder(data);\n    // if Uint8Array\n    if (ArrayBuffer.isView(callScript)) {\n      return callScript;\n    }\n\n    // object\n    this.bytes = arrayify(callScript.script);\n    return callScript.data;\n  }\n\n  /**\n   * Decodes the result of a script call.\n   *\n   * @param callResult - The CallResult from the script call.\n   * @param logs - Optional logs associated with the decoding.\n   * @returns The decoded result.\n   */\n  decodeCallResult(callResult: CallResult, logs: Array<any> = []): TResult {\n    return decodeCallResult(callResult, this.scriptResultDecoder, logs);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\n\n/**\n * The primary hash function for Fuel\n * SHA-256\n */\nexport function hash(data: BytesLike): string {\n  return sha256(data);\n}\n","class Node {\n  left: number;\n  right: number;\n  parent: number;\n  hash: string;\n  data: string;\n  index: number;\n\n  constructor(\n    left: number,\n    right: number,\n    parent: number,\n    hash: string,\n    data: string,\n    index: number = 0\n  ) {\n    this.left = left;\n    this.right = right;\n    this.parent = parent;\n    this.hash = hash;\n    this.data = data;\n    this.index = index;\n  }\n}\n\nexport default Node;\n","// A set of useful helper methods for testing binary Merkle trees.\nimport { EMPTY, hash } from '../common';\n\nimport Node from './types/node';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n */\nexport function hashLeaf(data: string): string {\n  return hash('0x00'.concat(data.slice(2)));\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * hash(prefix +  left + right)\n */\nexport function hashNode(left: string, right: string): string {\n  return hash('0x01'.concat(left.slice(2)).concat(right.slice(2)));\n}\n\n/**\n * Construct tree\n */\nexport function constructTree(data: string[]): Node[] {\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    const leaf = new Node(-1, -1, -1, hashed, data[i]);\n    leaf.index = i;\n    nodes.push(leaf);\n  }\n\n  const nodesList = [...nodes];\n  let pNodes = [...nodes];\n\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n      const nextIndex = nodesList.length;\n      nodes[i].index = nextIndex;\n\n      nodesList[pNodes[j].index].parent = nextIndex;\n      nodesList[pNodes[j + 1].index].parent = nextIndex;\n      nodesList.push(nodes[i]);\n    }\n\n    if (size === 1) {\n      break;\n    }\n\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = [...nodes];\n  }\n  return nodesList;\n}\n\n/**\n * Compute the merkle root\n */\nexport function calcRoot(data: string[]): string {\n  if (!data.length) {\n    return EMPTY;\n  }\n  const nodes = [];\n  for (let i = 0; i < data.length; i += 1) {\n    const hashed = hashLeaf(data[i]);\n    nodes.push(new Node(-1, -1, -1, hashed, data[i]));\n  }\n  let pNodes = nodes;\n  let size = (nodes.length + 1) >> 1;\n  let odd = nodes.length & 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    let i = 0;\n    for (; i < size - odd; i += 1) {\n      const j = i << 1;\n      const hashed = hashNode(pNodes[j].hash, pNodes[j + 1].hash);\n      nodes[i] = new Node(pNodes[j].index, pNodes[j + 1].index, -1, hashed, '');\n    }\n    if (odd === 1) {\n      nodes[i] = pNodes[i << 1];\n    }\n    if (size === 1) {\n      break;\n    }\n    odd = size & 1;\n    size = (size + 1) >> 1;\n    pNodes = nodes;\n  }\n  return nodes[0].hash;\n}\n\n/**\n * Get proof for the leaf\n */\nexport function getProof(nodes: Node[], id: number): string[] {\n  const proof: string[] = [];\n  for (let prev = id, cur = nodes[id].parent; cur !== -1; prev = cur, cur = nodes[cur].parent) {\n    if (nodes[cur].left === prev) {\n      proof.push(nodes[nodes[cur].right].hash);\n    } else {\n      proof.push(nodes[nodes[cur].left].hash);\n    }\n  }\n  return proof;\n}\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\n\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const MAX_HEIGHT = 256;\n","import { hash } from '../common';\n\nexport const leafPrefix = '0x00';\nexport const nodePrefix = '0x01';\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encode\n * prefix + key + hash(data)\n */\nexport function hashLeaf(key: string, data: string): [string, string] {\n  const value = '0x00'.concat(key.slice(2)).concat(hash(data).slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Slice off the '0x' on each argument to simulate abi.encodePacked\n * prefix + key + hash(data)\n */\nexport function hashNode(left: string, right: string): [string, string] {\n  const value = '0x01'.concat(left.slice(2)).concat(right.slice(2));\n  return [hash(value), value];\n}\n\n/**\n * Parse a leaf\n */\nexport function parseLeaf(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Parse a nodes\n */\nexport function parseNode(data: string): [string, string] {\n  const len = nodePrefix.length;\n  return ['0x'.concat(data.slice(len, len + 64)), '0x'.concat(data.slice(len + 64))];\n}\n\n/**\n * Check if data is a leaf by checking prefix\n */\nexport function isLeaf(data: string): boolean {\n  return data.slice(0, 4) === leafPrefix;\n}\n","class SparseCompactMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  BitMask: number[];\n  NumSideNodes: number;\n  SiblingData: string;\n\n  constructor(\n    SideNodes: string[],\n    NonMembershipLeafData: string,\n    Bitmask: number[],\n    NumSideNodes: number,\n    SiblingData: string\n  ) {\n    this.SideNodes = SideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.BitMask = Bitmask;\n    this.NumSideNodes = NumSideNodes;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseCompactMerkleProof;\n","// Sparse Merkle proof\nclass SparseMerkleProof {\n  SideNodes: string[];\n  NonMembershipLeafData: string;\n  SiblingData: string;\n\n  constructor(sideNodes: string[], NonMembershipLeafData: string, SiblingData: string) {\n    this.SideNodes = sideNodes;\n    this.NonMembershipLeafData = NonMembershipLeafData;\n    this.SiblingData = SiblingData;\n  }\n}\n\nexport default SparseMerkleProof;\n","export const ZERO = '0x0000000000000000000000000000000000000000000000000000000000000000';\nexport const EMPTY = '0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855';\nexport const MAX_HEIGHT = 256;\n\nexport interface MapStore {\n  [key: string]: string;\n}\n\n/**\n * Gets the bit at an offset from the most significant bit\n */\nexport function getBitAtFromMSB(data: string, position: number): number {\n  // if int(data[position / 8]) & (1 << (8 - 1 - uint(position) % 8)) > 0\n\n  // Slice off '0x'\n  const slicedData = data.slice(2);\n  // Get byte that contains the specified position\n  const byte = '0x'.concat(\n    slicedData.slice(Math.floor(position / 8) * 2, Math.floor(position / 8) * 2 + 2)\n  );\n  // Get bits from specified position within that byte\n  const bits = Number(byte) & (1 << (8 - 1 - (position % 8)));\n\n  // Bit at position = 0 IFF bits > 0.\n  if (bits > 0) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Reverse the nodes position\n */\nexport function reverseSideNodes(sideNodes: string[]): string[] {\n  let left = 0;\n  let right = sideNodes.length - 1;\n  const reversedSideNodes: string[] = sideNodes;\n\n  while (left < right) {\n    [reversedSideNodes[left], reversedSideNodes[right]] = [\n      reversedSideNodes[right],\n      reversedSideNodes[left],\n    ];\n    left += 1;\n    right -= 1;\n  }\n\n  return reversedSideNodes;\n}\n\n/**\n * Counts the common bit at at an offset from the most significant bit\n * between two inputs\n */\nexport function countCommonPrefix(data1: string, data2: string): number {\n  let count = 0;\n  for (let i = 0; i < MAX_HEIGHT; i += 1) {\n    if (getBitAtFromMSB(data1, i) === getBitAtFromMSB(data2, i)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  return count;\n}\n","/// @dev The Fuel testing Merkle trees.\n/// A set of useful helper methods for testing and deploying Merkle trees.\nimport { hash } from '../common';\n\nimport { compactProof } from './proofs';\nimport { isLeaf, hashLeaf, hashNode, parseLeaf, parseNode } from './treeHasher';\nimport type SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport type { MapStore } from './utils';\nimport { ZERO, MAX_HEIGHT, getBitAtFromMSB, reverseSideNodes, countCommonPrefix } from './utils';\n\nexport class SparseMerkleTree {\n  ms: MapStore;\n\n  root: string;\n\n  constructor() {\n    const ms: MapStore = {};\n    this.ms = ms;\n    this.root = ZERO;\n    this.ms[this.root] = ZERO;\n  }\n\n  get(key: string): string {\n    return this.ms[key];\n  }\n\n  set(key: string, value: string): void {\n    this.ms[key] = value;\n  }\n\n  setRoot(root: string): void {\n    this.root = root;\n  }\n\n  sideNodesForRoot(key: string, root: string): [string[], string, string, string] {\n    const sideNodes: string[] = [];\n\n    // If the root is a placeholder, there are no sidenodes to return.\n    // The data is nil, and the sibling is nil\n    if (root === ZERO) {\n      return [sideNodes, ZERO, '', ''];\n    }\n\n    let currentData = this.get(root);\n\n    // If the root is a leaf, there are also no sidenodes to return.\n    // The data is the leaf data, and the sibling is nil\n    if (isLeaf(currentData)) {\n      return [sideNodes, root, currentData, ''];\n    }\n\n    let leftNode;\n    let rightNode;\n    let nodeHash = '';\n    let sideNode = '';\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      [leftNode, rightNode] = parseNode(currentData);\n\n      if (getBitAtFromMSB(key, i) === 1) {\n        sideNode = leftNode;\n        nodeHash = rightNode;\n      } else {\n        sideNode = rightNode;\n        nodeHash = leftNode;\n      }\n\n      sideNodes.push(sideNode);\n\n      // If the node is a placeholder, we've reached the end.\n      if (nodeHash === ZERO) {\n        currentData = '';\n        break;\n      }\n\n      currentData = this.get(nodeHash);\n\n      // If the node is a leaf, we've reached the end.\n      if (isLeaf(currentData)) {\n        break;\n      }\n    }\n\n    const siblingData = this.get(sideNode);\n\n    return [reverseSideNodes(sideNodes), nodeHash, currentData, siblingData];\n  }\n\n  deleteWithSideNodes(\n    key: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    // If value already zero, deletion changes nothing. Just return current root\n\n    if (oldLeafHash === ZERO) {\n      return this.root;\n    }\n\n    // If key is already empty (different key found in its place), deletion changed nothing. Just return current root\n    const [actualPath] = parseLeaf(oldLeafData);\n\n    if (actualPath !== key) {\n      return this.root;\n    }\n\n    let currentHash = '';\n    let currentData = '';\n    let sideNode = '';\n    let sideNodeValue = '';\n    let nonPlaceholderReached = false;\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] === '') {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      sideNode = sideNodes[i];\n\n      if (currentData === '') {\n        sideNodeValue = this.get(sideNode);\n\n        if (isLeaf(sideNodeValue)) {\n          // This is the leaf sibling that needs to be percolated up the tree.\n          currentHash = sideNode;\n          currentData = sideNode;\n          // eslint-disable-next-line no-continue\n          continue;\n        } else {\n          // This is the node sibling that needs to be left in its place.\n          currentData = ZERO;\n          nonPlaceholderReached = true;\n        }\n      }\n\n      if (!nonPlaceholderReached && sideNode === ZERO) {\n        // We found another placeholder sibling node, keep going up the\n        // tree until we find the first sibling that is not a placeholder.\n        // eslint-disable-next-line no-continue\n        continue;\n      } else if (!nonPlaceholderReached) {\n        // We found the first sibling node that is not a placeholder, it is\n        // time to insert our leaf sibling node here.\n        nonPlaceholderReached = true;\n      }\n\n      if (getBitAtFromMSB(key, sideNodes.length - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    // The tree is empty; return placeholder value as root.\n    // How can currentHash be '' / nil if it's a hash ?\n    if (currentHash === '') {\n      currentHash = ZERO;\n    }\n\n    return currentHash;\n  }\n\n  updateWithSideNodes(\n    key: string,\n    value: string,\n    sideNodes: string[],\n    oldLeafHash: string,\n    oldLeafData: string\n  ): string {\n    let currentHash;\n    let currentData;\n\n    this.set(hash(value), value);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    this.set(currentHash, currentData);\n\n    currentData = currentHash;\n\n    // If the leaf node that sibling nodes lead to has a different actual path\n    // than the leaf node being updated, we need to create an intermediate node\n    // with this leaf node and the new leaf node as children.\n    //\n    // First, get the number of bits that the paths of the two leaf nodes share\n    // in common as a prefix.\n\n    let commonPrefixCount;\n\n    if (oldLeafHash === ZERO) {\n      commonPrefixCount = MAX_HEIGHT;\n    } else {\n      const [actualPath] = parseLeaf(oldLeafData);\n      commonPrefixCount = countCommonPrefix(key, actualPath);\n    }\n\n    if (commonPrefixCount !== MAX_HEIGHT) {\n      if (getBitAtFromMSB(key, commonPrefixCount) === 1) {\n        [currentHash, currentData] = hashNode(oldLeafHash, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, oldLeafHash);\n      }\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    for (let i = 0; i < MAX_HEIGHT; i += 1) {\n      let sideNode;\n      const offsetOfSideNodes = MAX_HEIGHT - sideNodes.length;\n\n      // If there are no sidenodes at this height, but the number of\n      // bits that the paths of the two leaf nodes share in common is\n      // greater than this height, then we need to build up the tree\n      // to this height with placeholder values at siblings.\n\n      if (i - offsetOfSideNodes < 0 || sideNodes[i - offsetOfSideNodes] === '') {\n        if (commonPrefixCount !== MAX_HEIGHT && commonPrefixCount > MAX_HEIGHT - 1 - i) {\n          sideNode = ZERO;\n        } else {\n          // eslint-disable-next-line no-continue\n          continue;\n        }\n      } else {\n        sideNode = sideNodes[i - offsetOfSideNodes];\n      }\n\n      if (getBitAtFromMSB(key, MAX_HEIGHT - 1 - i) === 1) {\n        [currentHash, currentData] = hashNode(sideNode, currentData);\n      } else {\n        [currentHash, currentData] = hashNode(currentData, sideNode);\n      }\n\n      this.set(currentHash, currentData);\n      currentData = currentHash;\n    }\n\n    return currentHash;\n  }\n\n  update(key: string, value: string): void {\n    const [sideNodes, oldLeafHash, oldLeafData] = this.sideNodesForRoot(key, this.root);\n\n    let newRoot;\n    if (value === ZERO) {\n      newRoot = this.deleteWithSideNodes(key, sideNodes, oldLeafHash, oldLeafData);\n    } else {\n      newRoot = this.updateWithSideNodes(key, value, sideNodes, oldLeafHash, oldLeafData);\n    }\n\n    this.setRoot(newRoot);\n  }\n\n  delete(key: string): void {\n    this.update(key, ZERO);\n  }\n\n  prove(key: string): SparseMerkleProof {\n    const [sideNodes, leafHash, leafData, siblingData] = this.sideNodesForRoot(key, this.root);\n\n    const nonEmptySideNodes: string[] = [];\n\n    for (let i = 0; i < sideNodes.length; i += 1) {\n      if (sideNodes[i] !== '') {\n        nonEmptySideNodes.push(sideNodes[i]);\n      }\n    }\n\n    // Deal with non-membership proofs. If the leaf hash is the placeholder\n    // value, we do not need to add anything else to the proof.\n    let nonMembershipLeafData = '';\n    if (leafHash !== ZERO) {\n      const [actualPath] = parseLeaf(leafData);\n      if (actualPath !== key) {\n        // This is a non-membership proof that involves showing a different leaf.\n        // Add the leaf data to the proof.\n        nonMembershipLeafData = leafData;\n      }\n    }\n\n    const proof = new SparseMerkleProof(nonEmptySideNodes, nonMembershipLeafData, siblingData);\n    return proof;\n  }\n\n  proveCompacted(key: string): SparseCompactMerkleProof {\n    const proof = this.prove(key);\n    const compactedProof = compactProof(proof);\n    return compactedProof;\n  }\n}\n","import { hash } from '../common';\n\nimport { hashLeaf, hashNode, parseLeaf } from './treeHasher';\nimport SparseCompactMerkleProof from './types/sparseCompactMerkleProof';\nimport SparseMerkleProof from './types/sparseMerkleProof';\nimport { getBitAtFromMSB, ZERO } from './utils';\n\n/**\n * Verify a merkle proof\n */\nexport function verifyProof(\n  proof: SparseMerkleProof,\n  root: string,\n  key: string,\n  value: string\n): [boolean, string[][]] {\n  const updates: string[][] = [[]];\n\n  // Detemine what the leaf hash should be\n  let currentHash;\n  let currentData;\n  let actualPath;\n  let valueHash;\n\n  if (value === ZERO) {\n    // Non-membership proof\n    if (proof.NonMembershipLeafData === '') {\n      currentHash = ZERO;\n    } else {\n      // leaf is an unrelated leaf\n      [actualPath, valueHash] = parseLeaf(proof.NonMembershipLeafData);\n      if (actualPath === key) {\n        // Leaf does exist : non-membership proof failed\n        return [false, []];\n      }\n      [currentHash, currentData] = hashLeaf(actualPath, valueHash);\n      updates.push([currentHash, currentData]);\n    }\n  } else {\n    // Membership proof\n    valueHash = hash(value);\n    updates.push([valueHash, value]);\n\n    [currentHash, currentData] = hashLeaf(key, value);\n    updates.push([currentHash, currentData]);\n  }\n\n  // Recompute root\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    const node = proof.SideNodes[i];\n\n    if (getBitAtFromMSB(key, proof.SideNodes.length - 1 - i) === 1) {\n      [currentHash, currentData] = hashNode(node, currentHash);\n    } else {\n      [currentHash, currentData] = hashNode(currentHash, node);\n    }\n\n    updates.push([currentHash, currentData]);\n  }\n\n  return [currentHash === root, updates];\n}\n\n/**\n * Compact a Sparse Merkle Proof using a bitmask\n */\nexport function compactProof(proof: SparseMerkleProof): SparseCompactMerkleProof {\n  const bitMask: number[] = [];\n  const compactedSideNodes: string[] = [];\n  let node;\n\n  for (let i = 0; i < proof.SideNodes.length; i += 1) {\n    node = proof.SideNodes[i];\n    if (node === ZERO) {\n      bitMask.push(0);\n    } else {\n      compactedSideNodes.push(node);\n      bitMask.push(1);\n    }\n  }\n  const compactedProof = new SparseCompactMerkleProof(\n    compactedSideNodes,\n    proof.NonMembershipLeafData,\n    bitMask,\n    proof.SideNodes.length,\n    proof.SiblingData\n  );\n  return compactedProof;\n}\n\n/**\n * Decompact a Sparse Merkle Proof\n */\nexport function decompactProof(proof: SparseCompactMerkleProof): SparseMerkleProof {\n  const decompactedSideNodes: string[] = [];\n  let position = 0;\n\n  for (let i = 0; i < proof.NumSideNodes; i += 1) {\n    if (proof.BitMask[i] === 0) {\n      decompactedSideNodes[i] = ZERO;\n    } else {\n      decompactedSideNodes[i] = proof.SideNodes[position];\n      position += 1;\n    }\n  }\n  const decompactedProof = new SparseMerkleProof(\n    decompactedSideNodes,\n    proof.NonMembershipLeafData,\n    proof.SiblingData\n  );\n\n  return decompactedProof;\n}\n","/**\n * Function to take a byte array and split into chunks of a given size\n *\n * @param bytes - The byte array to chunk\n * @param chunkSize - The size of each chunk\n * @returns An array of byte arrays of a specified size\n */\nexport const chunkAndPadBytes = (bytes: Uint8Array, chunkSize: number): Uint8Array[] => {\n  const chunks: Uint8Array[] = [];\n\n  for (let offset = 0; offset < bytes.length; offset += chunkSize) {\n    const chunk = new Uint8Array(chunkSize);\n    chunk.set(bytes.slice(offset, offset + chunkSize));\n    chunks.push(chunk);\n  }\n\n  const lastChunk = chunks[chunks.length - 1];\n  const remainingBytes = bytes.length % chunkSize;\n  const paddedChunkLength = remainingBytes + ((8 - (remainingBytes % 8)) % 8);\n  const newChunk = lastChunk.slice(0, paddedChunkLength);\n  chunks[chunks.length - 1] = newChunk;\n\n  return chunks;\n};\n","import type { BytesLike, DataOptions } from '@ethersproject/bytes';\nimport { hexlify, arrayify, concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { calcRoot, SparseMerkleTree } from '@fuel-ts/merkle';\nimport type { StorageSlot } from '@fuel-ts/transactions';\nimport { chunkAndPadBytes } from '@fuel-ts/utils';\n\n/**\n * @hidden\n *\n * Get the Merkle root of a contract's bytecode.\n *\n * @param bytecode - The bytecode of the contract.\n * @returns The Merkle root of the contract's bytecode.\n */\nexport const getContractRoot = (bytecode: BytesLike): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n\n  return calcRoot(chunks.map((c) => hexlify(c)));\n};\n\n/**\n * @hidden\n *\n * Get the Merkle root of a contract's storage slots.\n *\n * @param storageSlots - An array of storage slots containing key-value pairs.\n * @returns The Merkle root of the contract's storage slots.\n */\nexport const getContractStorageRoot = (storageSlots: StorageSlot[]): string => {\n  const tree = new SparseMerkleTree();\n\n  storageSlots.forEach(({ key, value }) => tree.update(sha256(key), value));\n\n  return tree.root;\n};\n\n/**\n * @hidden\n *\n * Get the contract ID of a contract based on its bytecode, salt,\n * and state root.\n *\n * @param bytecode - The bytecode of the contract.\n * @param salt - The salt value used for contract creation.\n * @param stateRoot - The state root of the contract.\n * @returns The contract ID of the contract.\n */\nexport const getContractId = (\n  bytecode: BytesLike,\n  salt: BytesLike,\n  stateRoot: BytesLike\n): string => {\n  const root = getContractRoot(arrayify(bytecode));\n  const contractId = sha256(concat(['0x4655454C', salt, root, stateRoot]));\n  return contractId;\n};\n\n/**\n * @hidden\n *\n * Ensures that a string is hexlified.\n *\n * @param value - The value to be hexlified.\n * @param options - Options for hexlify.\n * @returns The input value hexlified.\n */\nexport const includeHexPrefix = (value: string, options?: DataOptions) =>\n  hexlify(value, {\n    ...options,\n    allowMissingPrefix: true,\n  });\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { Contract } from '@fuel-ts/program';\nimport type { CreateTransactionRequestLike, Provider } from '@fuel-ts/providers';\nimport { CreateTransactionRequest } from '@fuel-ts/providers';\nimport type { StorageSlot } from '@fuel-ts/transactions';\nimport { MAX_GAS_PER_TX } from '@fuel-ts/transactions/configs';\nimport { versions } from '@fuel-ts/versions';\nimport type { Account } from '@fuel-ts/wallet';\n\nimport { getContractId, getContractStorageRoot, includeHexPrefix } from './util';\n\nconst logger = new Logger(versions.FUELS);\n\n/**\n * Options for deploying a contract.\n */\nexport type DeployContractOptions = {\n  salt?: BytesLike;\n  storageSlots?: StorageSlot[];\n  stateRoot?: BytesLike;\n  configurableConstants?: { [name: string]: unknown };\n} & CreateTransactionRequestLike;\n\n/**\n * `ContractFactory` provides utilities for deploying and configuring contracts.\n */\nexport default class ContractFactory {\n  bytecode: BytesLike;\n  interface: Interface;\n  provider!: Provider | null;\n  account!: Account | null;\n\n  /**\n   * Create a ContractFactory instance.\n   *\n   * @param bytecode - The bytecode of the contract.\n   * @param abi - The contract's ABI (Application Binary Interface).\n   * @param accountOrProvider - An account or provider to be associated with the factory.\n   */\n  constructor(\n    bytecode: BytesLike,\n    abi: JsonAbi | Interface,\n    accountOrProvider: Account | Provider | null = null\n  ) {\n    // Force the bytecode to be a byte array\n    this.bytecode = arrayify(bytecode);\n\n    if (abi instanceof Interface) {\n      this.interface = abi;\n    } else {\n      this.interface = new Interface(abi);\n    }\n\n    /**\n     Instead of using `instanceof` to compare classes, we instead check\n      if `accountOrProvider` has a `provider` property inside. If yes,\n      than we assume it's a Wallet.\n\n      This approach is safer than using `instanceof` because it\n      there might be different versions and bundles of the library.\n\n      The same is done at:\n      - ./contract.ts\n\n      @see Contract\n      */\n    if (accountOrProvider && 'provider' in accountOrProvider) {\n      this.provider = accountOrProvider.provider;\n      this.account = accountOrProvider;\n    } else {\n      this.provider = accountOrProvider;\n      this.account = null;\n    }\n  }\n\n  /**\n   * Connect the factory to a provider.\n   *\n   * @param provider - The provider to be associated with the factory.\n   * @returns A new ContractFactory instance.\n   */\n  connect(provider: Provider | null) {\n    return new ContractFactory(this.bytecode, this.interface, provider);\n  }\n\n  /**\n   * Create a transaction request to deploy a contract with the specified options.\n   *\n   * @param deployContractOptions - Options for deploying the contract.\n   * @returns The CreateTransactionRequest object for deploying the contract.\n   */\n  createTransactionRequest(deployContractOptions?: DeployContractOptions) {\n    const storageSlots = deployContractOptions?.storageSlots\n      ?.map(({ key, value }) => ({\n        key: includeHexPrefix(key),\n        value: includeHexPrefix(value),\n      }))\n      .sort(({ key: keyA }, { key: keyB }) => keyA.localeCompare(keyB));\n\n    const options = {\n      salt: randomBytes(32),\n      ...deployContractOptions,\n      storageSlots: storageSlots || [],\n    };\n\n    const stateRoot = options.stateRoot || getContractStorageRoot(options.storageSlots);\n    const contractId = getContractId(this.bytecode, options.salt, stateRoot);\n    const transactionRequest = new CreateTransactionRequest({\n      gasPrice: 0,\n      gasLimit: MAX_GAS_PER_TX,\n      bytecodeWitnessIndex: 0,\n      witnesses: [this.bytecode],\n      ...options,\n    });\n    transactionRequest.addContractCreatedOutput(contractId, stateRoot);\n\n    return {\n      contractId,\n      transactionRequest,\n    };\n  }\n\n  /**\n   * Deploy a contract with the specified options.\n   *\n   * @param deployContractOptions - Options for deploying the contract.\n   * @returns A promise that resolves to the deployed contract instance.\n   */\n  async deployContract(deployContractOptions: DeployContractOptions = {}) {\n    if (!this.account) {\n      return logger.throwArgumentError(\n        'Cannot deploy Contract without account',\n        'account',\n        this.account\n      );\n    }\n\n    const { configurableConstants } = deployContractOptions;\n\n    if (configurableConstants) {\n      this.setConfigurableConstants(configurableConstants);\n    }\n\n    const { contractId, transactionRequest } = this.createTransactionRequest(deployContractOptions);\n    await this.account.fund(transactionRequest);\n    const response = await this.account.sendTransaction(transactionRequest);\n    await response.wait();\n\n    return new Contract(contractId, this.interface, this.account);\n  }\n\n  /**\n   * Set configurable constants of the contract with the specified values.\n   *\n   * @param configurableConstants - An object containing configurable names and their values.\n   */\n  setConfigurableConstants(configurableConstants: { [name: string]: unknown }) {\n    try {\n      const hasConfigurable = Object.keys(this.interface.configurables).length;\n\n      if (!hasConfigurable) {\n        throw new Error('Contract has no configurables to be set');\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!this.interface.configurables[key]) {\n          throw new Error(`Contract has no configurable named: ${key}`);\n        }\n\n        const { offset } = this.interface.configurables[key];\n\n        const encoded = this.interface.encodeConfigurable(key, value as InputValue);\n\n        const bytes = arrayify(this.bytecode);\n\n        bytes.set(encoded, offset);\n\n        this.bytecode = bytes;\n      });\n    } catch (err) {\n      logger.throwError('Error setting configurables', Logger.errors.INVALID_ARGUMENT, {\n        error: err,\n        configurableConstants,\n      });\n    }\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { concat } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\nimport { ZeroBytes32 } from '@fuel-ts/address/configs';\nimport { bufferFromString } from '@fuel-ts/crypto';\nimport { bn } from '@fuel-ts/math';\nimport type { TransactionRequestLike } from '@fuel-ts/providers';\nimport { transactionRequestify, TransactionType } from '@fuel-ts/providers';\nimport type { UtxoId } from '@fuel-ts/transactions';\nimport { OutputType, InputType, TransactionCoder } from '@fuel-ts/transactions';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * hash string messages with sha256\n *\n * @param msg - The string message to be hashed\n * @returns A sha256 hash of the message\n */\nexport function hashMessage(msg: string) {\n  return sha256(bufferFromString(msg, 'utf-8'));\n}\n\n/**\n * Convert a uint64 number to a big-endian byte array\n */\nexport function uint64ToBytesBE(value: number): Uint8Array {\n  const bigIntValue = BigInt(value);\n  const buffer = new ArrayBuffer(8);\n  const dataView = new DataView(buffer);\n  dataView.setBigUint64(0, bigIntValue, false); // write the uint64 value in big-endian order\n  return new Uint8Array(dataView.buffer);\n}\n\n/**\n * Hash transaction request with sha256. [Read more](https://github.com/FuelLabs/fuel-specs/blob/master/specs/protocol/identifiers.md#transaction-id)\n *\n * @param transactionRequest - Transaction request to be hashed\n * @returns sha256 hash of the transaction\n */\nexport function hashTransaction(transactionRequestLike: TransactionRequestLike, chainId: number) {\n  const transactionRequest = transactionRequestify(transactionRequestLike);\n  // Return a new transaction object without references to the original transaction request\n  const transaction = transactionRequest.toTransaction();\n\n  if (transaction.type === TransactionType.Script) {\n    transaction.receiptsRoot = ZeroBytes32;\n  }\n\n  // Zero out input fields\n  transaction.inputs = transaction.inputs.map((input) => {\n    const inputClone = cloneDeep(input);\n\n    switch (inputClone.type) {\n      // Zero out on signing: txPointer, predicateGasUsed\n      case InputType.Coin: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: predicateGasUsed\n      case InputType.Message: {\n        inputClone.predicateGasUsed = bn(0);\n        return inputClone;\n      }\n      // Zero out on signing: txID, outputIndex, balanceRoot, stateRoot, and txPointer\n      case InputType.Contract: {\n        inputClone.txPointer = {\n          blockHeight: 0,\n          txIndex: 0,\n        };\n        inputClone.utxoID = <UtxoId>{\n          transactionId: ZeroBytes32,\n          outputIndex: 0,\n        };\n        inputClone.balanceRoot = ZeroBytes32;\n        inputClone.stateRoot = ZeroBytes32;\n        return inputClone;\n      }\n      default:\n        return inputClone;\n    }\n  });\n  // Zero out output fields\n  transaction.outputs = transaction.outputs.map((output) => {\n    const outputClone = cloneDeep(output);\n\n    switch (outputClone.type) {\n      // Zero out on signing: balanceRoot, stateRoot\n      case OutputType.Contract: {\n        outputClone.balanceRoot = ZeroBytes32;\n        outputClone.stateRoot = ZeroBytes32;\n        return outputClone;\n      }\n      // Zero out on signing: amount\n      case OutputType.Change: {\n        outputClone.amount = bn(0);\n        return outputClone;\n      }\n      // Zero out on signing: amount, to and assetId\n      case OutputType.Variable: {\n        outputClone.to = ZeroBytes32;\n        outputClone.amount = bn(0);\n        outputClone.assetId = ZeroBytes32;\n        return outputClone;\n      }\n      default:\n        return outputClone;\n    }\n  });\n  transaction.witnessesCount = 0;\n  transaction.witnesses = [];\n\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const concatenatedData = concat([chainIdBytes, new TransactionCoder().encode(transaction)]);\n  return sha256(concatenatedData);\n}\n\n/**\n * wrap sha256\n *\n * @param data - The data to be hash\n * @returns A sha256 hash of the data\n */\nexport function hash(data: BytesLike) {\n  return sha256(data);\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { concat, hexlify, arrayify } from '@ethersproject/bytes';\nimport { Address } from '@fuel-ts/address';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { hash } from '@fuel-ts/hasher';\nimport { toBytes } from '@fuel-ts/math';\nimport * as elliptic from 'elliptic';\n\n/* Importing `ec` like this to avoid the 'Requested module is a CommonJS module,\n * which may not support all module.exports as named exports' error\n * @see https://github.com/FuelLabs/fuels-ts/issues/841\n */\nconst { ec: EC } = elliptic;\n\n/**\n * Return elliptic instance with curve secp256k1\n */\nexport function getCurve() {\n  return new EC('secp256k1');\n}\n\nclass Signer {\n  readonly address: Address;\n\n  readonly publicKey: string;\n\n  readonly compressedPublicKey: string;\n\n  readonly privateKey: string;\n\n  /**\n   * Create a Signer instance from a given private key\n   *\n   * @param privateKey - The private key to use for signing\n   * @returns A new Signer instance\n   */\n  constructor(privateKey: BytesLike) {\n    // A lot of common tools do not prefix private keys with a 0x\n    if (typeof privateKey === 'string') {\n      if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n        // eslint-disable-next-line no-param-reassign\n        privateKey = `0x${privateKey}`;\n      }\n    }\n\n    // Convert to byte array, normalize private key input allowing it to be BytesLike\n    // like remove 0x prefix and accept array of bytes\n    const privateKeyBytes = arrayify(privateKey);\n    const keyPair = getCurve().keyFromPrivate(privateKeyBytes, 'hex');\n\n    // Slice(1) removes the encoding scheme from the public key\n    this.compressedPublicKey = hexlify(keyPair.getPublic(true, 'array'));\n    this.publicKey = hexlify(keyPair.getPublic(false, 'array').slice(1));\n    this.privateKey = hexlify(privateKeyBytes);\n    this.address = Address.fromPublicKey(this.publicKey);\n  }\n\n  /**\n   * Sign data using the Signer instance\n   *\n   * Signature is a 64 byte array of the concatenated r and s values with the compressed recoveryParam byte. [Read more](FuelLabs/fuel-specs/specs/protocol/cryptographic_primitives.md#public-key-cryptography)\n   *\n   * @param data - The data to be sign\n   * @returns hashed signature\n   */\n  sign(data: BytesLike) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey), 'hex');\n    const signature = keyPair.sign(arrayify(data), {\n      canonical: true,\n    });\n    const r = toBytes(signature.r, 32);\n    const s = toBytes(signature.s, 32);\n\n    // add recoveryParam to first s byte\n    s[0] |= (signature.recoveryParam || 0) << 7;\n\n    return hexlify(concat([r, s]));\n  }\n\n  /**\n   * Add point on the current elliptic curve\n   *\n   * @param point - Point to add on the curve\n   * @returns compressed point on the curve\n   */\n  addPoint(point: BytesLike) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.compressedPublicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(point));\n    const result = p0.getPublic().add(p1.getPublic());\n\n    return hexlify(result.encode('array', true));\n  }\n\n  /**\n   * Recover the public key from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - hashed signature\n   * @returns public key from signature from the\n   */\n  static recoverPublicKey(data: BytesLike, signature: BytesLike) {\n    const signedMessageBytes = arrayify(signature);\n    const r = signedMessageBytes.slice(0, 32);\n    const s = signedMessageBytes.slice(32, 64);\n    const recoveryParam = (s[0] & 0x80) >> 7;\n\n    // remove recoveryParam from s first byte\n    s[0] &= 0x7f;\n\n    const publicKey = getCurve()\n      .recoverPubKey(arrayify(data), { r, s }, recoveryParam)\n      .encode('array', false)\n      .slice(1);\n\n    return publicKey;\n  }\n\n  /**\n   * Recover the address from a signature performed with [`sign`](#sign).\n   *\n   * @param data - Data\n   * @param signature - Signature\n   * @returns Address from signature\n   */\n  static recoverAddress(data: BytesLike, signature: BytesLike): Address {\n    return Address.fromPublicKey(Signer.recoverPublicKey(data, signature));\n  }\n\n  /**\n   * Generate a random privateKey\n   *\n   * @param entropy - Adds extra entropy to generate the privateKey\n   * @returns random 32-byte hashed\n   */\n  static generatePrivateKey(entropy?: BytesLike) {\n    return entropy ? hash(concat([randomBytes(32), arrayify(entropy)])) : randomBytes(32);\n  }\n\n  /**\n   * Extended publicKey from a compact publicKey\n   *\n   * @param publicKey - Compact publicKey\n   * @returns extended publicKey\n   */\n  static extendPublicKey(publicKey: BytesLike) {\n    const keyPair = getCurve().keyFromPublic(arrayify(publicKey));\n    return hexlify(keyPair.getPublic(false, 'array').slice(1));\n  }\n}\n\nexport default Signer;\n","let wasm$1;\n\nconst cachedTextDecoder = (typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true }) : { decode: () => { throw Error('TextDecoder not available') } } );\n\nif (typeof TextDecoder !== 'undefined') { cachedTextDecoder.decode(); }\nlet cachedUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm$1.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*Adds two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction add(dst, lhs, rhs) {\n    const ret = wasm$1.add(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction and(dst, lhs, rhs) {\n    const ret = wasm$1.and(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction div(dst, lhs, rhs) {\n    const ret = wasm$1.div(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for equality.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction eq(dst, lhs, rhs) {\n    const ret = wasm$1.eq(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of another.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction exp(dst, lhs, rhs) {\n    const ret = wasm$1.exp(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for greater-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction gt(dst, lhs, rhs) {\n    const ret = wasm$1.gt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compares two registers for less-than.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction lt(dst, lhs, rhs) {\n    const ret = wasm$1.lt(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer logarithm of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mlog(dst, lhs, rhs) {\n    const ret = wasm$1.mlog(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The integer root of a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mroo(dst, lhs, rhs) {\n    const ret = wasm$1.mroo(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mod_(dst, lhs, rhs) {\n    const ret = wasm$1.mod_(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy from one register to another.\n* @param {number} dst\n* @param {number} src\n* @returns {Instruction}\n*/\nfunction move_(dst, src) {\n    const ret = wasm$1.move_(dst, src);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction mul(dst, lhs, rhs) {\n    const ret = wasm$1.mul(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise NOT a register.\n* @param {number} dst\n* @param {number} arg\n* @returns {Instruction}\n*/\nfunction not(dst, arg) {\n    const ret = wasm$1.not(dst, arg);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction or(dst, lhs, rhs) {\n    const ret = wasm$1.or(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sll(dst, lhs, rhs) {\n    const ret = wasm$1.sll(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by a register.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srl(dst, lhs, rhs) {\n    const ret = wasm$1.srl(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction sub(dst, lhs, rhs) {\n    const ret = wasm$1.sub(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs two registers.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xor(dst, lhs, rhs) {\n    const ret = wasm$1.xor(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction mldv(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.mldv(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction ret(value) {\n    const ret = wasm$1.ret(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Return from context with data.\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction retd(addr, len) {\n    const ret = wasm$1.retd(addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Allocate a number of bytes from the heap.\n* @param {number} bytes\n* @returns {Instruction}\n*/\nfunction aloc(bytes) {\n    const ret = wasm$1.aloc(bytes);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcl(dst_addr, len) {\n    const ret = wasm$1.mcl(dst_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy a variable number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcp(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcp(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare bytes in memory.\n* @param {number} result\n* @param {number} lhs_addr\n* @param {number} rhs_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction meq(result, lhs_addr, rhs_addr, len) {\n    const ret = wasm$1.meq(result, lhs_addr, rhs_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get block header hash for height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction bhsh(dst, heigth) {\n    const ret = wasm$1.bhsh(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block height.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction bhei(dst) {\n    const ret = wasm$1.bhei(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Burn coins of the current contract's asset ID.\n* @param {number} count\n* @returns {Instruction}\n*/\nfunction burn(count) {\n    const ret = wasm$1.burn(count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Call a contract.\n* @param {number} target_struct\n* @param {number} fwd_coins\n* @param {number} asset_id_addr\n* @param {number} fwd_gas\n* @returns {Instruction}\n*/\nfunction call(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n    const ret = wasm$1.call(target_struct, fwd_coins, asset_id_addr, fwd_gas);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy contract code for a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ccp(dst_addr, contract_id_addr, offset, len) {\n    const ret = wasm$1.ccp(dst_addr, contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code root of a contract.\n* @param {number} dst_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction croo(dst_addr, contract_id_addr) {\n    const ret = wasm$1.croo(dst_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get code size of a contract.\n* @param {number} dst\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction csiz(dst, contract_id_addr) {\n    const ret = wasm$1.csiz(dst, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get current block proposer's address.\n* @param {number} dst\n* @returns {Instruction}\n*/\nfunction cb(dst) {\n    const ret = wasm$1.cb(dst);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a contract's code as executable.\n* @param {number} contract_id_addr\n* @param {number} offset\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction ldc(contract_id_addr, offset, len) {\n    const ret = wasm$1.ldc(contract_id_addr, offset, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log an event.\n* @param {number} a\n* @param {number} b\n* @param {number} c\n* @param {number} d\n* @returns {Instruction}\n*/\nfunction log(a, b, c, d) {\n    const ret = wasm$1.log(a, b, c, d);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Log data.\n* @param {number} a\n* @param {number} b\n* @param {number} addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction logd(a, b, addr, len) {\n    const ret = wasm$1.logd(a, b, addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Mint coins of the current contract's asset ID.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction mint(amount) {\n    const ret = wasm$1.mint(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Halt execution, reverting state changes and returning a value.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction rvrt(value) {\n    const ret = wasm$1.rvrt(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear a series of slots from contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction scwq(key_addr, status, lenq) {\n    const ret = wasm$1.scwq(key_addr, status, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a word from contract storage.\n* @param {number} dst\n* @param {number} status\n* @param {number} key_addr\n* @returns {Instruction}\n*/\nfunction srw(dst, status, key_addr) {\n    const ret = wasm$1.srw(dst, status, key_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Load a series of 32 byte slots from contract storage.\n* @param {number} dst_addr\n* @param {number} status\n* @param {number} key_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction srwq(dst_addr, status, key_addr, lenq) {\n    const ret = wasm$1.srwq(dst_addr, status, key_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a word in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction sww(key_addr, status, value) {\n    const ret = wasm$1.sww(key_addr, status, value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Store a series of 32 byte slots in contract storage.\n* @param {number} key_addr\n* @param {number} status\n* @param {number} src_addr\n* @param {number} lenq\n* @returns {Instruction}\n*/\nfunction swwq(key_addr, status, src_addr, lenq) {\n    const ret = wasm$1.swwq(key_addr, status, src_addr, lenq);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a contract unconditionally.\n* @param {number} contract_id_addr\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tr(contract_id_addr, amount, asset_id_addr) {\n    const ret = wasm$1.tr(contract_id_addr, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Transfer coins to a variable output.\n* @param {number} contract_id_addr\n* @param {number} output_index\n* @param {number} amount\n* @param {number} asset_id_addr\n* @returns {Instruction}\n*/\nfunction tro(contract_id_addr, output_index, amount, asset_id_addr) {\n    const ret = wasm$1.tro(contract_id_addr, output_index, amount, asset_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction eck1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.eck1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message.\n* @param {number} dst_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ecr1(dst_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ecr1(dst_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Verify ED25519 public key and signature match a 32-byte message.\n* @param {number} pub_key_addr\n* @param {number} sig_addr\n* @param {number} msg_hash_addr\n* @returns {Instruction}\n*/\nfunction ed19(pub_key_addr, sig_addr, msg_hash_addr) {\n    const ret = wasm$1.ed19(pub_key_addr, sig_addr, msg_hash_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The keccak-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction k256(dst_addr, src_addr, len) {\n    const ret = wasm$1.k256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*The SHA-2-256 hash of a slice.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction s256(dst_addr, src_addr, len) {\n    const ret = wasm$1.s256(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get timestamp of block at given height.\n* @param {number} dst\n* @param {number} heigth\n* @returns {Instruction}\n*/\nfunction time(dst, heigth) {\n    const ret = wasm$1.time(dst, heigth);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Performs no operation.\n* @returns {Instruction}\n*/\nfunction noop() {\n    const ret = wasm$1.noop();\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Set flag register to a register.\n* @param {number} value\n* @returns {Instruction}\n*/\nfunction flag(value) {\n    const ret = wasm$1.flag(value);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get the balance of contract of an asset ID.\n* @param {number} dst\n* @param {number} asset_id_addr\n* @param {number} contract_id_addr\n* @returns {Instruction}\n*/\nfunction bal(dst, asset_id_addr, contract_id_addr) {\n    const ret = wasm$1.bal(dst, asset_id_addr, contract_id_addr);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jmp(abs_target) {\n    const ret = wasm$1.jmp(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional dynamic jump.\n* @param {number} abs_target\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction jne(abs_target, lhs, rhs) {\n    const ret = wasm$1.jne(abs_target, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Send a message to recipient address with call abi, coins, and output.\n* @param {number} recipient_addr\n* @param {number} data_addr\n* @param {number} data_len\n* @param {number} coins\n* @returns {Instruction}\n*/\nfunction smo(recipient_addr, data_addr, data_len, coins) {\n    const ret = wasm$1.smo(recipient_addr, data_addr, data_len, coins);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Adds a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction addi(dst, lhs, rhs) {\n    const ret = wasm$1.addi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ANDs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction andi(dst, lhs, rhs) {\n    const ret = wasm$1.andi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divides a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction divi(dst, lhs, rhs) {\n    const ret = wasm$1.divi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Raises one register to the power of an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction expi(dst, lhs, rhs) {\n    const ret = wasm$1.expi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Modulo remainder of a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction modi(dst, lhs, rhs) {\n    const ret = wasm$1.modi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiplies a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction muli(dst, lhs, rhs) {\n    const ret = wasm$1.muli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise ORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction ori(dst, lhs, rhs) {\n    const ret = wasm$1.ori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Left shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction slli(dst, lhs, rhs) {\n    const ret = wasm$1.slli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Right shifts a register by an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction srli(dst, lhs, rhs) {\n    const ret = wasm$1.srli(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Subtracts a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction subi(dst, lhs, rhs) {\n    const ret = wasm$1.subi(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Bitwise XORs a register and an immediate value.\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @returns {Instruction}\n*/\nfunction xori(dst, lhs, rhs) {\n    const ret = wasm$1.xori(dst, lhs, rhs);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnei(cond_lhs, cond_rhs, abs_target) {\n    const ret = wasm$1.jnei(cond_lhs, cond_rhs, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lb(dst, addr, offset) {\n    const ret = wasm$1.lb(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*A word is loaded from the specified address offset by an immediate value.\n* @param {number} dst\n* @param {number} addr\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction lw(dst, addr, offset) {\n    const ret = wasm$1.lw(dst, addr, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write the least significant byte of a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sb(addr, value, offset) {\n    const ret = wasm$1.sb(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Write a register to memory.\n* @param {number} addr\n* @param {number} value\n* @param {number} offset\n* @returns {Instruction}\n*/\nfunction sw(addr, value, offset) {\n    const ret = wasm$1.sw(addr, value, offset);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy an immediate number of bytes in memory.\n* @param {number} dst_addr\n* @param {number} src_addr\n* @param {number} len\n* @returns {Instruction}\n*/\nfunction mcpi(dst_addr, src_addr, len) {\n    const ret = wasm$1.mcpi(dst_addr, src_addr, len);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get transaction fields.\n* @param {number} dst\n* @param {number} arg\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gtf(dst, arg, selector) {\n    const ret = wasm$1.gtf(dst, arg, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Clear an immediate number of bytes in memory.\n* @param {number} addr\n* @param {number} count\n* @returns {Instruction}\n*/\nfunction mcli(addr, count) {\n    const ret = wasm$1.mcli(addr, count);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Get metadata from memory.\n* @param {number} dst\n* @param {number} selector\n* @returns {Instruction}\n*/\nfunction gm(dst, selector) {\n    const ret = wasm$1.gm(dst, selector);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Copy immediate value into a register\n* @param {number} dst\n* @param {number} val\n* @returns {Instruction}\n*/\nfunction movi(dst, val) {\n    const ret = wasm$1.movi(dst, val);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Conditional jump against zero.\n* @param {number} cond_nz\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction jnzi(cond_nz, abs_target) {\n    const ret = wasm$1.jnzi(cond_nz, abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpf(dynamic, fixed) {\n    const ret = wasm$1.jmpf(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jmpb(dynamic, fixed) {\n    const ret = wasm$1.jmpb(dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzf(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzf(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n* @param {number} cond_nz\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnzb(cond_nz, dynamic, fixed) {\n    const ret = wasm$1.jnzb(cond_nz, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jnef(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jnef(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n* @param {number} cond_lhs\n* @param {number} cond_rhs\n* @param {number} dynamic\n* @param {number} fixed\n* @returns {Instruction}\n*/\nfunction jneb(cond_lhs, cond_rhs, dynamic, fixed) {\n    const ret = wasm$1.jneb(cond_lhs, cond_rhs, dynamic, fixed);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Jump.\n* @param {number} abs_target\n* @returns {Instruction}\n*/\nfunction ji(abs_target) {\n    const ret = wasm$1.ji(abs_target);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfei(amount) {\n    const ret = wasm$1.cfei(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack by an immediate value.\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfsi(amount) {\n    const ret = wasm$1.cfsi(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Extend the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfe(amount) {\n    const ret = wasm$1.cfe(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Shrink the current call frame's stack\n* @param {number} amount\n* @returns {Instruction}\n*/\nfunction cfs(amount) {\n    const ret = wasm$1.cfs(amount);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 128bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Compare 256bit integers\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqcm(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqcm(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 128bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Simple 256bit operations\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqop(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqop(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wdml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wdml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Multiply 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqml(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqml(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 128bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wddv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wddv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Divide 256bit\n* @param {number} dst\n* @param {number} lhs\n* @param {number} rhs\n* @param {number} flags\n* @returns {Instruction}\n*/\nfunction wqdv(dst, lhs, rhs, flags) {\n    const ret = wasm$1.wqdv(dst, lhs, rhs, flags);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wdmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wdmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*Fused multiply-divide 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} divisor\n* @returns {Instruction}\n*/\nfunction wqmd(dst, mul_lhs, mul_rhs, divisor) {\n    const ret = wasm$1.wqmd(dst, mul_lhs, mul_rhs, divisor);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 128bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wdam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*AddMod 256bit\n* @param {number} dst\n* @param {number} add_lhs\n* @param {number} add_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqam(dst, add_lhs, add_rhs, modulo) {\n    const ret = wasm$1.wqam(dst, add_lhs, add_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 128bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wdmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wdmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n*MulMod 256bit\n* @param {number} dst\n* @param {number} mul_lhs\n* @param {number} mul_rhs\n* @param {number} modulo\n* @returns {Instruction}\n*/\nfunction wqmm(dst, mul_lhs, mul_rhs, modulo) {\n    const ret = wasm$1.wqmm(dst, mul_lhs, mul_rhs, modulo);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} args\n* @returns {Instruction}\n*/\nfunction gm_args(ra, args) {\n    const ret = wasm$1.gm_args(ra, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `GM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} args\n* @returns {Instruction}\n*/\nfunction gtf_args(ra, rb, args) {\n    const ret = wasm$1.gtf_args(ra, rb, args);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wdcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQCM` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {CompareArgs} args\n* @returns {Instruction}\n*/\nfunction wqcm_args(ra, rb, rc, args) {\n    _assertClass(args, CompareArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqcm_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wdop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQOP` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MathArgs} args\n* @returns {Instruction}\n*/\nfunction wqop_args(ra, rb, rc, args) {\n    _assertClass(args, MathArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqop_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wdml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wdml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQML` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {MulArgs} args\n* @returns {Instruction}\n*/\nfunction wqml_args(ra, rb, rc, args) {\n    _assertClass(args, MulArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqml_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WDDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wddv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wddv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\n/**\n* Construct a `WQDV` instruction from its arguments.\n* @param {number} ra\n* @param {number} rb\n* @param {number} rc\n* @param {DivArgs} args\n* @returns {Instruction}\n*/\nfunction wqdv_args(ra, rb, rc, args) {\n    _assertClass(args, DivArgs);\n    var ptr0 = args.__destroy_into_raw();\n    const ret = wasm$1.wqdv_args(ra, rb, rc, ptr0);\n    return Instruction.__wrap(ret);\n}\n\nlet cachedInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm$1.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    ptr = ptr >>> 0;\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*r\" Argument list for GM (get metadata) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GMArgs = Object.freeze({\n/**\n*r\" Get if caller is external.\n*/\nIsCallerExternal:1,\"1\":\"IsCallerExternal\",\n/**\n*r\" Get caller's contract ID.\n*/\nGetCaller:2,\"2\":\"GetCaller\",\n/**\n*r\" Get index of current predicate.\n*/\nGetVerifyingPredicate:3,\"3\":\"GetVerifyingPredicate\",\n/**\n*r\" Get the Chain ID this VM is operating within\n*/\nGetChainId:4,\"4\":\"GetChainId\", });\n/**\n*r\" Argument list for GTF (get tx fields) instruction\n*r\" The VM is the only who should match this struct, and it *MUST* always perform\n*r\" exhaustive match so all offered variants are covered.\n*/\nconst GTFArgs = Object.freeze({\n/**\n*r\" Set `$rA` to `tx.type`\n*/\nType:1,\"1\":\"Type\",\n/**\n*r\" Set `$rA` to `tx.gasPrice`\n*/\nScriptGasPrice:2,\"2\":\"ScriptGasPrice\",\n/**\n*r\" Set `$rA` to `tx.gasLimit`\n*/\nScriptGasLimit:3,\"3\":\"ScriptGasLimit\",\n/**\n*r\" Set `$rA` to `tx.maturity`\n*/\nScriptMaturity:4,\"4\":\"ScriptMaturity\",\n/**\n*r\" Set `$rA` to `tx.scriptLength`\n*/\nScriptLength:5,\"5\":\"ScriptLength\",\n/**\n*r\" Set `$rA` to `tx.scriptDataLength`\n*/\nScriptDataLength:6,\"6\":\"ScriptDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nScriptInputsCount:7,\"7\":\"ScriptInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nScriptOutputsCount:8,\"8\":\"ScriptOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nScriptWitnessesCound:9,\"9\":\"ScriptWitnessesCound\",\n/**\n*r\" Set `$rA` to `Memory address of tx.receiptsRoot`\n*/\nScriptReceiptsRoot:10,\"10\":\"ScriptReceiptsRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.script`\n*/\nScript:11,\"11\":\"Script\",\n/**\n*r\" Set `$rA` to `Memory address of tx.scriptData`\n*/\nScriptData:12,\"12\":\"ScriptData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nScriptInputAtIndex:13,\"13\":\"ScriptInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nScriptOutputAtIndex:14,\"14\":\"ScriptOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nScriptWitnessAtIndex:15,\"15\":\"ScriptWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.gasPrice`\n*/\nCreateGasPrice:16,\"16\":\"CreateGasPrice\",\n/**\n*r\" Set `$rA` to `tx.gasLimit`\n*/\nCreateGasLimit:17,\"17\":\"CreateGasLimit\",\n/**\n*r\" Set `$rA` to `tx.maturity`\n*/\nCreateMaturity:18,\"18\":\"CreateMaturity\",\n/**\n*r\" Set `$rA` to `tx.bytecodeLength`\n*/\nCreateBytecodeLength:19,\"19\":\"CreateBytecodeLength\",\n/**\n*r\" Set `$rA` to `tx.bytecodeWitnessIndex`\n*/\nCreateBytecodeWitnessIndex:20,\"20\":\"CreateBytecodeWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.storageSlotsCount`\n*/\nCreateStorageSlotsCount:21,\"21\":\"CreateStorageSlotsCount\",\n/**\n*r\" Set `$rA` to `tx.inputsCount`\n*/\nCreateInputsCount:22,\"22\":\"CreateInputsCount\",\n/**\n*r\" Set `$rA` to `tx.outputsCount`\n*/\nCreateOutputsCount:23,\"23\":\"CreateOutputsCount\",\n/**\n*r\" Set `$rA` to `tx.witnessesCount`\n*/\nCreateWitnessesCount:24,\"24\":\"CreateWitnessesCount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.salt`\n*/\nCreateSalt:25,\"25\":\"CreateSalt\",\n/**\n*r\" Set `$rA` to `Memory address of tx.storageSlots[$rB]`\n*/\nCreateStorageSlotAtIndex:26,\"26\":\"CreateStorageSlotAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB]`\n*/\nCreateInputAtIndex:27,\"27\":\"CreateInputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of t.outputs[$rB]`\n*/\nCreateOutputAtIndex:28,\"28\":\"CreateOutputAtIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB]`\n*/\nCreateWitnessAtIndex:29,\"29\":\"CreateWitnessAtIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].type`\n*/\nInputType:257,\"257\":\"InputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputCoinTxId:258,\"258\":\"InputCoinTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputCoinOutputIndex:259,\"259\":\"InputCoinOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].owner`\n*/\nInputCoinOwner:260,\"260\":\"InputCoinOwner\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputCoinAmount:261,\"261\":\"InputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].asset_id`\n*/\nInputCoinAssetId:262,\"262\":\"InputCoinAssetId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputCoinTxPointer:263,\"263\":\"InputCoinTxPointer\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputCoinWitnessIndex:264,\"264\":\"InputCoinWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].maturity`\n*/\nInputCoinMaturity:265,\"265\":\"InputCoinMaturity\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputCoinPredicateLength:266,\"266\":\"InputCoinPredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputCoinPredicateDataLength:267,\"267\":\"InputCoinPredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputCoinPredicate:268,\"268\":\"InputCoinPredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputCoinPredicateData:269,\"269\":\"InputCoinPredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputCoinPredicateGasUsed:270,\"270\":\"InputCoinPredicateGasUsed\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txID`\n*/\nInputContractTxId:271,\"271\":\"InputContractTxId\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].outputIndex`\n*/\nInputContractOutputIndex:272,\"272\":\"InputContractOutputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].balanceRoot`\n*/\nInputContractBalanceRoot:273,\"273\":\"InputContractBalanceRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].stateRoot`\n*/\nInputContractStateRoot:274,\"274\":\"InputContractStateRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].txPointer`\n*/\nInputContractTxPointer:275,\"275\":\"InputContractTxPointer\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].contractID`\n*/\nInputContractId:276,\"276\":\"InputContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].sender`\n*/\nInputMessageSender:277,\"277\":\"InputMessageSender\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].recipient`\n*/\nInputMessageRecipient:278,\"278\":\"InputMessageRecipient\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].amount`\n*/\nInputMessageAmount:279,\"279\":\"InputMessageAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].nonce`\n*/\nInputMessageNonce:280,\"280\":\"InputMessageNonce\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].witnessIndex`\n*/\nInputMessageWitnessIndex:281,\"281\":\"InputMessageWitnessIndex\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].dataLength`\n*/\nInputMessageDataLength:282,\"282\":\"InputMessageDataLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateLength`\n*/\nInputMessagePredicateLength:283,\"283\":\"InputMessagePredicateLength\",\n/**\n*r\" Set `$rA` to `tx.inputs[$rB].predicateDataLength`\n*/\nInputMessagePredicateDataLength:284,\"284\":\"InputMessagePredicateDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].data`\n*/\nInputMessageData:285,\"285\":\"InputMessageData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicate`\n*/\nInputMessagePredicate:286,\"286\":\"InputMessagePredicate\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateData`\n*/\nInputMessagePredicateData:287,\"287\":\"InputMessagePredicateData\",\n/**\n*r\" Set `$rA` to `Memory address of tx.inputs[$rB].predicateGasUsed`\n*/\nInputMessagePredicateGasUsed:288,\"288\":\"InputMessagePredicateGasUsed\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].type`\n*/\nOutputType:513,\"513\":\"OutputType\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].to`\n*/\nOutputCoinTo:514,\"514\":\"OutputCoinTo\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].amount`\n*/\nOutputCoinAmount:515,\"515\":\"OutputCoinAmount\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].asset_id`\n*/\nOutputCoinAssetId:516,\"516\":\"OutputCoinAssetId\",\n/**\n*r\" Set `$rA` to `tx.outputs[$rB].inputIndex`\n*/\nOutputContractInputIndex:517,\"517\":\"OutputContractInputIndex\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].balanceRoot`\n*/\nOutputContractBalanceRoot:518,\"518\":\"OutputContractBalanceRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractStateRoot:519,\"519\":\"OutputContractStateRoot\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].contractID`\n*/\nOutputContractCreatedContractId:520,\"520\":\"OutputContractCreatedContractId\",\n/**\n*r\" Set `$rA` to `Memory address of tx.outputs[$rB].stateRoot`\n*/\nOutputContractCreatedStateRoot:521,\"521\":\"OutputContractCreatedStateRoot\",\n/**\n*r\" Set `$rA` to `tx.witnesses[$rB].dataLength`\n*/\nWitnessDataLength:769,\"769\":\"WitnessDataLength\",\n/**\n*r\" Set `$rA` to `Memory address of tx.witnesses[$rB].data`\n*/\nWitnessData:770,\"770\":\"WitnessData\", });\n/**\n*r\" Panic reason representation for the interpreter.\n*/\nconst PanicReason = Object.freeze({\n/**\n*r\" The byte can't be mapped to any known `PanicReason`.\n*/\nUnknownPanicReason:0,\"0\":\"UnknownPanicReason\",\n/**\n*r\" Found `RVRT` instruction.\n*/\nRevert:1,\"1\":\"Revert\",\n/**\n*r\" Execution ran out of gas.\n*/\nOutOfGas:2,\"2\":\"OutOfGas\",\n/**\n*r\" The transaction validity is violated.\n*/\nTransactionValidity:3,\"3\":\"TransactionValidity\",\n/**\n*r\" Attempt to write outside interpreter memory boundaries.\n*/\nMemoryOverflow:4,\"4\":\"MemoryOverflow\",\n/**\n*r\" Overflow while executing arithmetic operation.\n*r\" These errors are ignored using the WRAPPING flag.\n*/\nArithmeticOverflow:5,\"5\":\"ArithmeticOverflow\",\n/**\n*r\" Designed contract was not found in the storage.\n*/\nContractNotFound:6,\"6\":\"ContractNotFound\",\n/**\n*r\" Memory ownership rules are violated.\n*/\nMemoryOwnership:7,\"7\":\"MemoryOwnership\",\n/**\n*r\" The asset ID balance isn't enough for the instruction.\n*/\nNotEnoughBalance:8,\"8\":\"NotEnoughBalance\",\n/**\n*r\" The interpreter is expected to be in internal context.\n*/\nExpectedInternalContext:9,\"9\":\"ExpectedInternalContext\",\n/**\n*r\" The queried asset ID was not found in the state.\n*/\nAssetIdNotFound:10,\"10\":\"AssetIdNotFound\",\n/**\n*r\" The provided input is not found in the transaction.\n*/\nInputNotFound:11,\"11\":\"InputNotFound\",\n/**\n*r\" The provided output is not found in the transaction.\n*/\nOutputNotFound:12,\"12\":\"OutputNotFound\",\n/**\n*r\" The provided witness is not found in the transaction.\n*/\nWitnessNotFound:13,\"13\":\"WitnessNotFound\",\n/**\n*r\" The transaction maturity is not valid for this request.\n*/\nTransactionMaturity:14,\"14\":\"TransactionMaturity\",\n/**\n*r\" The metadata identifier is invalid.\n*/\nInvalidMetadataIdentifier:15,\"15\":\"InvalidMetadataIdentifier\",\n/**\n*r\" The call structure is not valid.\n*/\nMalformedCallStructure:16,\"16\":\"MalformedCallStructure\",\n/**\n*r\" The provided register does not allow write operations.\n*/\nReservedRegisterNotWritable:17,\"17\":\"ReservedRegisterNotWritable\",\n/**\n*r\" The execution resulted in an erroneous state of the interpreter.\n*/\nErrorFlag:18,\"18\":\"ErrorFlag\",\n/**\n*r\" The provided immediate value is not valid for this instruction.\n*/\nInvalidImmediateValue:19,\"19\":\"InvalidImmediateValue\",\n/**\n*r\" The provided transaction input is not of type `Coin`.\n*/\nExpectedCoinInput:20,\"20\":\"ExpectedCoinInput\",\n/**\n*r\" The requested memory access exceeds the limits of the interpreter.\n*/\nMaxMemoryAccess:21,\"21\":\"MaxMemoryAccess\",\n/**\n*r\" Two segments of the interpreter memory should not intersect for write operations.\n*/\nMemoryWriteOverlap:22,\"22\":\"MemoryWriteOverlap\",\n/**\n*r\" The requested contract is not listed in the transaction inputs.\n*/\nContractNotInInputs:23,\"23\":\"ContractNotInInputs\",\n/**\n*r\" The internal asset ID balance overflowed with the provided instruction.\n*/\nInternalBalanceOverflow:24,\"24\":\"InternalBalanceOverflow\",\n/**\n*r\" The maximum allowed contract size is violated.\n*/\nContractMaxSize:25,\"25\":\"ContractMaxSize\",\n/**\n*r\" This instruction expects the stack area to be unallocated for this call.\n*/\nExpectedUnallocatedStack:26,\"26\":\"ExpectedUnallocatedStack\",\n/**\n*r\" The maximum allowed number of static contracts was reached for this transaction.\n*/\nMaxStaticContractsReached:27,\"27\":\"MaxStaticContractsReached\",\n/**\n*r\" The requested transfer amount cannot be zero.\n*/\nTransferAmountCannotBeZero:28,\"28\":\"TransferAmountCannotBeZero\",\n/**\n*r\" The provided transaction output should be of type `Variable`.\n*/\nExpectedOutputVariable:29,\"29\":\"ExpectedOutputVariable\",\n/**\n*r\" The expected context of the stack parent is internal.\n*/\nExpectedParentInternalContext:30,\"30\":\"ExpectedParentInternalContext\",\n/**\n*r\" The jump instruction cannot move backwards in predicate verification.\n*/\nIllegalJump:31,\"31\":\"IllegalJump\",\n/**\n*r\" The contract ID is already deployed and can't be overwritten.\n*/\nContractIdAlreadyDeployed:32,\"32\":\"ContractIdAlreadyDeployed\",\n/**\n*r\" The loaded contract mismatch expectations.\n*/\nContractMismatch:33,\"33\":\"ContractMismatch\",\n/**\n*r\" Attempting to send message data longer than `MAX_MESSAGE_DATA_LENGTH`\n*/\nMessageDataTooLong:34,\"34\":\"MessageDataTooLong\",\n/**\n*r\" Mathimatically invalid arguments where given to an arithmetic instruction.\n*r\" For instance, division by zero produces this.\n*r\" These errors are ignored using the UNSAFEMATH flag.\n*/\nArithmeticError:35,\"35\":\"ArithmeticError\",\n/**\n*r\" The contract instruction is not allowed in predicates.\n*/\nContractInstructionNotAllowed:36,\"36\":\"ContractInstructionNotAllowed\", });\n/**\n* Comparison mode used by WDCM and WQCM instructions.\n*/\nconst CompareMode = Object.freeze({\n/**\n* Equality (`==`)\n*/\nEQ:0,\"0\":\"EQ\",\n/**\n* Inequality (`!=`)\n*/\nNE:1,\"1\":\"NE\",\n/**\n* Less than (`<`)\n*/\nLT:2,\"2\":\"LT\",\n/**\n* Greater than (`>`)\n*/\nGT:3,\"3\":\"GT\",\n/**\n* Less than or equals (`>=`)\n*/\nLTE:4,\"4\":\"LTE\",\n/**\n* Greater than or equals (`>=`)\n*/\nGTE:5,\"5\":\"GTE\",\n/**\n* Number of leading zeroes in lhs (`lzcnt`) (discards rhs)\n*/\nLZC:6,\"6\":\"LZC\", });\n/**\n* The operation performed by WDOP and WQOP instructions, determined as\n*/\nconst MathOp = Object.freeze({\n/**\n* Add\n*/\nADD:0,\"0\":\"ADD\",\n/**\n* Subtract\n*/\nSUB:1,\"1\":\"SUB\",\n/**\n* Invert bits (discards rhs)\n*/\nNOT:2,\"2\":\"NOT\",\n/**\n* Bitwise or\n*/\nOR:3,\"3\":\"OR\",\n/**\n* Bitwise exclusive or\n*/\nXOR:4,\"4\":\"XOR\",\n/**\n* Bitwise and\n*/\nAND:5,\"5\":\"AND\",\n/**\n* Shift left\n*/\nSHL:6,\"6\":\"SHL\",\n/**\n* Shift right\n*/\nSHR:7,\"7\":\"SHR\", });\n/**\n*Adds two registers.\n*/\nclass ADD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ADD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_add_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ADD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Adds a register and an immediate value.\n*/\nclass ADDI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ADDI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_addi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ADDI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Allocate a number of bytes from the heap.\n*/\nclass ALOC {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ALOC.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_aloc_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} bytes\n    */\n    constructor(bytes) {\n        _assertClass(bytes, RegId);\n        var ptr0 = bytes.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return ALOC.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ANDs two registers.\n*/\nclass AND {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(AND.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_and_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return AND.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ANDs a register and an immediate value.\n*/\nclass ANDI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ANDI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_andi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ANDI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Get the balance of contract of an asset ID.\n*/\nclass BAL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BAL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bal_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} asset_id_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, asset_id_addr, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr1 = asset_id_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr2 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return BAL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get current block height.\n*/\nclass BHEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BHEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return BHEI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get block header hash for height.\n*/\nclass BHSH {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BHSH.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_bhsh_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return BHSH.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Burn coins of the current contract's asset ID.\n*/\nclass BURN {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(BURN.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_burn_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} count\n    */\n    constructor(count) {\n        _assertClass(count, RegId);\n        var ptr0 = count.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return BURN.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Call a contract.\n*/\nclass CALL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CALL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_call_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} target_struct\n    * @param {RegId} fwd_coins\n    * @param {RegId} asset_id_addr\n    * @param {RegId} fwd_gas\n    */\n    constructor(target_struct, fwd_coins, asset_id_addr, fwd_gas) {\n        _assertClass(target_struct, RegId);\n        var ptr0 = target_struct.__destroy_into_raw();\n        _assertClass(fwd_coins, RegId);\n        var ptr1 = fwd_coins.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        _assertClass(fwd_gas, RegId);\n        var ptr3 = fwd_gas.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return CALL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get current block proposer's address.\n*/\nclass CB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    */\n    constructor(dst) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy contract code for a contract.\n*/\nclass CCP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CCP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ccp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(dst_addr, contract_id_addr, offset, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr2 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return CCP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Extend the current call frame's stack\n*/\nclass CFE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfe_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CFE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Extend the current call frame's stack by an immediate value.\n*/\nclass CFEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return CFEI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Shrink the current call frame's stack\n*/\nclass CFS {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFS.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfs_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return CFS.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Shrink the current call frame's stack by an immediate value.\n*/\nclass CFSI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CFSI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_cfsi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, Imm24);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return CFSI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Get code root of a contract.\n*/\nclass CROO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CROO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_croo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst_addr, contract_id_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return CROO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get code size of a contract.\n*/\nclass CSIZ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CSIZ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_csiz_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} contract_id_addr\n    */\n    constructor(dst, contract_id_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(contract_id_addr, RegId);\n        var ptr1 = contract_id_addr.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return CSIZ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n* Arguments for WDCM and WQCM instructions.\n*/\nclass CompareArgs {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(CompareArgs.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_compareargs_free(ptr);\n    }\n    /**\n    * Comparison mode\n    * @returns {number}\n    */\n    get mode() {\n        const ret = wasm$1.__wbg_get_compareargs_mode(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Comparison mode\n    * @param {number} arg0\n    */\n    set mode(arg0) {\n        wasm$1.__wbg_set_compareargs_mode(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Convert to immediate value.\n    * @returns {Imm06}\n    */\n    to_imm() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.compareargs_to_imm(ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct from `Imm06`. Returns `None` if the value has reserved flags set.\n    * @param {Imm06} bits\n    * @returns {CompareArgs | undefined}\n    */\n    static from_imm(bits) {\n        _assertClass(bits, Imm06);\n        var ptr0 = bits.__destroy_into_raw();\n        const ret = wasm$1.compareargs_from_imm(ptr0);\n        return ret === 0 ? undefined : CompareArgs.__wrap(ret);\n    }\n}\n/**\n*Divides two registers.\n*/\nclass DIV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DIV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_div_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return DIV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Divides a register and an immediate value.\n*/\nclass DIVI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(DIVI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return DIVI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n* Additional arguments for WMDV and WDDV instructions.\n*/\nclass DivArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_divargs_free(ptr);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n*The 64-byte public key (x, y) recovered from 64-byte signature on 32-byte message.\n*/\nclass ECK1 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ECK1.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eck1_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ECK1.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*The 64-byte Secp256r1 public key (x, y) recovered from 64-byte signature on 32-byte message.\n*/\nclass ECR1 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ECR1.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ecr1_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(dst_addr, sig_addr, msg_hash_addr) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ECR1.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Verify ED25519 public key and signature match a 32-byte message.\n*/\nclass ED19 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ED19.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ed19_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} pub_key_addr\n    * @param {RegId} sig_addr\n    * @param {RegId} msg_hash_addr\n    */\n    constructor(pub_key_addr, sig_addr, msg_hash_addr) {\n        _assertClass(pub_key_addr, RegId);\n        var ptr0 = pub_key_addr.__destroy_into_raw();\n        _assertClass(sig_addr, RegId);\n        var ptr1 = sig_addr.__destroy_into_raw();\n        _assertClass(msg_hash_addr, RegId);\n        var ptr2 = msg_hash_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return ED19.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for equality.\n*/\nclass EQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_eq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return EQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Raises one register to the power of another.\n*/\nclass EXP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EXP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_exp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return EXP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Raises one register to the power of an immediate value.\n*/\nclass EXPI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(EXPI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_expi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return EXPI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Set flag register to a register.\n*/\nclass FLAG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(FLAG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_flag_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return FLAG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get metadata from memory.\n*/\nclass GM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} selector\n    */\n    constructor(dst, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(selector, Imm18);\n        var ptr1 = selector.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return GM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n    /**\n    * Construct a `GM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {number} args\n    * @returns {GM}\n    */\n    static from_args(ra, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        const ret = wasm$1.gm_from_args(ptr0, args);\n        return GM.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for greater-than.\n*/\nclass GT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return GT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get transaction fields.\n*/\nclass GTF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(GTF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_gtf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    * @param {Imm12} selector\n    */\n    constructor(dst, arg, selector) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        _assertClass(selector, Imm12);\n        var ptr2 = selector.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return GTF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n    /**\n    * Construct a `GTF` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {number} args\n    * @returns {GTF}\n    */\n    static from_args(ra, rb, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        const ret = wasm$1.gtf_from_args(ptr0, ptr1, args);\n        return GTF.__wrap(ret);\n    }\n}\n/**\n* Represents a 6-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm06 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm06.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm06_free(ptr);\n    }\n}\n/**\n* Represents a 12-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm12 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm12.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm12_free(ptr);\n    }\n}\n/**\n* Represents a 18-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm18 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm18.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm18_free(ptr);\n    }\n}\n/**\n* Represents a 24-bit immediate value, guaranteed to be masked by construction.\n*/\nclass Imm24 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Imm24.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_imm24_free(ptr);\n    }\n}\n/**\n* Representation of a single instruction for the interpreter.\n*\n* The opcode is represented in the tag (variant), or may be retrieved in the\n* form of an `Opcode` byte using the `opcode` method.\n*\n* The register and immediate data associated with the instruction is represented\n* within an inner unit type wrapper around the 3 remaining bytes.\n*/\nclass Instruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(Instruction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_instruction_free(ptr);\n    }\n    /**\n    * Convenience method for converting to bytes\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = wasm$1.__wbindgen_add_to_stack_pointer(-16);\n            wasm$1.instruction_to_bytes(retptr, this.__wbg_ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm$1.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm$1.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Size of an instruction in bytes\n    * @returns {number}\n    */\n    static size() {\n        const ret = wasm$1.instruction_size();\n        return ret >>> 0;\n    }\n}\n/**\n*Jump.\n*/\nclass JI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ji_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {Imm24} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, Imm24);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.cfei_new_typescript(ptr0);\n        return JI.__wrap(ret);\n    }\n    /**\n    * Access the 24-bit immediate value.\n    * @returns {Imm24}\n    */\n    imm24() {\n        const ret = wasm$1.cfei_imm24(this.__wbg_ptr);\n        return Imm24.__wrap(ret);\n    }\n}\n/**\n*Dynamic jump.\n*/\nclass JMP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    */\n    constructor(abs_target) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return JMP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Unconditional dynamic relative jump backwards, with a constant offset.\n*/\nclass JMPB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMPB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JMPB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Unconditional dynamic relative jump forwards, with a constant offset.\n*/\nclass JMPF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JMPF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jmpf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dynamic\n    * @param {Imm18} fixed\n    */\n    constructor(dynamic, fixed) {\n        _assertClass(dynamic, RegId);\n        var ptr0 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm18);\n        var ptr1 = fixed.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JMPF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Conditional dynamic jump.\n*/\nclass JNE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jne_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} abs_target\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(abs_target, lhs, rhs) {\n        _assertClass(abs_target, RegId);\n        var ptr0 = abs_target.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return JNE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump backwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jneb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return JNEB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump forwards, conditional on comparsion, with a constant offset.\n*/\nclass JNEF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnef_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {RegId} dynamic\n    * @param {Imm06} fixed\n    */\n    constructor(cond_lhs, cond_rhs, dynamic, fixed) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr2 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm06);\n        var ptr3 = fixed.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return JNEF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n}\n/**\n*Conditional jump.\n*/\nclass JNEI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNEI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnei_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_lhs\n    * @param {RegId} cond_rhs\n    * @param {Imm12} abs_target\n    */\n    constructor(cond_lhs, cond_rhs, abs_target) {\n        _assertClass(cond_lhs, RegId);\n        var ptr0 = cond_lhs.__destroy_into_raw();\n        _assertClass(cond_rhs, RegId);\n        var ptr1 = cond_rhs.__destroy_into_raw();\n        _assertClass(abs_target, Imm12);\n        var ptr2 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNEI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump backwards, conditional against zero, with a constant offset.\n*/\nclass JNZB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNZB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Dynamic relative jump forwards, conditional against zero, with a constant offset.\n*/\nclass JNZF {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZF.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzf_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {RegId} dynamic\n    * @param {Imm12} fixed\n    */\n    constructor(cond_nz, dynamic, fixed) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(dynamic, RegId);\n        var ptr1 = dynamic.__destroy_into_raw();\n        _assertClass(fixed, Imm12);\n        var ptr2 = fixed.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return JNZF.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Conditional jump against zero.\n*/\nclass JNZI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(JNZI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_jnzi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} cond_nz\n    * @param {Imm18} abs_target\n    */\n    constructor(cond_nz, abs_target) {\n        _assertClass(cond_nz, RegId);\n        var ptr0 = cond_nz.__destroy_into_raw();\n        _assertClass(abs_target, Imm18);\n        var ptr1 = abs_target.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return JNZI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*The keccak-256 hash of a slice.\n*/\nclass K256 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(K256.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_k256_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return K256.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*A byte is loaded from the specified address offset by an immediate value.\n*/\nclass LB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return LB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Load a contract's code as executable.\n*/\nclass LDC {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LDC.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ldc_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} offset\n    * @param {RegId} len\n    */\n    constructor(contract_id_addr, offset, len) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(offset, RegId);\n        var ptr1 = offset.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return LDC.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Log an event.\n*/\nclass LOG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LOG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_log_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} c\n    * @param {RegId} d\n    */\n    constructor(a, b, c, d) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(c, RegId);\n        var ptr2 = c.__destroy_into_raw();\n        _assertClass(d, RegId);\n        var ptr3 = d.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return LOG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Log data.\n*/\nclass LOGD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LOGD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_logd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} a\n    * @param {RegId} b\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(a, b, addr, len) {\n        _assertClass(a, RegId);\n        var ptr0 = a.__destroy_into_raw();\n        _assertClass(b, RegId);\n        var ptr1 = b.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr2 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return LOGD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compares two registers for less-than.\n*/\nclass LT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return LT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*A word is loaded from the specified address offset by an immediate value.\n*/\nclass LW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(LW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_lw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} addr\n    * @param {Imm12} offset\n    */\n    constructor(dst, addr, offset) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(addr, RegId);\n        var ptr1 = addr.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return LW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Clear a variable number of bytes in memory.\n*/\nclass MCL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return MCL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Clear an immediate number of bytes in memory.\n*/\nclass MCLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {Imm18} count\n    */\n    constructor(addr, count) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(count, Imm18);\n        var ptr1 = count.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return MCLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*Copy a variable number of bytes in memory.\n*/\nclass MCP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcp_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MCP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy an immediate number of bytes in memory.\n*/\nclass MCPI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MCPI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mcpi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {Imm12} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, Imm12);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MCPI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Compare bytes in memory.\n*/\nclass MEQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MEQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_meq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} result\n    * @param {RegId} lhs_addr\n    * @param {RegId} rhs_addr\n    * @param {RegId} len\n    */\n    constructor(result, lhs_addr, rhs_addr, len) {\n        _assertClass(result, RegId);\n        var ptr0 = result.__destroy_into_raw();\n        _assertClass(lhs_addr, RegId);\n        var ptr1 = lhs_addr.__destroy_into_raw();\n        _assertClass(rhs_addr, RegId);\n        var ptr2 = rhs_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr3 = len.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return MEQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Mint coins of the current contract's asset ID.\n*/\nclass MINT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MINT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mint_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} amount\n    */\n    constructor(amount) {\n        _assertClass(amount, RegId);\n        var ptr0 = amount.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return MINT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide with arbitrary precision intermediate step.\n*/\nclass MLDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MLDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mldv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return MLDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*The integer logarithm of a register.\n*/\nclass MLOG {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MLOG.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mlog_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MLOG.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Modulo remainder of two registers.\n*/\nclass MOD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mod_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MOD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Modulo remainder of a register and an immediate value.\n*/\nclass MODI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MODI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_modi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MODI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Copy from one register to another.\n*/\nclass MOVE {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOVE.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_move_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} src\n    */\n    constructor(dst, src) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(src, RegId);\n        var ptr1 = src.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return MOVE.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Copy immediate value into a register\n*/\nclass MOVI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MOVI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_movi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {Imm18} val\n    */\n    constructor(dst, val) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(val, Imm18);\n        var ptr1 = val.__destroy_into_raw();\n        const ret = wasm$1.gm_new_typescript(ptr0, ptr1);\n        return MOVI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 18-bit immediate value.\n    * @returns {Imm18}\n    */\n    imm18() {\n        const ret = wasm$1.gm_imm18(this.__wbg_ptr);\n        return Imm18.__wrap(ret);\n    }\n}\n/**\n*The integer root of a register.\n*/\nclass MROO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MROO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mroo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MROO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiplies two registers.\n*/\nclass MUL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MUL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mul_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return MUL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiplies a register and an immediate value.\n*/\nclass MULI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(MULI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_muli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return MULI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n* Additional arguments for WDOP and WQOP instructions.\n*/\nclass MathArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mathargs_free(ptr);\n    }\n    /**\n    * The operation to perform\n    * @returns {number}\n    */\n    get op() {\n        const ret = wasm$1.__wbg_get_mathargs_op(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * The operation to perform\n    * @param {number} arg0\n    */\n    set op(arg0) {\n        wasm$1.__wbg_set_mathargs_op(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n* Additional arguments for WDML and WQML instructions.\n*/\nclass MulArgs {\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_mulargs_free(ptr);\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_lhs() {\n        const ret = wasm$1.__wbg_get_divargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load LHSS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_lhs(arg0) {\n        wasm$1.__wbg_set_divargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @returns {boolean}\n    */\n    get indirect_rhs() {\n        const ret = wasm$1.__wbg_get_compareargs_indirect_rhs(this.__wbg_ptr);\n        return ret !== 0;\n    }\n    /**\n    * Load RHS from register if true, otherwise zero-extend register value\n    * @param {boolean} arg0\n    */\n    set indirect_rhs(arg0) {\n        wasm$1.__wbg_set_compareargs_indirect_rhs(this.__wbg_ptr, arg0);\n    }\n}\n/**\n*Performs no operation.\n*/\nclass NOOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NOOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_noop_free(ptr);\n    }\n    /**\n    * Construct the instruction.\n    */\n    constructor() {\n        const ret = wasm$1.noop_new_typescript();\n        return NOOP.__wrap(ret);\n    }\n}\n/**\n*Bitwise NOT a register.\n*/\nclass NOT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(NOT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_not_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} arg\n    */\n    constructor(dst, arg) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(arg, RegId);\n        var ptr1 = arg.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return NOT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ORs two registers.\n*/\nclass OR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(OR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_or_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return OR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise ORs a register and an immediate value.\n*/\nclass ORI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(ORI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ori_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return ORI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n* Describe a panic reason with the instruction that generated it\n*/\nclass PanicInstruction {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(PanicInstruction.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_panicinstruction_free(ptr);\n    }\n    /**\n    * Represents an error described by a reason and an instruction.\n    * @param {number} reason\n    * @param {number} instruction\n    */\n    constructor(reason, instruction) {\n        const ret = wasm$1.panicinstruction_error_typescript(reason, instruction);\n        return PanicInstruction.__wrap(ret);\n    }\n    /**\n    * Underlying panic reason\n    * @returns {number}\n    */\n    reason() {\n        const ret = wasm$1.panicinstruction_reason(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Underlying instruction\n    * @returns {number}\n    */\n    instruction() {\n        const ret = wasm$1.panicinstruction_instruction(this.__wbg_ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*Return from context.\n*/\nclass RET {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RET.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_ret_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return RET.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Return from context with data.\n*/\nclass RETD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RETD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_retd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} len\n    */\n    constructor(addr, len) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr1 = len.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return RETD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Halt execution, reverting state changes and returning a value.\n*/\nclass RVRT {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RVRT.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_rvrt_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} value\n    */\n    constructor(value) {\n        _assertClass(value, RegId);\n        var ptr0 = value.__destroy_into_raw();\n        const ret = wasm$1.aloc_new_typescript(ptr0);\n        return RVRT.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n* Represents a 6-bit register ID, guaranteed to be masked by construction.\n*/\nclass RegId {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(RegId.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_regid_free(ptr);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * Returns `None` if the value is outside the 6-bit value range.\n    * @param {number} u\n    * @returns {RegId | undefined}\n    */\n    static new_checked(u) {\n        const ret = wasm$1.regid_new_checked(u);\n        return ret === 0 ? undefined : RegId.__wrap(ret);\n    }\n    /**\n    * Received balance for this context.\n    * @returns {RegId}\n    */\n    static bal() {\n        const ret = wasm$1.regid_bal();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas in the context.\n    * @returns {RegId}\n    */\n    static cgas() {\n        const ret = wasm$1.regid_cgas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Error codes for particular operations.\n    * @returns {RegId}\n    */\n    static err() {\n        const ret = wasm$1.regid_err();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Flags register.\n    * @returns {RegId}\n    */\n    static flag() {\n        const ret = wasm$1.regid_flag();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Frame pointer. Memory address of beginning of current call frame.\n    * @returns {RegId}\n    */\n    static fp() {\n        const ret = wasm$1.regid_fp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Remaining gas globally.\n    * @returns {RegId}\n    */\n    static ggas() {\n        const ret = wasm$1.regid_ggas();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Heap pointer. Memory address below the current bottom of the heap (points to free\n    * memory).\n    * @returns {RegId}\n    */\n    static hp() {\n        const ret = wasm$1.regid_hp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Instructions start. Pointer to the start of the currently-executing code.\n    * @returns {RegId}\n    */\n    static is() {\n        const ret = wasm$1.regid_is();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains overflow/underflow of addition, subtraction, and multiplication.\n    * @returns {RegId}\n    */\n    static of() {\n        const ret = wasm$1.regid_of();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains one (1), for convenience.\n    * @returns {RegId}\n    */\n    static one() {\n        const ret = wasm$1.regid_one();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * The program counter. Memory address of the current instruction.\n    * @returns {RegId}\n    */\n    static pc() {\n        const ret = wasm$1.regid_pc();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value or pointer.\n    * @returns {RegId}\n    */\n    static ret() {\n        const ret = wasm$1.regid_ret();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Return value length in bytes.\n    * @returns {RegId}\n    */\n    static retl() {\n        const ret = wasm$1.regid_retl();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack pointer. Memory address on top of current writable stack area (points to\n    * free memory).\n    * @returns {RegId}\n    */\n    static sp() {\n        const ret = wasm$1.regid_sp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Stack start pointer. Memory address of bottom of current writable stack area.\n    * @returns {RegId}\n    */\n    static spp() {\n        const ret = wasm$1.regid_spp();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Smallest writable register.\n    * @returns {RegId}\n    */\n    static writable() {\n        const ret = wasm$1.regid_writable();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Contains zero (0), for convenience.\n    * @returns {RegId}\n    */\n    static zero() {\n        const ret = wasm$1.regid_zero();\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Construct a register ID from the given value.\n    *\n    * The given value will be masked to 6 bits.\n    * @param {number} u\n    */\n    constructor(u) {\n        const ret = wasm$1.regid_new_typescript(u);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * A const alternative to the `Into<u8>` implementation.\n    * @returns {number}\n    */\n    to_u8() {\n        const ptr = this.__destroy_into_raw();\n        const ret = wasm$1.regid_to_u8(ptr);\n        return ret;\n    }\n}\n/**\n*The SHA-2-256 hash of a slice.\n*/\nclass S256 {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(S256.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_s256_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} src_addr\n    * @param {RegId} len\n    */\n    constructor(dst_addr, src_addr, len) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr1 = src_addr.__destroy_into_raw();\n        _assertClass(len, RegId);\n        var ptr2 = len.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return S256.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Write the least significant byte of a register to memory.\n*/\nclass SB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sb_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Clear a series of slots from contract storage.\n*/\nclass SCWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SCWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_scwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr2 = lenq.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SCWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Left shifts a register by a register.\n*/\nclass SLL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SLL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sll_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SLL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Left shifts a register by an immediate value.\n*/\nclass SLLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SLLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_slli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SLLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Send a message to recipient address with call abi, coins, and output.\n*/\nclass SMO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SMO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_smo_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} recipient_addr\n    * @param {RegId} data_addr\n    * @param {RegId} data_len\n    * @param {RegId} coins\n    */\n    constructor(recipient_addr, data_addr, data_len, coins) {\n        _assertClass(recipient_addr, RegId);\n        var ptr0 = recipient_addr.__destroy_into_raw();\n        _assertClass(data_addr, RegId);\n        var ptr1 = data_addr.__destroy_into_raw();\n        _assertClass(data_len, RegId);\n        var ptr2 = data_len.__destroy_into_raw();\n        _assertClass(coins, RegId);\n        var ptr3 = coins.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SMO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Right shifts a register by a register.\n*/\nclass SRL {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRL.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srl_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SRL.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Right shifts a register by an immediate value.\n*/\nclass SRLI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRLI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srli_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SRLI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Load a word from contract storage.\n*/\nclass SRW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    */\n    constructor(dst, status, key_addr) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SRW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Load a series of 32 byte slots from contract storage.\n*/\nclass SRWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SRWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_srwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst_addr\n    * @param {RegId} status\n    * @param {RegId} key_addr\n    * @param {RegId} lenq\n    */\n    constructor(dst_addr, status, key_addr, lenq) {\n        _assertClass(dst_addr, RegId);\n        var ptr0 = dst_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(key_addr, RegId);\n        var ptr2 = key_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SRWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Subtracts two registers.\n*/\nclass SUB {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SUB.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sub_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SUB.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Subtracts a register and an immediate value.\n*/\nclass SUBI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SUBI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_subi_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SUBI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Write a register to memory.\n*/\nclass SW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sw_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} addr\n    * @param {RegId} value\n    * @param {Imm12} offset\n    */\n    constructor(addr, value, offset) {\n        _assertClass(addr, RegId);\n        var ptr0 = addr.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr1 = value.__destroy_into_raw();\n        _assertClass(offset, Imm12);\n        var ptr2 = offset.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return SW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n/**\n*Store a word in contract storage.\n*/\nclass SWW {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SWW.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_sww_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} value\n    */\n    constructor(key_addr, status, value) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(value, RegId);\n        var ptr2 = value.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return SWW.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Store a series of 32 byte slots in contract storage.\n*/\nclass SWWQ {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(SWWQ.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_swwq_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} key_addr\n    * @param {RegId} status\n    * @param {RegId} src_addr\n    * @param {RegId} lenq\n    */\n    constructor(key_addr, status, src_addr, lenq) {\n        _assertClass(key_addr, RegId);\n        var ptr0 = key_addr.__destroy_into_raw();\n        _assertClass(status, RegId);\n        var ptr1 = status.__destroy_into_raw();\n        _assertClass(src_addr, RegId);\n        var ptr2 = src_addr.__destroy_into_raw();\n        _assertClass(lenq, RegId);\n        var ptr3 = lenq.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return SWWQ.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Get timestamp of block at given height.\n*/\nclass TIME {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TIME.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_time_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} heigth\n    */\n    constructor(dst, heigth) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(heigth, RegId);\n        var ptr1 = heigth.__destroy_into_raw();\n        const ret = wasm$1.bhsh_new_typescript(ptr0, ptr1);\n        return TIME.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Transfer coins to a contract unconditionally.\n*/\nclass TR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tr_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr1 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr2 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return TR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Transfer coins to a variable output.\n*/\nclass TRO {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(TRO.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_tro_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} contract_id_addr\n    * @param {RegId} output_index\n    * @param {RegId} amount\n    * @param {RegId} asset_id_addr\n    */\n    constructor(contract_id_addr, output_index, amount, asset_id_addr) {\n        _assertClass(contract_id_addr, RegId);\n        var ptr0 = contract_id_addr.__destroy_into_raw();\n        _assertClass(output_index, RegId);\n        var ptr1 = output_index.__destroy_into_raw();\n        _assertClass(amount, RegId);\n        var ptr2 = amount.__destroy_into_raw();\n        _assertClass(asset_id_addr, RegId);\n        var ptr3 = asset_id_addr.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return TRO.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*AddMod 128bit\n*/\nclass WDAM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDAM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdam_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDAM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compare 128bit integers\n*/\nclass WDCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDCM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdcm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WDCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDCM.__wrap(ret);\n    }\n}\n/**\n*Divide 128bit\n*/\nclass WDDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wddv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WDDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDDV.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide 128bit\n*/\nclass WDMD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDMD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDMD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiply 128bit\n*/\nclass WDML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDML.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdml_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WDML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDML.__wrap(ret);\n    }\n}\n/**\n*MulMod 128bit\n*/\nclass WDMM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDMM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdmm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDMM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Simple 128bit operations\n*/\nclass WDOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WDOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wdop_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WDOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WDOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WDOP.__wrap(ret);\n    }\n}\n/**\n*AddMod 256bit\n*/\nclass WQAM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQAM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqam_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} add_lhs\n    * @param {RegId} add_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, add_lhs, add_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(add_lhs, RegId);\n        var ptr1 = add_lhs.__destroy_into_raw();\n        _assertClass(add_rhs, RegId);\n        var ptr2 = add_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQAM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Compare 256bit integers\n*/\nclass WQCM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQCM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqcm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQCM` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {CompareArgs} args\n    * @returns {WQCM}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, CompareArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdcm_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQCM.__wrap(ret);\n    }\n}\n/**\n*Divide 256bit\n*/\nclass WQDV {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQDV.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqdv_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQDV` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {DivArgs} args\n    * @returns {WQDV}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, DivArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wddv_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQDV.__wrap(ret);\n    }\n}\n/**\n*Fused multiply-divide 256bit\n*/\nclass WQMD {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQMD.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmd_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} divisor\n    */\n    constructor(dst, mul_lhs, mul_rhs, divisor) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(divisor, RegId);\n        var ptr3 = divisor.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQMD.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Multiply 256bit\n*/\nclass WQML {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQML.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqml_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQML` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MulArgs} args\n    * @returns {WQML}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MulArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdml_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQML.__wrap(ret);\n    }\n}\n/**\n*MulMod 256bit\n*/\nclass WQMM {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQMM.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqmm_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} mul_lhs\n    * @param {RegId} mul_rhs\n    * @param {RegId} modulo\n    */\n    constructor(dst, mul_lhs, mul_rhs, modulo) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(mul_lhs, RegId);\n        var ptr1 = mul_lhs.__destroy_into_raw();\n        _assertClass(mul_rhs, RegId);\n        var ptr2 = mul_rhs.__destroy_into_raw();\n        _assertClass(modulo, RegId);\n        var ptr3 = modulo.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQMM.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register D.\n    * @returns {RegId}\n    */\n    rd() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Simple 256bit operations\n*/\nclass WQOP {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(WQOP.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_wqop_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    * @param {Imm06} flags\n    */\n    constructor(dst, lhs, rhs, flags) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        _assertClass(flags, Imm06);\n        var ptr3 = flags.__destroy_into_raw();\n        const ret = wasm$1.call_new_typescript(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 6-bit immediate value.\n    * @returns {Imm06}\n    */\n    imm06() {\n        const ret = wasm$1.call_rd(this.__wbg_ptr);\n        return Imm06.__wrap(ret);\n    }\n    /**\n    * Construct a `WQOP` instruction from its arguments.\n    * @param {RegId} ra\n    * @param {RegId} rb\n    * @param {RegId} rc\n    * @param {MathArgs} args\n    * @returns {WQOP}\n    */\n    static from_args(ra, rb, rc, args) {\n        _assertClass(ra, RegId);\n        var ptr0 = ra.__destroy_into_raw();\n        _assertClass(rb, RegId);\n        var ptr1 = rb.__destroy_into_raw();\n        _assertClass(rc, RegId);\n        var ptr2 = rc.__destroy_into_raw();\n        _assertClass(args, MathArgs);\n        var ptr3 = args.__destroy_into_raw();\n        const ret = wasm$1.wdop_from_args(ptr0, ptr1, ptr2, ptr3);\n        return WQOP.__wrap(ret);\n    }\n}\n/**\n*Bitwise XORs two registers.\n*/\nclass XOR {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(XOR.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xor_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {RegId} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, RegId);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.add_new_typescript(ptr0, ptr1, ptr2);\n        return XOR.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register C.\n    * @returns {RegId}\n    */\n    rc() {\n        const ret = wasm$1.add_rc(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n}\n/**\n*Bitwise XORs a register and an immediate value.\n*/\nclass XORI {\n\n    static __wrap(ptr) {\n        ptr = ptr >>> 0;\n        const obj = Object.create(XORI.prototype);\n        obj.__wbg_ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.__wbg_ptr;\n        this.__wbg_ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm$1.__wbg_xori_free(ptr);\n    }\n    /**\n    * Construct the instruction from its parts.\n    * @param {RegId} dst\n    * @param {RegId} lhs\n    * @param {Imm12} rhs\n    */\n    constructor(dst, lhs, rhs) {\n        _assertClass(dst, RegId);\n        var ptr0 = dst.__destroy_into_raw();\n        _assertClass(lhs, RegId);\n        var ptr1 = lhs.__destroy_into_raw();\n        _assertClass(rhs, Imm12);\n        var ptr2 = rhs.__destroy_into_raw();\n        const ret = wasm$1.addi_new_typescript(ptr0, ptr1, ptr2);\n        return XORI.__wrap(ret);\n    }\n    /**\n    * Access the ID for register A.\n    * @returns {RegId}\n    */\n    ra() {\n        const ret = wasm$1.add_ra(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the ID for register B.\n    * @returns {RegId}\n    */\n    rb() {\n        const ret = wasm$1.add_rb(this.__wbg_ptr);\n        return RegId.__wrap(ret);\n    }\n    /**\n    * Access the 12-bit immediate value.\n    * @returns {Imm12}\n    */\n    imm12() {\n        const ret = wasm$1.addi_imm12(this.__wbg_ptr);\n        return Imm12.__wrap(ret);\n    }\n}\n\nasync function __wbg_load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction __wbg_get_imports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction __wbg_finalize_init(instance, module) {\n    wasm$1 = instance.exports;\n    __wbg_init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = null;\n    cachedUint8Memory0 = null;\n\n\n    return wasm$1;\n}\n\nfunction initSync(module) {\n    if (wasm$1 !== undefined) return wasm$1;\n\n    const imports = __wbg_get_imports();\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nasync function __wbg_init(input) {\n    if (wasm$1 !== undefined) return wasm$1;\n    const imports = __wbg_get_imports();\n\n    const { instance, module } = await __wbg_load(await input, imports);\n\n    return __wbg_finalize_init(instance, module);\n}\n\nfunction _loadWasmModule (sync, filepath, src, imports) {\n  function _instantiateOrCompile(source, imports, stream) {\n    var instantiateFunc = stream ? WebAssembly.instantiateStreaming : WebAssembly.instantiate;\n    var compileFunc = stream ? WebAssembly.compileStreaming : WebAssembly.compile;\n\n    if (imports) {\n      return instantiateFunc(source, imports)\n    } else {\n      return compileFunc(source)\n    }\n  }\n\n  \nvar buf = null;\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\nif (isNode) {\n  \nbuf = Buffer.from(src, 'base64');\n\n} else {\n  \nvar raw = globalThis.atob(src);\nvar rawLength = raw.length;\nbuf = new Uint8Array(new ArrayBuffer(rawLength));\nfor(var i = 0; i < rawLength; i++) {\n   buf[i] = raw.charCodeAt(i);\n}\n\n}\n\n\n  if(sync) {\n    var mod = new WebAssembly.Module(buf);\n    return imports ? new WebAssembly.Instance(mod, imports) : mod\n  } else {\n    return _instantiateOrCompile(buf, imports, false)\n  }\n}\n\nfunction wasm(imports){return _loadWasmModule(0, null, '', imports)}\n\n__wbg_init(wasm());\n\nexport { ADD, ADDI, ALOC, AND, ANDI, BAL, BHEI, BHSH, BURN, CALL, CB, CCP, CFE, CFEI, CFS, CFSI, CROO, CSIZ, CompareArgs, CompareMode, DIV, DIVI, DivArgs, ECK1, ECR1, ED19, EQ, EXP, EXPI, FLAG, GM, GMArgs, GT, GTF, GTFArgs, Imm06, Imm12, Imm18, Imm24, Instruction, JI, JMP, JMPB, JMPF, JNE, JNEB, JNEF, JNEI, JNZB, JNZF, JNZI, K256, LB, LDC, LOG, LOGD, LT, LW, MCL, MCLI, MCP, MCPI, MEQ, MINT, MLDV, MLOG, MOD, MODI, MOVE, MOVI, MROO, MUL, MULI, MathArgs, MathOp, MulArgs, NOOP, NOT, OR, ORI, PanicInstruction, PanicReason, RET, RETD, RVRT, RegId, S256, SB, SCWQ, SLL, SLLI, SMO, SRL, SRLI, SRW, SRWQ, SUB, SUBI, SW, SWW, SWWQ, TIME, TR, TRO, WDAM, WDCM, WDDV, WDMD, WDML, WDMM, WDOP, WQAM, WQCM, WQDV, WQMD, WQML, WQMM, WQOP, XOR, XORI, add, addi, aloc, and, andi, bal, bhei, bhsh, burn, call, cb, ccp, cfe, cfei, cfs, cfsi, croo, csiz, div, divi, eck1, ecr1, ed19, eq, exp, expi, flag, gm, gm_args, gt, gtf, gtf_args, initSync, ji, jmp, jmpb, jmpf, jne, jneb, jnef, jnei, jnzb, jnzf, jnzi, k256, lb, ldc, log, logd, lt, lw, mcl, mcli, mcp, mcpi, meq, mint, mldv, mlog, mod_, modi, move_, movi, mroo, mul, muli, noop, not, or, ori, ret, retd, rvrt, s256, sb, scwq, sll, slli, smo, srl, srli, srw, srwq, sub, subi, sw, sww, swwq, time, tr, tro, wdam, wdcm, wdcm_args, wddv, wddv_args, wdmd, wdml, wdml_args, wdmm, wdop, wdop_args, wqam, wqcm, wqcm_args, wqdv, wqdv_args, wqmd, wqml, wqml_args, wqmm, wqop, wqop_args, xor, xori };\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function defineReadOnly<T, K extends keyof T>(object: T, name: K, value: T[K]): void {\n    Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false,\n    });\n}\n\n// Crawl up the constructor chain to find a static method\nexport function getStatic<T>(ctor: any, key: string): T {\n    for (let i = 0; i < 32; i++) {\n        if (ctor[key]) { return ctor[key]; }\n        if (!ctor.prototype || typeof(ctor.prototype) !== \"object\") { break; }\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n    }\n    return null;\n}\n\nexport type Deferrable<T> = {\n    [ K in keyof T ]: T[K] | Promise<T[K]>;\n}\n\n\ntype Result = { key: string, value: any};\n\nexport async function resolveProperties<T>(object: Readonly<Deferrable<T>>): Promise<T> {\n    const promises: Array<Promise<Result>> = Object.keys(object).map((key) => {\n        const value = object[<keyof Deferrable<T>>key];\n        return Promise.resolve(value).then((v) => ({ key: key, value: v }));\n    });\n\n    const results = await Promise.all(promises);\n\n    return results.reduce((accum, result) => {\n        accum[<keyof T>(result.key)] = result.value;\n        return accum;\n    }, <T>{ });\n}\n\nexport function checkProperties(object: any, properties: { [ name: string ]: boolean }): void {\n    if (!object || typeof(object) !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n    }\n\n    Object.keys(object).forEach((key) => {\n        if (!properties[key]) {\n            logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n    });\n}\n\nexport function shallowCopy<T>(object: T): T {\n    const result: any = {};\n    for (const key in object) { result[key] = object[key]; }\n    return result;\n}\n\nconst opaque: { [key: string]: boolean } = { bigint: true, boolean: true, \"function\": true, number: true, string: true };\n\nfunction _isFrozen(object: any): boolean {\n\n    // Opaque objects are not mutable, so safe to copy by assignment\n    if (object === undefined || object === null || opaque[typeof(object)]) { return true; }\n\n    if (Array.isArray(object) || typeof(object) === \"object\") {\n        if (!Object.isFrozen(object)) { return false; }\n\n        const keys = Object.keys(object);\n        for (let i = 0; i < keys.length; i++) {\n            let value: any = null;\n            try {\n                value = object[keys[i]];\n            } catch (error) {\n                // If accessing a value triggers an error, it is a getter\n                // designed to do so (e.g. Result) and is therefore \"frozen\"\n                continue;\n            }\n\n            if (!_isFrozen(value)) { return false; }\n        }\n\n        return true;\n    }\n\n    return logger.throwArgumentError(`Cannot deepCopy ${ typeof(object) }`, \"object\", object);\n}\n\n// Returns a new copy of object, such that no properties may be replaced.\n// New properties may be added only to objects.\nfunction _deepCopy(object: any): any {\n\n    if (_isFrozen(object)) { return object; }\n\n    // Arrays are mutable, so we need to create a copy\n    if (Array.isArray(object)) {\n        return Object.freeze(object.map((item) => deepCopy(item)));\n    }\n\n    if (typeof(object) === \"object\") {\n        const result: { [ key: string ]: any } = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value === undefined) { continue; }\n            defineReadOnly(result, key, deepCopy(value));\n        }\n\n        return result;\n    }\n\n    return logger.throwArgumentError(`Cannot deepCopy ${ typeof(object) }`, \"object\", object);\n}\n\nexport function deepCopy<T>(object: T): T {\n    return _deepCopy(object);\n}\n\nexport class Description<T = any> {\n    constructor(info: { [ K in keyof T ]: T[K] }) {\n        for (const key in info) {\n            (<any>this)[key] = deepCopy(info[key]);\n        }\n    }\n}\n","export const version = \"properties/5.7.0\";\n","/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nexport class BaseX {\n    readonly alphabet: string;\n    readonly base: number;\n\n    _alphabetMap: { [ character: string ]: number };\n    _leader: string;\n\n    constructor(alphabet: string) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n\n        defineReadOnly(this, \"_alphabetMap\", { });\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n\n    encode(value: BytesLike): string {\n        let source = arrayify(value);\n\n        if (source.length === 0) { return \"\"; }\n\n        let digits = [ 0 ]\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n\n        let string = \"\"\n\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n\n        return string;\n    }\n\n    decode(value: string): Uint8Array {\n        if (typeof(value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n\n        let bytes: Array<number> = [];\n        if (value.length === 0) { return new Uint8Array(bytes); }\n\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0)\n        }\n\n        return arrayify(new Uint8Array(bytes.reverse()))\n    }\n}\n\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\nexport { Base32, Base58 };\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n","export const english = [\n  'abandon',\n  'ability',\n  'able',\n  'about',\n  'above',\n  'absent',\n  'absorb',\n  'abstract',\n  'absurd',\n  'abuse',\n  'access',\n  'accident',\n  'account',\n  'accuse',\n  'achieve',\n  'acid',\n  'acoustic',\n  'acquire',\n  'across',\n  'act',\n  'action',\n  'actor',\n  'actress',\n  'actual',\n  'adapt',\n  'add',\n  'addict',\n  'address',\n  'adjust',\n  'admit',\n  'adult',\n  'advance',\n  'advice',\n  'aerobic',\n  'affair',\n  'afford',\n  'afraid',\n  'again',\n  'age',\n  'agent',\n  'agree',\n  'ahead',\n  'aim',\n  'air',\n  'airport',\n  'aisle',\n  'alarm',\n  'album',\n  'alcohol',\n  'alert',\n  'alien',\n  'all',\n  'alley',\n  'allow',\n  'almost',\n  'alone',\n  'alpha',\n  'already',\n  'also',\n  'alter',\n  'always',\n  'amateur',\n  'amazing',\n  'among',\n  'amount',\n  'amused',\n  'analyst',\n  'anchor',\n  'ancient',\n  'anger',\n  'angle',\n  'angry',\n  'animal',\n  'ankle',\n  'announce',\n  'annual',\n  'another',\n  'answer',\n  'antenna',\n  'antique',\n  'anxiety',\n  'any',\n  'apart',\n  'apology',\n  'appear',\n  'apple',\n  'approve',\n  'april',\n  'arch',\n  'arctic',\n  'area',\n  'arena',\n  'argue',\n  'arm',\n  'armed',\n  'armor',\n  'army',\n  'around',\n  'arrange',\n  'arrest',\n  'arrive',\n  'arrow',\n  'art',\n  'artefact',\n  'artist',\n  'artwork',\n  'ask',\n  'aspect',\n  'assault',\n  'asset',\n  'assist',\n  'assume',\n  'asthma',\n  'athlete',\n  'atom',\n  'attack',\n  'attend',\n  'attitude',\n  'attract',\n  'auction',\n  'audit',\n  'august',\n  'aunt',\n  'author',\n  'auto',\n  'autumn',\n  'average',\n  'avocado',\n  'avoid',\n  'awake',\n  'aware',\n  'away',\n  'awesome',\n  'awful',\n  'awkward',\n  'axis',\n  'baby',\n  'bachelor',\n  'bacon',\n  'badge',\n  'bag',\n  'balance',\n  'balcony',\n  'ball',\n  'bamboo',\n  'banana',\n  'banner',\n  'bar',\n  'barely',\n  'bargain',\n  'barrel',\n  'base',\n  'basic',\n  'basket',\n  'battle',\n  'beach',\n  'bean',\n  'beauty',\n  'because',\n  'become',\n  'beef',\n  'before',\n  'begin',\n  'behave',\n  'behind',\n  'believe',\n  'below',\n  'belt',\n  'bench',\n  'benefit',\n  'best',\n  'betray',\n  'better',\n  'between',\n  'beyond',\n  'bicycle',\n  'bid',\n  'bike',\n  'bind',\n  'biology',\n  'bird',\n  'birth',\n  'bitter',\n  'black',\n  'blade',\n  'blame',\n  'blanket',\n  'blast',\n  'bleak',\n  'bless',\n  'blind',\n  'blood',\n  'blossom',\n  'blouse',\n  'blue',\n  'blur',\n  'blush',\n  'board',\n  'boat',\n  'body',\n  'boil',\n  'bomb',\n  'bone',\n  'bonus',\n  'book',\n  'boost',\n  'border',\n  'boring',\n  'borrow',\n  'boss',\n  'bottom',\n  'bounce',\n  'box',\n  'boy',\n  'bracket',\n  'brain',\n  'brand',\n  'brass',\n  'brave',\n  'bread',\n  'breeze',\n  'brick',\n  'bridge',\n  'brief',\n  'bright',\n  'bring',\n  'brisk',\n  'broccoli',\n  'broken',\n  'bronze',\n  'broom',\n  'brother',\n  'brown',\n  'brush',\n  'bubble',\n  'buddy',\n  'budget',\n  'buffalo',\n  'build',\n  'bulb',\n  'bulk',\n  'bullet',\n  'bundle',\n  'bunker',\n  'burden',\n  'burger',\n  'burst',\n  'bus',\n  'business',\n  'busy',\n  'butter',\n  'buyer',\n  'buzz',\n  'cabbage',\n  'cabin',\n  'cable',\n  'cactus',\n  'cage',\n  'cake',\n  'call',\n  'calm',\n  'camera',\n  'camp',\n  'can',\n  'canal',\n  'cancel',\n  'candy',\n  'cannon',\n  'canoe',\n  'canvas',\n  'canyon',\n  'capable',\n  'capital',\n  'captain',\n  'car',\n  'carbon',\n  'card',\n  'cargo',\n  'carpet',\n  'carry',\n  'cart',\n  'case',\n  'cash',\n  'casino',\n  'castle',\n  'casual',\n  'cat',\n  'catalog',\n  'catch',\n  'category',\n  'cattle',\n  'caught',\n  'cause',\n  'caution',\n  'cave',\n  'ceiling',\n  'celery',\n  'cement',\n  'census',\n  'century',\n  'cereal',\n  'certain',\n  'chair',\n  'chalk',\n  'champion',\n  'change',\n  'chaos',\n  'chapter',\n  'charge',\n  'chase',\n  'chat',\n  'cheap',\n  'check',\n  'cheese',\n  'chef',\n  'cherry',\n  'chest',\n  'chicken',\n  'chief',\n  'child',\n  'chimney',\n  'choice',\n  'choose',\n  'chronic',\n  'chuckle',\n  'chunk',\n  'churn',\n  'cigar',\n  'cinnamon',\n  'circle',\n  'citizen',\n  'city',\n  'civil',\n  'claim',\n  'clap',\n  'clarify',\n  'claw',\n  'clay',\n  'clean',\n  'clerk',\n  'clever',\n  'click',\n  'client',\n  'cliff',\n  'climb',\n  'clinic',\n  'clip',\n  'clock',\n  'clog',\n  'close',\n  'cloth',\n  'cloud',\n  'clown',\n  'club',\n  'clump',\n  'cluster',\n  'clutch',\n  'coach',\n  'coast',\n  'coconut',\n  'code',\n  'coffee',\n  'coil',\n  'coin',\n  'collect',\n  'color',\n  'column',\n  'combine',\n  'come',\n  'comfort',\n  'comic',\n  'common',\n  'company',\n  'concert',\n  'conduct',\n  'confirm',\n  'congress',\n  'connect',\n  'consider',\n  'control',\n  'convince',\n  'cook',\n  'cool',\n  'copper',\n  'copy',\n  'coral',\n  'core',\n  'corn',\n  'correct',\n  'cost',\n  'cotton',\n  'couch',\n  'country',\n  'couple',\n  'course',\n  'cousin',\n  'cover',\n  'coyote',\n  'crack',\n  'cradle',\n  'craft',\n  'cram',\n  'crane',\n  'crash',\n  'crater',\n  'crawl',\n  'crazy',\n  'cream',\n  'credit',\n  'creek',\n  'crew',\n  'cricket',\n  'crime',\n  'crisp',\n  'critic',\n  'crop',\n  'cross',\n  'crouch',\n  'crowd',\n  'crucial',\n  'cruel',\n  'cruise',\n  'crumble',\n  'crunch',\n  'crush',\n  'cry',\n  'crystal',\n  'cube',\n  'culture',\n  'cup',\n  'cupboard',\n  'curious',\n  'current',\n  'curtain',\n  'curve',\n  'cushion',\n  'custom',\n  'cute',\n  'cycle',\n  'dad',\n  'damage',\n  'damp',\n  'dance',\n  'danger',\n  'daring',\n  'dash',\n  'daughter',\n  'dawn',\n  'day',\n  'deal',\n  'debate',\n  'debris',\n  'decade',\n  'december',\n  'decide',\n  'decline',\n  'decorate',\n  'decrease',\n  'deer',\n  'defense',\n  'define',\n  'defy',\n  'degree',\n  'delay',\n  'deliver',\n  'demand',\n  'demise',\n  'denial',\n  'dentist',\n  'deny',\n  'depart',\n  'depend',\n  'deposit',\n  'depth',\n  'deputy',\n  'derive',\n  'describe',\n  'desert',\n  'design',\n  'desk',\n  'despair',\n  'destroy',\n  'detail',\n  'detect',\n  'develop',\n  'device',\n  'devote',\n  'diagram',\n  'dial',\n  'diamond',\n  'diary',\n  'dice',\n  'diesel',\n  'diet',\n  'differ',\n  'digital',\n  'dignity',\n  'dilemma',\n  'dinner',\n  'dinosaur',\n  'direct',\n  'dirt',\n  'disagree',\n  'discover',\n  'disease',\n  'dish',\n  'dismiss',\n  'disorder',\n  'display',\n  'distance',\n  'divert',\n  'divide',\n  'divorce',\n  'dizzy',\n  'doctor',\n  'document',\n  'dog',\n  'doll',\n  'dolphin',\n  'domain',\n  'donate',\n  'donkey',\n  'donor',\n  'door',\n  'dose',\n  'double',\n  'dove',\n  'draft',\n  'dragon',\n  'drama',\n  'drastic',\n  'draw',\n  'dream',\n  'dress',\n  'drift',\n  'drill',\n  'drink',\n  'drip',\n  'drive',\n  'drop',\n  'drum',\n  'dry',\n  'duck',\n  'dumb',\n  'dune',\n  'during',\n  'dust',\n  'dutch',\n  'duty',\n  'dwarf',\n  'dynamic',\n  'eager',\n  'eagle',\n  'early',\n  'earn',\n  'earth',\n  'easily',\n  'east',\n  'easy',\n  'echo',\n  'ecology',\n  'economy',\n  'edge',\n  'edit',\n  'educate',\n  'effort',\n  'egg',\n  'eight',\n  'either',\n  'elbow',\n  'elder',\n  'electric',\n  'elegant',\n  'element',\n  'elephant',\n  'elevator',\n  'elite',\n  'else',\n  'embark',\n  'embody',\n  'embrace',\n  'emerge',\n  'emotion',\n  'employ',\n  'empower',\n  'empty',\n  'enable',\n  'enact',\n  'end',\n  'endless',\n  'endorse',\n  'enemy',\n  'energy',\n  'enforce',\n  'engage',\n  'engine',\n  'enhance',\n  'enjoy',\n  'enlist',\n  'enough',\n  'enrich',\n  'enroll',\n  'ensure',\n  'enter',\n  'entire',\n  'entry',\n  'envelope',\n  'episode',\n  'equal',\n  'equip',\n  'era',\n  'erase',\n  'erode',\n  'erosion',\n  'error',\n  'erupt',\n  'escape',\n  'essay',\n  'essence',\n  'estate',\n  'eternal',\n  'ethics',\n  'evidence',\n  'evil',\n  'evoke',\n  'evolve',\n  'exact',\n  'example',\n  'excess',\n  'exchange',\n  'excite',\n  'exclude',\n  'excuse',\n  'execute',\n  'exercise',\n  'exhaust',\n  'exhibit',\n  'exile',\n  'exist',\n  'exit',\n  'exotic',\n  'expand',\n  'expect',\n  'expire',\n  'explain',\n  'expose',\n  'express',\n  'extend',\n  'extra',\n  'eye',\n  'eyebrow',\n  'fabric',\n  'face',\n  'faculty',\n  'fade',\n  'faint',\n  'faith',\n  'fall',\n  'false',\n  'fame',\n  'family',\n  'famous',\n  'fan',\n  'fancy',\n  'fantasy',\n  'farm',\n  'fashion',\n  'fat',\n  'fatal',\n  'father',\n  'fatigue',\n  'fault',\n  'favorite',\n  'feature',\n  'february',\n  'federal',\n  'fee',\n  'feed',\n  'feel',\n  'female',\n  'fence',\n  'festival',\n  'fetch',\n  'fever',\n  'few',\n  'fiber',\n  'fiction',\n  'field',\n  'figure',\n  'file',\n  'film',\n  'filter',\n  'final',\n  'find',\n  'fine',\n  'finger',\n  'finish',\n  'fire',\n  'firm',\n  'first',\n  'fiscal',\n  'fish',\n  'fit',\n  'fitness',\n  'fix',\n  'flag',\n  'flame',\n  'flash',\n  'flat',\n  'flavor',\n  'flee',\n  'flight',\n  'flip',\n  'float',\n  'flock',\n  'floor',\n  'flower',\n  'fluid',\n  'flush',\n  'fly',\n  'foam',\n  'focus',\n  'fog',\n  'foil',\n  'fold',\n  'follow',\n  'food',\n  'foot',\n  'force',\n  'forest',\n  'forget',\n  'fork',\n  'fortune',\n  'forum',\n  'forward',\n  'fossil',\n  'foster',\n  'found',\n  'fox',\n  'fragile',\n  'frame',\n  'frequent',\n  'fresh',\n  'friend',\n  'fringe',\n  'frog',\n  'front',\n  'frost',\n  'frown',\n  'frozen',\n  'fruit',\n  'fuel',\n  'fun',\n  'funny',\n  'furnace',\n  'fury',\n  'future',\n  'gadget',\n  'gain',\n  'galaxy',\n  'gallery',\n  'game',\n  'gap',\n  'garage',\n  'garbage',\n  'garden',\n  'garlic',\n  'garment',\n  'gas',\n  'gasp',\n  'gate',\n  'gather',\n  'gauge',\n  'gaze',\n  'general',\n  'genius',\n  'genre',\n  'gentle',\n  'genuine',\n  'gesture',\n  'ghost',\n  'giant',\n  'gift',\n  'giggle',\n  'ginger',\n  'giraffe',\n  'girl',\n  'give',\n  'glad',\n  'glance',\n  'glare',\n  'glass',\n  'glide',\n  'glimpse',\n  'globe',\n  'gloom',\n  'glory',\n  'glove',\n  'glow',\n  'glue',\n  'goat',\n  'goddess',\n  'gold',\n  'good',\n  'goose',\n  'gorilla',\n  'gospel',\n  'gossip',\n  'govern',\n  'gown',\n  'grab',\n  'grace',\n  'grain',\n  'grant',\n  'grape',\n  'grass',\n  'gravity',\n  'great',\n  'green',\n  'grid',\n  'grief',\n  'grit',\n  'grocery',\n  'group',\n  'grow',\n  'grunt',\n  'guard',\n  'guess',\n  'guide',\n  'guilt',\n  'guitar',\n  'gun',\n  'gym',\n  'habit',\n  'hair',\n  'half',\n  'hammer',\n  'hamster',\n  'hand',\n  'happy',\n  'harbor',\n  'hard',\n  'harsh',\n  'harvest',\n  'hat',\n  'have',\n  'hawk',\n  'hazard',\n  'head',\n  'health',\n  'heart',\n  'heavy',\n  'hedgehog',\n  'height',\n  'hello',\n  'helmet',\n  'help',\n  'hen',\n  'hero',\n  'hidden',\n  'high',\n  'hill',\n  'hint',\n  'hip',\n  'hire',\n  'history',\n  'hobby',\n  'hockey',\n  'hold',\n  'hole',\n  'holiday',\n  'hollow',\n  'home',\n  'honey',\n  'hood',\n  'hope',\n  'horn',\n  'horror',\n  'horse',\n  'hospital',\n  'host',\n  'hotel',\n  'hour',\n  'hover',\n  'hub',\n  'huge',\n  'human',\n  'humble',\n  'humor',\n  'hundred',\n  'hungry',\n  'hunt',\n  'hurdle',\n  'hurry',\n  'hurt',\n  'husband',\n  'hybrid',\n  'ice',\n  'icon',\n  'idea',\n  'identify',\n  'idle',\n  'ignore',\n  'ill',\n  'illegal',\n  'illness',\n  'image',\n  'imitate',\n  'immense',\n  'immune',\n  'impact',\n  'impose',\n  'improve',\n  'impulse',\n  'inch',\n  'include',\n  'income',\n  'increase',\n  'index',\n  'indicate',\n  'indoor',\n  'industry',\n  'infant',\n  'inflict',\n  'inform',\n  'inhale',\n  'inherit',\n  'initial',\n  'inject',\n  'injury',\n  'inmate',\n  'inner',\n  'innocent',\n  'input',\n  'inquiry',\n  'insane',\n  'insect',\n  'inside',\n  'inspire',\n  'install',\n  'intact',\n  'interest',\n  'into',\n  'invest',\n  'invite',\n  'involve',\n  'iron',\n  'island',\n  'isolate',\n  'issue',\n  'item',\n  'ivory',\n  'jacket',\n  'jaguar',\n  'jar',\n  'jazz',\n  'jealous',\n  'jeans',\n  'jelly',\n  'jewel',\n  'job',\n  'join',\n  'joke',\n  'journey',\n  'joy',\n  'judge',\n  'juice',\n  'jump',\n  'jungle',\n  'junior',\n  'junk',\n  'just',\n  'kangaroo',\n  'keen',\n  'keep',\n  'ketchup',\n  'key',\n  'kick',\n  'kid',\n  'kidney',\n  'kind',\n  'kingdom',\n  'kiss',\n  'kit',\n  'kitchen',\n  'kite',\n  'kitten',\n  'kiwi',\n  'knee',\n  'knife',\n  'knock',\n  'know',\n  'lab',\n  'label',\n  'labor',\n  'ladder',\n  'lady',\n  'lake',\n  'lamp',\n  'language',\n  'laptop',\n  'large',\n  'later',\n  'latin',\n  'laugh',\n  'laundry',\n  'lava',\n  'law',\n  'lawn',\n  'lawsuit',\n  'layer',\n  'lazy',\n  'leader',\n  'leaf',\n  'learn',\n  'leave',\n  'lecture',\n  'left',\n  'leg',\n  'legal',\n  'legend',\n  'leisure',\n  'lemon',\n  'lend',\n  'length',\n  'lens',\n  'leopard',\n  'lesson',\n  'letter',\n  'level',\n  'liar',\n  'liberty',\n  'library',\n  'license',\n  'life',\n  'lift',\n  'light',\n  'like',\n  'limb',\n  'limit',\n  'link',\n  'lion',\n  'liquid',\n  'list',\n  'little',\n  'live',\n  'lizard',\n  'load',\n  'loan',\n  'lobster',\n  'local',\n  'lock',\n  'logic',\n  'lonely',\n  'long',\n  'loop',\n  'lottery',\n  'loud',\n  'lounge',\n  'love',\n  'loyal',\n  'lucky',\n  'luggage',\n  'lumber',\n  'lunar',\n  'lunch',\n  'luxury',\n  'lyrics',\n  'machine',\n  'mad',\n  'magic',\n  'magnet',\n  'maid',\n  'mail',\n  'main',\n  'major',\n  'make',\n  'mammal',\n  'man',\n  'manage',\n  'mandate',\n  'mango',\n  'mansion',\n  'manual',\n  'maple',\n  'marble',\n  'march',\n  'margin',\n  'marine',\n  'market',\n  'marriage',\n  'mask',\n  'mass',\n  'master',\n  'match',\n  'material',\n  'math',\n  'matrix',\n  'matter',\n  'maximum',\n  'maze',\n  'meadow',\n  'mean',\n  'measure',\n  'meat',\n  'mechanic',\n  'medal',\n  'media',\n  'melody',\n  'melt',\n  'member',\n  'memory',\n  'mention',\n  'menu',\n  'mercy',\n  'merge',\n  'merit',\n  'merry',\n  'mesh',\n  'message',\n  'metal',\n  'method',\n  'middle',\n  'midnight',\n  'milk',\n  'million',\n  'mimic',\n  'mind',\n  'minimum',\n  'minor',\n  'minute',\n  'miracle',\n  'mirror',\n  'misery',\n  'miss',\n  'mistake',\n  'mix',\n  'mixed',\n  'mixture',\n  'mobile',\n  'model',\n  'modify',\n  'mom',\n  'moment',\n  'monitor',\n  'monkey',\n  'monster',\n  'month',\n  'moon',\n  'moral',\n  'more',\n  'morning',\n  'mosquito',\n  'mother',\n  'motion',\n  'motor',\n  'mountain',\n  'mouse',\n  'move',\n  'movie',\n  'much',\n  'muffin',\n  'mule',\n  'multiply',\n  'muscle',\n  'museum',\n  'mushroom',\n  'music',\n  'must',\n  'mutual',\n  'myself',\n  'mystery',\n  'myth',\n  'naive',\n  'name',\n  'napkin',\n  'narrow',\n  'nasty',\n  'nation',\n  'nature',\n  'near',\n  'neck',\n  'need',\n  'negative',\n  'neglect',\n  'neither',\n  'nephew',\n  'nerve',\n  'nest',\n  'net',\n  'network',\n  'neutral',\n  'never',\n  'news',\n  'next',\n  'nice',\n  'night',\n  'noble',\n  'noise',\n  'nominee',\n  'noodle',\n  'normal',\n  'north',\n  'nose',\n  'notable',\n  'note',\n  'nothing',\n  'notice',\n  'novel',\n  'now',\n  'nuclear',\n  'number',\n  'nurse',\n  'nut',\n  'oak',\n  'obey',\n  'object',\n  'oblige',\n  'obscure',\n  'observe',\n  'obtain',\n  'obvious',\n  'occur',\n  'ocean',\n  'october',\n  'odor',\n  'off',\n  'offer',\n  'office',\n  'often',\n  'oil',\n  'okay',\n  'old',\n  'olive',\n  'olympic',\n  'omit',\n  'once',\n  'one',\n  'onion',\n  'online',\n  'only',\n  'open',\n  'opera',\n  'opinion',\n  'oppose',\n  'option',\n  'orange',\n  'orbit',\n  'orchard',\n  'order',\n  'ordinary',\n  'organ',\n  'orient',\n  'original',\n  'orphan',\n  'ostrich',\n  'other',\n  'outdoor',\n  'outer',\n  'output',\n  'outside',\n  'oval',\n  'oven',\n  'over',\n  'own',\n  'owner',\n  'oxygen',\n  'oyster',\n  'ozone',\n  'pact',\n  'paddle',\n  'page',\n  'pair',\n  'palace',\n  'palm',\n  'panda',\n  'panel',\n  'panic',\n  'panther',\n  'paper',\n  'parade',\n  'parent',\n  'park',\n  'parrot',\n  'party',\n  'pass',\n  'patch',\n  'path',\n  'patient',\n  'patrol',\n  'pattern',\n  'pause',\n  'pave',\n  'payment',\n  'peace',\n  'peanut',\n  'pear',\n  'peasant',\n  'pelican',\n  'pen',\n  'penalty',\n  'pencil',\n  'people',\n  'pepper',\n  'perfect',\n  'permit',\n  'person',\n  'pet',\n  'phone',\n  'photo',\n  'phrase',\n  'physical',\n  'piano',\n  'picnic',\n  'picture',\n  'piece',\n  'pig',\n  'pigeon',\n  'pill',\n  'pilot',\n  'pink',\n  'pioneer',\n  'pipe',\n  'pistol',\n  'pitch',\n  'pizza',\n  'place',\n  'planet',\n  'plastic',\n  'plate',\n  'play',\n  'please',\n  'pledge',\n  'pluck',\n  'plug',\n  'plunge',\n  'poem',\n  'poet',\n  'point',\n  'polar',\n  'pole',\n  'police',\n  'pond',\n  'pony',\n  'pool',\n  'popular',\n  'portion',\n  'position',\n  'possible',\n  'post',\n  'potato',\n  'pottery',\n  'poverty',\n  'powder',\n  'power',\n  'practice',\n  'praise',\n  'predict',\n  'prefer',\n  'prepare',\n  'present',\n  'pretty',\n  'prevent',\n  'price',\n  'pride',\n  'primary',\n  'print',\n  'priority',\n  'prison',\n  'private',\n  'prize',\n  'problem',\n  'process',\n  'produce',\n  'profit',\n  'program',\n  'project',\n  'promote',\n  'proof',\n  'property',\n  'prosper',\n  'protect',\n  'proud',\n  'provide',\n  'public',\n  'pudding',\n  'pull',\n  'pulp',\n  'pulse',\n  'pumpkin',\n  'punch',\n  'pupil',\n  'puppy',\n  'purchase',\n  'purity',\n  'purpose',\n  'purse',\n  'push',\n  'put',\n  'puzzle',\n  'pyramid',\n  'quality',\n  'quantum',\n  'quarter',\n  'question',\n  'quick',\n  'quit',\n  'quiz',\n  'quote',\n  'rabbit',\n  'raccoon',\n  'race',\n  'rack',\n  'radar',\n  'radio',\n  'rail',\n  'rain',\n  'raise',\n  'rally',\n  'ramp',\n  'ranch',\n  'random',\n  'range',\n  'rapid',\n  'rare',\n  'rate',\n  'rather',\n  'raven',\n  'raw',\n  'razor',\n  'ready',\n  'real',\n  'reason',\n  'rebel',\n  'rebuild',\n  'recall',\n  'receive',\n  'recipe',\n  'record',\n  'recycle',\n  'reduce',\n  'reflect',\n  'reform',\n  'refuse',\n  'region',\n  'regret',\n  'regular',\n  'reject',\n  'relax',\n  'release',\n  'relief',\n  'rely',\n  'remain',\n  'remember',\n  'remind',\n  'remove',\n  'render',\n  'renew',\n  'rent',\n  'reopen',\n  'repair',\n  'repeat',\n  'replace',\n  'report',\n  'require',\n  'rescue',\n  'resemble',\n  'resist',\n  'resource',\n  'response',\n  'result',\n  'retire',\n  'retreat',\n  'return',\n  'reunion',\n  'reveal',\n  'review',\n  'reward',\n  'rhythm',\n  'rib',\n  'ribbon',\n  'rice',\n  'rich',\n  'ride',\n  'ridge',\n  'rifle',\n  'right',\n  'rigid',\n  'ring',\n  'riot',\n  'ripple',\n  'risk',\n  'ritual',\n  'rival',\n  'river',\n  'road',\n  'roast',\n  'robot',\n  'robust',\n  'rocket',\n  'romance',\n  'roof',\n  'rookie',\n  'room',\n  'rose',\n  'rotate',\n  'rough',\n  'round',\n  'route',\n  'royal',\n  'rubber',\n  'rude',\n  'rug',\n  'rule',\n  'run',\n  'runway',\n  'rural',\n  'sad',\n  'saddle',\n  'sadness',\n  'safe',\n  'sail',\n  'salad',\n  'salmon',\n  'salon',\n  'salt',\n  'salute',\n  'same',\n  'sample',\n  'sand',\n  'satisfy',\n  'satoshi',\n  'sauce',\n  'sausage',\n  'save',\n  'say',\n  'scale',\n  'scan',\n  'scare',\n  'scatter',\n  'scene',\n  'scheme',\n  'school',\n  'science',\n  'scissors',\n  'scorpion',\n  'scout',\n  'scrap',\n  'screen',\n  'script',\n  'scrub',\n  'sea',\n  'search',\n  'season',\n  'seat',\n  'second',\n  'secret',\n  'section',\n  'security',\n  'seed',\n  'seek',\n  'segment',\n  'select',\n  'sell',\n  'seminar',\n  'senior',\n  'sense',\n  'sentence',\n  'series',\n  'service',\n  'session',\n  'settle',\n  'setup',\n  'seven',\n  'shadow',\n  'shaft',\n  'shallow',\n  'share',\n  'shed',\n  'shell',\n  'sheriff',\n  'shield',\n  'shift',\n  'shine',\n  'ship',\n  'shiver',\n  'shock',\n  'shoe',\n  'shoot',\n  'shop',\n  'short',\n  'shoulder',\n  'shove',\n  'shrimp',\n  'shrug',\n  'shuffle',\n  'shy',\n  'sibling',\n  'sick',\n  'side',\n  'siege',\n  'sight',\n  'sign',\n  'silent',\n  'silk',\n  'silly',\n  'silver',\n  'similar',\n  'simple',\n  'since',\n  'sing',\n  'siren',\n  'sister',\n  'situate',\n  'six',\n  'size',\n  'skate',\n  'sketch',\n  'ski',\n  'skill',\n  'skin',\n  'skirt',\n  'skull',\n  'slab',\n  'slam',\n  'sleep',\n  'slender',\n  'slice',\n  'slide',\n  'slight',\n  'slim',\n  'slogan',\n  'slot',\n  'slow',\n  'slush',\n  'small',\n  'smart',\n  'smile',\n  'smoke',\n  'smooth',\n  'snack',\n  'snake',\n  'snap',\n  'sniff',\n  'snow',\n  'soap',\n  'soccer',\n  'social',\n  'sock',\n  'soda',\n  'soft',\n  'solar',\n  'soldier',\n  'solid',\n  'solution',\n  'solve',\n  'someone',\n  'song',\n  'soon',\n  'sorry',\n  'sort',\n  'soul',\n  'sound',\n  'soup',\n  'source',\n  'south',\n  'space',\n  'spare',\n  'spatial',\n  'spawn',\n  'speak',\n  'special',\n  'speed',\n  'spell',\n  'spend',\n  'sphere',\n  'spice',\n  'spider',\n  'spike',\n  'spin',\n  'spirit',\n  'split',\n  'spoil',\n  'sponsor',\n  'spoon',\n  'sport',\n  'spot',\n  'spray',\n  'spread',\n  'spring',\n  'spy',\n  'square',\n  'squeeze',\n  'squirrel',\n  'stable',\n  'stadium',\n  'staff',\n  'stage',\n  'stairs',\n  'stamp',\n  'stand',\n  'start',\n  'state',\n  'stay',\n  'steak',\n  'steel',\n  'stem',\n  'step',\n  'stereo',\n  'stick',\n  'still',\n  'sting',\n  'stock',\n  'stomach',\n  'stone',\n  'stool',\n  'story',\n  'stove',\n  'strategy',\n  'street',\n  'strike',\n  'strong',\n  'struggle',\n  'student',\n  'stuff',\n  'stumble',\n  'style',\n  'subject',\n  'submit',\n  'subway',\n  'success',\n  'such',\n  'sudden',\n  'suffer',\n  'sugar',\n  'suggest',\n  'suit',\n  'summer',\n  'sun',\n  'sunny',\n  'sunset',\n  'super',\n  'supply',\n  'supreme',\n  'sure',\n  'surface',\n  'surge',\n  'surprise',\n  'surround',\n  'survey',\n  'suspect',\n  'sustain',\n  'swallow',\n  'swamp',\n  'swap',\n  'swarm',\n  'swear',\n  'sweet',\n  'swift',\n  'swim',\n  'swing',\n  'switch',\n  'sword',\n  'symbol',\n  'symptom',\n  'syrup',\n  'system',\n  'table',\n  'tackle',\n  'tag',\n  'tail',\n  'talent',\n  'talk',\n  'tank',\n  'tape',\n  'target',\n  'task',\n  'taste',\n  'tattoo',\n  'taxi',\n  'teach',\n  'team',\n  'tell',\n  'ten',\n  'tenant',\n  'tennis',\n  'tent',\n  'term',\n  'test',\n  'text',\n  'thank',\n  'that',\n  'theme',\n  'then',\n  'theory',\n  'there',\n  'they',\n  'thing',\n  'this',\n  'thought',\n  'three',\n  'thrive',\n  'throw',\n  'thumb',\n  'thunder',\n  'ticket',\n  'tide',\n  'tiger',\n  'tilt',\n  'timber',\n  'time',\n  'tiny',\n  'tip',\n  'tired',\n  'tissue',\n  'title',\n  'toast',\n  'tobacco',\n  'today',\n  'toddler',\n  'toe',\n  'together',\n  'toilet',\n  'token',\n  'tomato',\n  'tomorrow',\n  'tone',\n  'tongue',\n  'tonight',\n  'tool',\n  'tooth',\n  'top',\n  'topic',\n  'topple',\n  'torch',\n  'tornado',\n  'tortoise',\n  'toss',\n  'total',\n  'tourist',\n  'toward',\n  'tower',\n  'town',\n  'toy',\n  'track',\n  'trade',\n  'traffic',\n  'tragic',\n  'train',\n  'transfer',\n  'trap',\n  'trash',\n  'travel',\n  'tray',\n  'treat',\n  'tree',\n  'trend',\n  'trial',\n  'tribe',\n  'trick',\n  'trigger',\n  'trim',\n  'trip',\n  'trophy',\n  'trouble',\n  'truck',\n  'true',\n  'truly',\n  'trumpet',\n  'trust',\n  'truth',\n  'try',\n  'tube',\n  'tuition',\n  'tumble',\n  'tuna',\n  'tunnel',\n  'turkey',\n  'turn',\n  'turtle',\n  'twelve',\n  'twenty',\n  'twice',\n  'twin',\n  'twist',\n  'two',\n  'type',\n  'typical',\n  'ugly',\n  'umbrella',\n  'unable',\n  'unaware',\n  'uncle',\n  'uncover',\n  'under',\n  'undo',\n  'unfair',\n  'unfold',\n  'unhappy',\n  'uniform',\n  'unique',\n  'unit',\n  'universe',\n  'unknown',\n  'unlock',\n  'until',\n  'unusual',\n  'unveil',\n  'update',\n  'upgrade',\n  'uphold',\n  'upon',\n  'upper',\n  'upset',\n  'urban',\n  'urge',\n  'usage',\n  'use',\n  'used',\n  'useful',\n  'useless',\n  'usual',\n  'utility',\n  'vacant',\n  'vacuum',\n  'vague',\n  'valid',\n  'valley',\n  'valve',\n  'van',\n  'vanish',\n  'vapor',\n  'various',\n  'vast',\n  'vault',\n  'vehicle',\n  'velvet',\n  'vendor',\n  'venture',\n  'venue',\n  'verb',\n  'verify',\n  'version',\n  'very',\n  'vessel',\n  'veteran',\n  'viable',\n  'vibrant',\n  'vicious',\n  'victory',\n  'video',\n  'view',\n  'village',\n  'vintage',\n  'violin',\n  'virtual',\n  'virus',\n  'visa',\n  'visit',\n  'visual',\n  'vital',\n  'vivid',\n  'vocal',\n  'voice',\n  'void',\n  'volcano',\n  'volume',\n  'vote',\n  'voyage',\n  'wage',\n  'wagon',\n  'wait',\n  'walk',\n  'wall',\n  'walnut',\n  'want',\n  'warfare',\n  'warm',\n  'warrior',\n  'wash',\n  'wasp',\n  'waste',\n  'water',\n  'wave',\n  'way',\n  'wealth',\n  'weapon',\n  'wear',\n  'weasel',\n  'weather',\n  'web',\n  'wedding',\n  'weekend',\n  'weird',\n  'welcome',\n  'west',\n  'wet',\n  'whale',\n  'what',\n  'wheat',\n  'wheel',\n  'when',\n  'where',\n  'whip',\n  'whisper',\n  'wide',\n  'width',\n  'wife',\n  'wild',\n  'will',\n  'win',\n  'window',\n  'wine',\n  'wing',\n  'wink',\n  'winner',\n  'winter',\n  'wire',\n  'wisdom',\n  'wise',\n  'wish',\n  'witness',\n  'wolf',\n  'woman',\n  'wonder',\n  'wood',\n  'wool',\n  'word',\n  'work',\n  'world',\n  'worry',\n  'worth',\n  'wrap',\n  'wreck',\n  'wrestle',\n  'wrist',\n  'write',\n  'wrong',\n  'yard',\n  'year',\n  'yellow',\n  'you',\n  'young',\n  'youth',\n  'zebra',\n  'zero',\n  'zone',\n  'zoo',\n];\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { sha256 } from '@ethersproject/sha2';\n\n/* Mnemonic phrase composed by words from the provided wordlist it can be a text or a array of words */\nexport type MnemonicPhrase = string | Array<string>;\n\nexport function toUtf8Bytes(stri: string): Uint8Array {\n  const str = stri.normalize('NFKD');\n\n  const result = [];\n  for (let i = 0; i < str.length; i += 1) {\n    const c = str.charCodeAt(i);\n\n    if (c < 0x80) {\n      result.push(c);\n    } else if (c < 0x800) {\n      result.push((c >> 6) | 0xc0);\n      result.push((c & 0x3f) | 0x80);\n    } else if ((c & 0xfc00) === 0xd800) {\n      i += 1;\n      const c2 = str.charCodeAt(i);\n\n      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n        throw new Error('invalid utf-8 string');\n      }\n\n      // Surrogate Pair\n      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n      result.push((pair >> 18) | 0xf0);\n      result.push(((pair >> 12) & 0x3f) | 0x80);\n      result.push(((pair >> 6) & 0x3f) | 0x80);\n      result.push((pair & 0x3f) | 0x80);\n    } else {\n      result.push((c >> 12) | 0xe0);\n      result.push(((c >> 6) & 0x3f) | 0x80);\n      result.push((c & 0x3f) | 0x80);\n    }\n  }\n\n  return arrayify(result);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n  return (1 << bits) - 1;\n}\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n  return ((1 << bits) - 1) << (8 - bits);\n}\n\nexport function getWords(mnemonic: MnemonicPhrase): Array<string> {\n  if (!Array.isArray(mnemonic)) {\n    return mnemonic.split(/\\s+/);\n  }\n  return mnemonic;\n}\n\nexport function getPhrase(mnemonic: MnemonicPhrase): string {\n  if (Array.isArray(mnemonic)) {\n    return mnemonic.join(' ');\n  }\n  return mnemonic;\n}\n\nexport function entropyToMnemonicIndices(entropy: Uint8Array): Array<number> {\n  const indices: Array<number> = [0];\n\n  let remainingBits = 11;\n  for (let i = 0; i < entropy.length; i += 1) {\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n\n      remainingBits -= 8;\n      // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n      // Start the next word\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n      remainingBits += 3;\n    }\n  }\n\n  // Compute the checksum bits\n  const checksumBits = entropy.length / 4;\n  const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n  // Shift the checksum into the word indices\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> (8 - checksumBits);\n\n  return indices;\n}\n\nexport function mnemonicWordsToEntropy(words: Array<string>, wordlist: Array<string>): BytesLike {\n  const size = Math.ceil((11 * words.length) / 8);\n  const entropy = arrayify(new Uint8Array(size));\n\n  let offset = 0;\n  for (let i = 0; i < words.length; i += 1) {\n    const index = wordlist.indexOf(words[i].normalize('NFKD'));\n    if (index === -1) {\n      throw new Error('invalid mnemonic');\n    }\n\n    for (let bit = 0; bit < 11; bit += 1) {\n      if (index & (1 << (10 - bit))) {\n        entropy[offset >> 3] |= 1 << (7 - (offset % 8));\n      }\n      offset += 1;\n    }\n  }\n  const entropyBits = (32 * words.length) / 3;\n  const checksumBits = words.length / 3;\n  const checksumMask = getUpperMask(checksumBits);\n  const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error('invalid checksum');\n  }\n\n  return entropy.slice(0, entropyBits / 8);\n}\n","import { Base58 } from '@ethersproject/basex';\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { hexDataSlice, concat, hexlify, arrayify } from '@ethersproject/bytes';\nimport { pbkdf2 } from '@ethersproject/pbkdf2';\nimport { computeHmac, sha256, SupportedAlgorithm } from '@ethersproject/sha2';\nimport { randomBytes } from '@fuel-ts/crypto';\nimport { english } from '@fuel-ts/wordlists';\n\nimport type { MnemonicPhrase } from './utils';\nimport {\n  entropyToMnemonicIndices,\n  getWords,\n  getPhrase,\n  mnemonicWordsToEntropy,\n  toUtf8Bytes,\n} from './utils';\n\n//\n// Constants\n//\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes('Bitcoin seed');\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = 0x0488ade4;\nconst TestnetPRV = 0x04358394;\nexport const MNEMONIC_SIZES = [12, 15, 18, 21, 24];\n\nfunction assertWordList(wordlist: Array<string>) {\n  if (wordlist.length !== 2048) {\n    throw new Error('Invalid word list length');\n  }\n}\n\nfunction assertEntropy(entropy: BytesLike) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error('invalid entropy');\n  }\n}\n\nfunction assertMnemonic(words: Array<string>) {\n  if (!MNEMONIC_SIZES.includes(words.length)) {\n    throw new Error('invalid mnemonic size');\n  }\n}\n\nclass Mnemonic {\n  wordlist: Array<string>;\n\n  /**\n   *\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic instance\n   */\n  constructor(wordlist: Array<string> = english) {\n    this.wordlist = wordlist;\n\n    assertWordList(this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns Entropy hash\n   */\n  mnemonicToEntropy(phrase: MnemonicPhrase) {\n    return Mnemonic.mnemonicToEntropy(phrase, this.wordlist);\n  }\n\n  /**\n   *\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @returns Mnemonic phrase\n   */\n  entropyToMnemonic(entropy: BytesLike) {\n    return Mnemonic.entropyToMnemonic(entropy, this.wordlist);\n  }\n\n  /**\n   *\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param wordlist - Provide a wordlist with the list of words used to generate the mnemonic phrase. The default value is the English list.\n   * @returns Mnemonic phrase\n   */\n  static mnemonicToEntropy(phrase: MnemonicPhrase, wordlist: Array<string> = english): string {\n    const words = getWords(phrase);\n\n    assertMnemonic(words);\n\n    return hexlify(mnemonicWordsToEntropy(words, wordlist));\n  }\n\n  /**\n   * @param entropy - Entropy source to the mnemonic phrase.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static entropyToMnemonic(entropy: BytesLike, wordlist: Array<string> = english): string {\n    const entropyBytes = arrayify(entropy, {\n      allowMissingPrefix: true,\n    });\n\n    assertWordList(wordlist);\n    assertEntropy(entropyBytes);\n\n    return entropyToMnemonicIndices(entropyBytes)\n      .map((i) => wordlist[i])\n      .join(' ');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToSeed(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    assertMnemonic(getWords(phrase));\n\n    const phraseBytes = toUtf8Bytes(getPhrase(phrase));\n    const salt = toUtf8Bytes(`mnemonic${passphrase}`);\n\n    return pbkdf2(phraseBytes, salt, 2048, 64, 'sha512');\n  }\n\n  /**\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @param passphrase - Add additional security to protect the generated seed with a memorized passphrase. `Note: if the owner forgot the passphrase, all wallets and accounts derive from the phrase will be lost.`\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static mnemonicToMasterKeys(phrase: MnemonicPhrase, passphrase: BytesLike = '') {\n    const seed = Mnemonic.mnemonicToSeed(phrase, passphrase);\n    return Mnemonic.masterKeysFromSeed(seed);\n  }\n\n  /**\n   * Validates if given mnemonic is  valid\n   * @param phrase - Mnemonic phrase composed by words from the provided wordlist\n   * @returns true if phrase is a valid mnemonic\n   */\n  static isMnemonicValid(phrase: string) {\n    const words = getWords(phrase);\n\n    let i: number = 0;\n\n    try {\n      assertMnemonic(words);\n    } catch {\n      return false;\n    }\n\n    while (i < words.length) {\n      if (Mnemonic.binarySearch(words[i]) === false) return false;\n      i += 1;\n    }\n\n    return true;\n  }\n\n  static binarySearch(target: string): boolean {\n    const words = english;\n    let left: number = 0;\n    let right: number = words.length - 1;\n\n    while (left <= right) {\n      const mid: number = Math.floor((left + right) / 2);\n\n      if (words[mid] === target) return true;\n      if (target < words[mid]) right = mid - 1;\n      else left = mid + 1;\n    }\n\n    return false;\n  }\n\n  /**\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, the default value is true (`mainnet`).\n   * @returns 64-byte array contains privateKey and chainCode as described on BIP39\n   */\n  static masterKeysFromSeed(seed: string): Uint8Array {\n    const seedArray = arrayify(seed);\n\n    if (seedArray.length < 16 || seedArray.length > 64) {\n      throw new Error('invalid seed');\n    }\n\n    return arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param seed - BIP39 seed\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  static seedToExtendedKey(seed: string, testnet: boolean = false): string {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n    const prefix = arrayify(testnet ? TestnetPRV : MainnetPRV);\n    const depth = '0x00';\n    const fingerprint = '0x00000000';\n    const index = '0x00000000';\n    // last 32 bites from the key\n    const chainCode = masterKey.slice(32);\n    // first 32 bites from the key\n    const privateKey = masterKey.slice(0, 32);\n    const extendedKey = concat([\n      prefix,\n      depth,\n      fingerprint,\n      index,\n      chainCode,\n      concat(['0x00', privateKey]),\n    ]);\n    const checksum = hexDataSlice(sha256(sha256(extendedKey)), 0, 4);\n\n    return Base58.encode(concat([extendedKey, checksum]));\n  }\n\n  /**\n   *  Create a new mnemonic using a randomly generated number as entropy.\n   *  As defined in BIP39, the entropy must be a multiple of 32 bits, and its size must be between 128 and 256 bits.\n   *  Therefore, the possible values for `strength` are 128, 160, 192, 224, and 256.\n   *  If not provided, the default entropy length will be set to 256 bits.\n   *  The return is a list of words that encodes the generated entropy.\n   *\n   *\n   * @param size - Number of bytes used as an entropy\n   * @param extraEntropy - Optional extra entropy to increase randomness\n   * @returns A randomly generated mnemonic\n   */\n  static generate(size: number = 32, extraEntropy: BytesLike = '') {\n    const entropy = extraEntropy\n      ? sha256(concat([randomBytes(size), arrayify(extraEntropy)]))\n      : randomBytes(size);\n    return Mnemonic.entropyToMnemonic(entropy);\n  }\n}\n\nexport default Mnemonic;\n","import { Base58 } from '@ethersproject/basex';\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { hexDataSlice, hexlify, concat, arrayify } from '@ethersproject/bytes';\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from '@ethersproject/sha2';\nimport { bn, toBytes, toHex } from '@fuel-ts/math';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport { Signer } from '@fuel-ts/signer';\n\n// \"Bitcoin seed\"\nconst HARDENED_INDEX = 0x80000000;\n\n// 4 byte: version bytes (mainnet: 0x0488B21E public, 0x0488ADE4 private; testnet: 0x043587CF public, 0x04358394 private)\nconst MainnetPRV = hexlify('0x0488ade4');\nconst MainnetPUB = hexlify('0x0488b21e');\nconst TestnetPRV = hexlify('0x04358394');\nconst TestnetPUB = hexlify('0x043587cf');\n\nfunction base58check(data: Uint8Array): string {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getExtendedKeyPrefix(isPublic: boolean = false, testnet: boolean = false) {\n  if (isPublic) {\n    return testnet ? TestnetPUB : MainnetPUB;\n  }\n  return testnet ? TestnetPRV : MainnetPRV;\n}\n\nfunction isPublicExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPUB, TestnetPUB].includes(hexlify(extendedKey.slice(0, 4)));\n}\n\nfunction isValidExtendedKey(extendedKey: Uint8Array) {\n  return [MainnetPRV, TestnetPRV, MainnetPUB, TestnetPUB].includes(\n    hexlify(extendedKey.slice(0, 4))\n  );\n}\n\nfunction parsePath(path: string, depth: number = 0) {\n  const components = path.split('/');\n\n  if (components.length === 0 || (components[0] === 'm' && depth !== 0)) {\n    throw new Error(`invalid path - ${path}`);\n  }\n\n  if (components[0] === 'm') {\n    components.shift();\n  }\n\n  return components.map((p) =>\n    ~p.indexOf(`'`) ? parseInt(p, 10) + HARDENED_INDEX : parseInt(p, 10)\n  );\n}\n\ntype HDWalletConfig = {\n  privateKey?: BytesLike;\n  publicKey?: BytesLike;\n  chainCode: BytesLike;\n  depth?: number;\n  index?: number;\n  parentFingerprint?: string;\n};\n\nclass HDWallet {\n  depth: number = 0;\n  index: number = 0;\n  fingerprint: string = hexlify('0x00000000');\n  parentFingerprint: string = hexlify('0x00000000');\n  privateKey?: string;\n  publicKey: string;\n  chainCode: BytesLike;\n\n  /**\n   * HDWallet is a implementation of the BIP-0044 and BIP-0032, Multi-Account Hierarchy for Deterministic Wallets\n   *\n   * @param config - Wallet configurations\n   */\n  constructor(config: HDWalletConfig) {\n    // TODO: set some asserts here\n\n    if (config.privateKey) {\n      const signer = new Signer(config.privateKey);\n      this.publicKey = hexlify(signer.compressedPublicKey);\n      this.privateKey = hexlify(config.privateKey);\n    } else {\n      if (!config.publicKey) {\n        throw new Error('Public and Private Key are missing!');\n      }\n      this.publicKey = hexlify(config.publicKey);\n    }\n\n    this.parentFingerprint = config.parentFingerprint || this.parentFingerprint;\n    this.fingerprint = hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4);\n    this.depth = config.depth || this.depth;\n    this.index = config.index || this.index;\n    this.chainCode = config.chainCode;\n  }\n\n  get extendedKey() {\n    return this.toExtendedKey();\n  }\n\n  /**\n   * Derive the current HDWallet instance navigating only on the index.\n   * `Ex.: m/44'/0 -> Ex.: m/44'/1 -> m/44'/2`. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param index - Index of the child HDWallet.\n   * @returns A new instance of HDWallet on the derived index\n   */\n  deriveIndex(index: number) {\n    const privateKey = this.privateKey && arrayify(this.privateKey);\n    const publicKey = arrayify(this.publicKey);\n    const chainCode = arrayify(this.chainCode);\n    const data = new Uint8Array(37);\n\n    if (index & HARDENED_INDEX) {\n      if (!privateKey) {\n        throw new Error('Derive hardened requires privateKey');\n      }\n\n      // 33 bytes: 0x00 || private key\n      data.set(privateKey, 1);\n    } else {\n      data.set(arrayify(this.publicKey));\n    }\n\n    // child number: ser32(i)\n    data.set(toBytes(index, 4), 33);\n\n    const bytes = arrayify(computeHmac(SupportedAlgorithm.sha512, chainCode, data));\n    const IL = bytes.slice(0, 32);\n    const IR = bytes.slice(32);\n\n    if (privateKey) {\n      const N = '0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141';\n      // Child key ki is parse256(IL) + kpar (mod n).\n      const ki = bn(IL).add(privateKey).mod(N).toBytes(32);\n\n      return new HDWallet({\n        privateKey: ki,\n        chainCode: IR,\n        index,\n        depth: this.depth + 1,\n        parentFingerprint: this.fingerprint,\n      });\n    }\n\n    const signer = new Signer(hexlify(IL));\n    const Ki = signer.addPoint(publicKey);\n\n    return new HDWallet({\n      publicKey: Ki,\n      chainCode: IR,\n      index,\n      depth: this.depth + 1,\n      parentFingerprint: this.fingerprint,\n    });\n  }\n\n  /**\n   * Derive the current HDWallet instance to the path. [Learn more](https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki)\n   *\n   * @param path - The string representation of the child HDWallet. `Ex.: m/44'/0'/0'/0/0`\n   * @returns A new instance of HDWallet on the derived path\n   */\n  derivePath(path: string) {\n    const paths = parsePath(path, this.depth);\n\n    return paths.reduce((hdwallet, index) => hdwallet.deriveIndex(index), <HDWallet>this);\n  }\n\n  /**\n   * Get the extendKey as defined on BIP-32 from the provided seed\n   *\n   * @param isPublic - enable to export public extendedKey, it not required when HDWallet didn't have the privateKey.\n   * @param testnet - Inform if should use testnet or mainnet prefix, default value is true (`mainnet`).\n   * @returns BIP-32 extended private key\n   */\n  toExtendedKey(isPublic: boolean = false, testnet: boolean = false): string {\n    if (this.depth >= 256) {\n      throw new Error('Depth too large!');\n    }\n    const prefix = getExtendedKeyPrefix(this.privateKey == null || isPublic, testnet);\n    const depth = hexlify(this.depth);\n    const parentFingerprint = this.parentFingerprint;\n    const index = toHex(this.index, 4);\n    // last 32 bites from the key\n    const chainCode = this.chainCode;\n    // first 32 bites from the key\n    const key =\n      this.privateKey != null && !isPublic ? concat(['0x00', this.privateKey]) : this.publicKey;\n    const extendedKey = concat([prefix, depth, parentFingerprint, index, chainCode, key]);\n\n    return base58check(extendedKey);\n  }\n\n  /**\n   * Create HDWallet instance from seed\n   *\n   * @param seed - Seed\n   * @returns A new instance of HDWallet\n   */\n  static fromSeed(seed: string) {\n    const masterKey = Mnemonic.masterKeysFromSeed(seed);\n\n    return new HDWallet({\n      chainCode: arrayify(masterKey.slice(32)),\n      privateKey: arrayify(masterKey.slice(0, 32)),\n    });\n  }\n\n  static fromExtendedKey(extendedKey: string) {\n    const bytes = Base58.decode(extendedKey);\n    const validChecksum = base58check(bytes.slice(0, 78)) === extendedKey;\n\n    if (bytes.length !== 82 || !isValidExtendedKey(bytes)) {\n      throw new Error('Invalid extended key');\n    }\n    if (!validChecksum) throw new Error('Invalid checksum key');\n\n    const depth = bytes[4];\n    const parentFingerprint = hexlify(bytes.slice(5, 9));\n    const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n    const chainCode = hexlify(bytes.slice(13, 45));\n    const key = bytes.slice(45, 78);\n\n    if ((depth === 0 && parentFingerprint !== '0x00000000') || (depth === 0 && index !== 0)) {\n      throw new Error('Invalid depth');\n    }\n\n    if (isPublicExtendedKey(bytes)) {\n      if (key[0] !== 3) {\n        throw new Error('Invalid public extended key');\n      }\n\n      return new HDWallet({\n        publicKey: key,\n        chainCode,\n        index,\n        depth,\n        parentFingerprint,\n      });\n    }\n\n    if (key[0] !== 0) {\n      throw new Error('Invalid private extended key');\n    }\n\n    return new HDWallet({\n      privateKey: key.slice(1),\n      chainCode,\n      index,\n      depth,\n      parentFingerprint,\n    });\n  }\n}\n\nexport default HDWallet;\n","export const FUEL_NETWORK_URL = 'http://127.0.0.1:4000/graphql';\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { NumberCoder } from '@fuel-ts/abi-coder';\nimport type { B256Address } from '@fuel-ts/interfaces';\nimport { BN, type BigNumberish } from '@fuel-ts/math';\nimport * as asm from '@fuels/vm-asm';\n\nexport const composeScriptForTransferringToContract = () => {\n  // implementation extracted from Rust SDK at:\n  // https://github.com/FuelLabs/fuels-rs/blob/master/packages/fuels-core/src/types/transaction_builders.rs#L240-L272\n  // This script loads:\n  //  - a pointer to the contract id,\n  //  - the actual amount\n  //  - a pointer to the asset id\n  // into the registers 0x10, 0x12, 0x13\n  // and calls the TR instruction\n\n  // const gtf = fuelAsm.gtf(0x10, 0x00, 0xc);\n  const gtf = asm.gtf(0x10, 0x00, asm.GTFArgs.ScriptData);\n  const addi = asm.addi(0x11, 0x10, 0x20);\n  const lw = asm.lw(0x12, 0x11, 0x0);\n  const addi2 = asm.addi(0x13, 0x11, 0x8);\n  const tr = asm.tr(0x10, 0x12, 0x13);\n  const ret = asm.ret(0x1);\n\n  const script = Uint8Array.from([\n    ...gtf.to_bytes(),\n    ...addi.to_bytes(),\n    ...lw.to_bytes(),\n    ...addi2.to_bytes(),\n    ...tr.to_bytes(),\n    ...ret.to_bytes(),\n  ]);\n\n  return script;\n};\n\nexport const formatScriptDataForTransferringToContract = (\n  hexelifiedContractId: B256Address,\n  amountToTransfer: BigNumberish,\n  assetId: BytesLike\n) => {\n  const numberCoder = new NumberCoder('u16');\n\n  const encoded = numberCoder.encode(new BN(amountToTransfer).toNumber());\n\n  const scriptData = Uint8Array.from([\n    ...arrayify(hexelifiedContractId),\n    ...encoded,\n    ...arrayify(assetId),\n  ]);\n\n  return scriptData;\n};\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify, hexlify } from '@ethersproject/bytes';\nimport { Address } from '@fuel-ts/address';\nimport { BaseAssetId } from '@fuel-ts/address/configs';\nimport { AbstractAccount } from '@fuel-ts/interfaces';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { BigNumberish, BN } from '@fuel-ts/math';\nimport { bn } from '@fuel-ts/math';\nimport type {\n  TransactionRequestLike,\n  CallResult,\n  TransactionRequest,\n  Coin,\n  CoinQuantityLike,\n  CoinQuantity,\n  Message,\n  Resource,\n  ExcludeResourcesOption,\n  TransactionResponse,\n} from '@fuel-ts/providers';\nimport {\n  withdrawScript,\n  ScriptTransactionRequest,\n  Provider,\n  transactionRequestify,\n} from '@fuel-ts/providers';\nimport { MAX_GAS_PER_TX } from '@fuel-ts/transactions/configs';\n\nimport { FUEL_NETWORK_URL } from './configs';\nimport {\n  composeScriptForTransferringToContract,\n  formatScriptDataForTransferringToContract,\n} from './utils';\n\ntype TxParamsType = Pick<TransactionRequestLike, 'gasLimit' | 'gasPrice' | 'maturity'>;\n\n/**\n * `Account` provides an abstraction for interacting with accounts or wallets on the network.\n */\nexport class Account extends AbstractAccount {\n  /**\n   * The address associated with the account.\n   */\n  readonly address: AbstractAddress;\n\n  /**\n   * The provider used to interact with the network.\n   */\n  provider: Provider;\n\n  /**\n   * Creates a new Account instance.\n   *\n   * @param address - The address of the account.\n   * @param provider - The provider URL or a Provider instance.\n   */\n  constructor(address: string | AbstractAddress, provider: string | Provider = FUEL_NETWORK_URL) {\n    super();\n    this.provider = this.connect(provider);\n    this.address = Address.fromDynamicInput(address);\n  }\n\n  /**\n   * Changes the provider connection for the account.\n   *\n   * @param provider - The provider URL or a Provider instance.\n   * @returns The updated Provider instance.\n   */\n  connect(provider: string | Provider): Provider {\n    if (typeof provider === 'string') {\n      if (this.provider) {\n        this.provider.connect(provider);\n      } else {\n        this.provider = new Provider(provider);\n      }\n    } else {\n      this.provider = provider;\n    }\n    return this.provider;\n  }\n\n  /**\n   * Retrieves resources satisfying the spend query for the account.\n   *\n   * @param quantities - IDs of coins to exclude.\n   * @param excludedIds - IDs of resources to be excluded from the query.\n   * @returns A promise that resolves to an array of Resources.\n   */\n  async getResourcesToSpend(\n    quantities: CoinQuantityLike[] /** IDs of coins to exclude */,\n    excludedIds?: ExcludeResourcesOption\n  ): Promise<Resource[]> {\n    return this.provider.getResourcesToSpend(this.address, quantities, excludedIds);\n  }\n\n  /**\n   * Retrieves coins owned by the account.\n   *\n   * @param assetId - The asset ID of the coins to retrieve.\n   * @returns A promise that resolves to an array of Coins.\n   */\n  async getCoins(assetId?: BytesLike): Promise<Coin[]> {\n    const coins = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageCoins = await this.provider.getCoins(this.address, assetId, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      coins.push(...pageCoins);\n\n      const hasNextPage = pageCoins.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} coins are not yet supported`);\n    }\n\n    return coins;\n  }\n\n  /**\n   * Retrieves messages owned by the account.\n   *\n   * @returns A promise that resolves to an array of Messages.\n   */\n  async getMessages(): Promise<Message[]> {\n    const messages = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageMessages = await this.provider.getMessages(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      messages.push(...pageMessages);\n\n      const hasNextPage = pageMessages.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} messages are not yet supported`);\n    }\n\n    return messages;\n  }\n\n  /**\n   * Retrieves the balance of the account for the given asset.\n   *\n   * @param assetId - The asset ID to check the balance for.\n   * @returns A promise that resolves to the balance amount.\n   */\n  async getBalance(assetId: BytesLike = BaseAssetId): Promise<BN> {\n    const amount = await this.provider.getBalance(this.address, assetId);\n    return amount;\n  }\n\n  /**\n   * Retrieves all the balances for the account.\n   *\n   * @returns A promise that resolves to an array of Coins and their quantities.\n   */\n  async getBalances(): Promise<CoinQuantity[]> {\n    const balances = [];\n\n    const pageSize = 9999;\n    let cursor;\n    // eslint-disable-next-line no-unreachable-loop\n    for (;;) {\n      const pageBalances = await this.provider.getBalances(this.address, {\n        first: pageSize,\n        after: cursor,\n      });\n\n      balances.push(...pageBalances);\n\n      const hasNextPage = pageBalances.length >= pageSize;\n      if (!hasNextPage) {\n        break;\n      }\n\n      // TODO: implement pagination\n      throw new Error(`Wallets with more than ${pageSize} balances are not yet supported`);\n    }\n\n    return balances;\n  }\n\n  /**\n   * Adds resources to the transaction enough to fund it.\n   *\n   * @param request - The transaction request.\n   * @returns A promise that resolves when the resources are added to the transaction.\n   */\n  async fund<T extends TransactionRequest>(request: T): Promise<void> {\n    const fee = request.calculateFee();\n    const resources = await this.getResourcesToSpend([fee]);\n\n    request.addResourceInputsAndOutputs(resources);\n  }\n\n  /**\n   * Transfers coins to a destination address.\n   *\n   * @param destination - The address of the destination.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer.\n   * @param txParams - The transaction parameters (gasLimit, gasPrice, maturity).\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transfer(\n    /** Address of the destination */\n    destination: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const params: TxParamsType = { gasLimit: MAX_GAS_PER_TX, ...txParams };\n\n    const request = new ScriptTransactionRequest(params);\n    request.addCoinOutput(destination, amount, assetId);\n    const fee = request.calculateFee();\n    let quantities: CoinQuantityLike[] = [];\n\n    if (fee.assetId === hexlify(assetId)) {\n      fee.amount = fee.amount.add(amount);\n      quantities = [fee];\n    } else {\n      quantities = [[amount, assetId], fee];\n    }\n\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResourceInputsAndOutputs(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Transfers coins to a contract address.\n   *\n   * @param contractId - The address of the contract.\n   * @param amount - The amount of coins to transfer.\n   * @param assetId - The asset ID of the coins to transfer.\n   * @param txParams - The optional transaction parameters.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async transferToContract(\n    /** Contract address */\n    contractId: AbstractAddress,\n    /** Amount of coins */\n    amount: BigNumberish,\n    /** Asset ID of coins */\n    assetId: BytesLike = BaseAssetId,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    const script = composeScriptForTransferringToContract();\n\n    const scriptData = formatScriptDataForTransferringToContract(\n      contractId.toB256(),\n      amount,\n      assetId\n    );\n\n    const request = new ScriptTransactionRequest({\n      gasLimit: MAX_GAS_PER_TX,\n      ...txParams,\n      script,\n      scriptData,\n    });\n\n    request.addContractInputAndOutput(contractId);\n\n    const fee = request.calculateFee();\n\n    let quantities: CoinQuantityLike[] = [];\n\n    if (fee.assetId === hexlify(assetId)) {\n      fee.amount = fee.amount.add(amount);\n      quantities = [fee];\n    } else {\n      quantities = [[amount, assetId], fee];\n    }\n\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResourceInputsAndOutputs(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Withdraws an amount of the base asset to the base chain.\n   *\n   * @param recipient - Address of the recipient on the base chain.\n   * @param amount - Amount of base asset.\n   * @param txParams - The optional transaction parameters.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async withdrawToBaseLayer(\n    /** Address of the recipient on the base chain */\n    recipient: AbstractAddress,\n    /** Amount of base asset */\n    amount: BigNumberish,\n    /** Tx Params */\n    txParams: TxParamsType = {}\n  ): Promise<TransactionResponse> {\n    // add recipient and amount to the transaction script code\n    const recipientDataArray = arrayify(\n      '0x'.concat(recipient.toHexString().substring(2).padStart(64, '0'))\n    );\n    const amountDataArray = arrayify(\n      '0x'.concat(bn(amount).toHex().substring(2).padStart(16, '0'))\n    );\n    const script = new Uint8Array([\n      ...arrayify(withdrawScript.bytes),\n      ...recipientDataArray,\n      ...amountDataArray,\n    ]);\n\n    // build the transaction\n    const params = { script, gasLimit: MAX_GAS_PER_TX, ...txParams };\n    const request = new ScriptTransactionRequest(params);\n    const fee = request.calculateFee();\n    let quantities: CoinQuantityLike[] = [];\n    fee.amount = fee.amount.add(amount);\n    quantities = [fee];\n    const resources = await this.getResourcesToSpend(quantities);\n    request.addResourceInputsAndOutputs(resources);\n\n    return this.sendTransaction(request);\n  }\n\n  /**\n   * Sends a transaction to the network.\n   *\n   * @param transactionRequestLike - The transaction request to be sent.\n   * @returns A promise that resolves to the transaction response.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Simulates a transaction.\n   *\n   * @param transactionRequestLike - The transaction request to be simulated.\n   * @returns A promise that resolves to the call result.\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.simulate(transactionRequest);\n  }\n}\n","import { hexlify } from '@ethersproject/bytes';\nimport {\n  bufferFromString,\n  keccak256,\n  randomBytes,\n  scrypt,\n  stringFromBuffer,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n} from '@fuel-ts/crypto';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport type KeystoreWallet = {\n  id: string;\n  version: number;\n  address: string;\n  crypto: KeystoreCrypto;\n};\n\ntype KeystoreCrypto = {\n  cipher: 'aes-128-ctr';\n  cipherparams: { iv: string };\n  ciphertext: string;\n  kdf: 'scrypt';\n  mac: string;\n  kdfparams: KDFParams;\n};\n\ntype KDFParams = {\n  dklen: number;\n  n: number;\n  p: number;\n  r: number;\n  salt: string;\n};\n\n// Same values used in the Rust SDK\nexport const DEFAULT_KDF_PARAMS_LOG_N = 13;\nexport const DEFAULT_KDF_PARAMS_R = 8;\nexport const DEFAULT_KDF_PARAMS_P = 1;\nexport const DEFAULT_KEY_SIZE = 32;\nexport const DEFAULT_IV_SIZE = 16;\n\n/**\n * Removes the '0x' prefix from a hexadecimal string.\n * If the prefix does not exist, it returns the original string.\n */\nexport const removeHexPrefix = (hexString: string) => {\n  if (/^0x/.test(hexString)) {\n    return hexString.slice(2);\n  }\n\n  return hexString;\n};\n\nexport async function encryptKeystoreWallet(\n  privateKey: string,\n  address: AbstractAddress,\n  password: string\n): Promise<string> {\n  // Convert the hexlified private key string to a Buffer.\n  const privateKeyBuffer = bufferFromString(removeHexPrefix(privateKey), 'hex');\n\n  // Generate a random salt.\n  const salt = randomBytes(DEFAULT_KEY_SIZE);\n\n  const key = scrypt({\n    password: bufferFromString(password),\n    salt,\n    dklen: DEFAULT_KEY_SIZE,\n    n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n    r: DEFAULT_KDF_PARAMS_R,\n    p: DEFAULT_KDF_PARAMS_P,\n  });\n\n  // Encrypt the private key using AES-128-CTR.\n  const iv = randomBytes(DEFAULT_IV_SIZE);\n\n  const ciphertext = await encryptJsonWalletData(privateKeyBuffer, key, iv);\n\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertext]);\n\n  // Calculate the MAC.\n  const macHashUint8Array = keccak256(data);\n\n  const mac = stringFromBuffer(macHashUint8Array, 'hex');\n\n  // Construct keystore.\n  const keystore: KeystoreWallet = {\n    id: uuidv4(),\n    version: 3,\n    address: removeHexPrefix(address.toHexString()),\n    crypto: {\n      cipher: 'aes-128-ctr',\n      mac,\n      cipherparams: { iv: stringFromBuffer(iv, 'hex') },\n      ciphertext: stringFromBuffer(ciphertext, 'hex'),\n      kdf: 'scrypt',\n      kdfparams: {\n        dklen: DEFAULT_KEY_SIZE,\n        n: 2 ** DEFAULT_KDF_PARAMS_LOG_N,\n        p: DEFAULT_KDF_PARAMS_P,\n        r: DEFAULT_KDF_PARAMS_R,\n        salt: stringFromBuffer(salt, 'hex'),\n      },\n    },\n  };\n\n  return JSON.stringify(keystore);\n}\n\nexport async function decryptKeystoreWallet(jsonWallet: string, password: string): Promise<string> {\n  const keystoreWallet = JSON.parse(jsonWallet) as KeystoreWallet;\n\n  // Extract the parameters needed for decryption.\n  const {\n    crypto: {\n      mac,\n      ciphertext,\n      cipherparams: { iv },\n      kdfparams: { dklen, n, r, p, salt },\n    },\n  } = keystoreWallet;\n\n  const ciphertextBuffer = bufferFromString(ciphertext, 'hex');\n  const ivBuffer = bufferFromString(iv, 'hex');\n  const saltBuffer = bufferFromString(salt, 'hex');\n\n  const passwordBuffer = bufferFromString(password);\n\n  const key = scrypt({\n    password: passwordBuffer,\n    salt: saltBuffer,\n    n,\n    p,\n    r,\n    dklen,\n  });\n\n  // Verify the MAC. It should be the Keccak-256 hash of the concatenation of the second half of the derived key and the ciphertext.\n  const data = Uint8Array.from([...key.subarray(16, 32), ...ciphertextBuffer]);\n\n  const macHashUint8Array = keccak256(data);\n\n  const macHash = stringFromBuffer(macHashUint8Array, 'hex');\n\n  if (mac !== macHash) {\n    throw new Error('Error decrypting wallet: invalid password');\n  }\n\n  // Decrypt the private key.\n  const buffer = await decryptJsonWalletData(ciphertextBuffer, key, ivBuffer);\n\n  const privateKey = hexlify(buffer);\n\n  return privateKey;\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hashMessage, hashTransaction } from '@fuel-ts/hasher';\nimport type {\n  TransactionResponse,\n  TransactionRequestLike,\n  CallResult,\n  Provider,\n} from '@fuel-ts/providers';\nimport { transactionRequestify } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { Account } from './account';\nimport { FUEL_NETWORK_URL } from './configs';\nimport { encryptKeystoreWallet } from './keystore-wallet';\n\n/**\n * `BaseWalletUnlocked` provides the base functionalities for an unlocked wallet.\n */\nexport class BaseWalletUnlocked extends Account {\n  /**\n   * Default HDWallet path.\n   */\n  static defaultPath = \"m/44'/1179993420'/0'/0/0\";\n\n  /**\n   * The provider used to interact with the Fuel network.\n   */\n  provider: Provider;\n\n  /**\n   * A function that returns the wallet's signer.\n   */\n  signer: () => Signer;\n\n  /**\n   * Creates a new BaseWalletUnlocked instance.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - The provider URL or a Provider instance.\n   */\n  constructor(privateKey: BytesLike, provider: string | Provider = FUEL_NETWORK_URL) {\n    const signer = new Signer(privateKey);\n    super(signer.address, provider);\n    this.signer = () => signer;\n    this.provider = this.connect(provider);\n  }\n\n  /**\n   * Gets the private key of the wallet.\n   *\n   * @returns The private key of the wallet.\n   */\n  get privateKey(): string {\n    return this.signer().privateKey;\n  }\n\n  /**\n   * Gets the public key of the wallet.\n   *\n   * @returns\n   */\n  get publicKey(): string {\n    return this.signer().publicKey;\n  }\n\n  /**\n   * Signs a message with the wallet's private key.\n   *\n   * @param message - The message to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signMessage(message: string): Promise<string> {\n    const signedMessage = await this.signer().sign(hashMessage(message));\n    return signedMessage;\n  }\n\n  /**\n   * Signs a transaction with the wallet's private key.\n   *\n   * @param transactionRequestLike - The transaction request to sign.\n   * @returns A promise that resolves to the signature as a ECDSA 64 bytes string.\n   */\n  async signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const chainId = (await this.provider.getChain()).consensusParameters.chainId.toNumber();\n    const hashedTransaction = hashTransaction(transactionRequest, chainId);\n    const signature = await this.signer().sign(hashedTransaction);\n\n    return signature;\n  }\n\n  /**\n   * Populates a transaction with the witnesses signature.\n   *\n   * @param transactionRequestLike - The transaction request to populate.\n   * @returns The populated transaction request.\n   */\n  async populateTransactionWitnessesSignature(transactionRequestLike: TransactionRequestLike) {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    const signedTransaction = await this.signTransaction(transactionRequest);\n\n    transactionRequest.updateWitnessByOwner(this.address, signedTransaction);\n\n    return transactionRequest;\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends it to the network using `provider.sendTransaction`.\n   *\n   * @param transactionRequestLike - The transaction request to send.\n   * @returns A promise that resolves to the TransactionResponse object.\n   */\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.sendTransaction(\n      await this.populateTransactionWitnessesSignature(transactionRequest)\n    );\n  }\n\n  /**\n   * Populates the witness signature for a transaction and sends a call to the network using `provider.call`.\n   *\n   * @param transactionRequestLike - The transaction request to simulate.\n   * @returns A promise that resolves to the CallResult object.\n   */\n  async simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = transactionRequestify(transactionRequestLike);\n    await this.provider.estimateTxDependencies(transactionRequest);\n    return this.provider.call(\n      await this.populateTransactionWitnessesSignature(transactionRequest),\n      {\n        utxoValidation: true,\n      }\n    );\n  }\n\n  async encrypt(password: string): Promise<string> {\n    return encryptKeystoreWallet(this.privateKey, this.address, password);\n  }\n}\n","//\n// Because WalletLocked and WalletUnlocked has a cycle dependency\n// it's not possible to split the two classes in different files\n//\n/* eslint-disable max-classes-per-file */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { HDWallet } from '@fuel-ts/hdwallet';\nimport { Mnemonic } from '@fuel-ts/mnemonic';\nimport type { Provider } from '@fuel-ts/providers';\nimport { Signer } from '@fuel-ts/signer';\n\nimport { Account } from './account';\nimport { BaseWalletUnlocked } from './base-unlocked-wallet';\nimport { decryptKeystoreWallet } from './keystore-wallet';\nimport type { GenerateOptions } from './types/GenerateOptions';\n\n/**\n * `WalletLocked` provides the functionalities for a locked  wallet.\n */\nexport class WalletLocked extends Account {\n  /**\n   * Unlocks the wallet using the provided private key and returns an instance of WalletUnlocked.\n   *\n   * @param privateKey - The private key used to unlock the wallet.\n   * @returns An instance of WalletUnlocked.\n   */\n  unlock(privateKey: BytesLike): WalletUnlocked {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return new WalletUnlocked(privateKey, this.provider);\n  }\n}\n\n/**\n * `WalletUnlocked` provides the functionalities for an unlocked wallet.\n */\nexport class WalletUnlocked extends BaseWalletUnlocked {\n  /**\n   * Locks the wallet and returns an instance of WalletLocked.\n   *\n   * @returns An instance of WalletLocked.\n   */\n  lock(): WalletLocked {\n    this.signer = () => new Signer('0x00');\n    return new WalletLocked(this.address, this.provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static generate(generateOptions?: GenerateOptions): WalletUnlocked {\n    const privateKey = Signer.generatePrivateKey(generateOptions?.entropy);\n\n    return new WalletUnlocked(privateKey, generateOptions?.provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param path - The derivation path (optional).\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromSeed(seed: string, path?: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromMnemonic(\n    mnemonic: string,\n    path?: string,\n    passphrase?: BytesLike,\n    provider?: Provider\n  ): WalletUnlocked {\n    const seed = Mnemonic.mnemonicToSeed(mnemonic, passphrase);\n    const hdWallet = HDWallet.fromSeed(seed);\n    const childWallet = hdWallet.derivePath(path || WalletUnlocked.defaultPath);\n\n    return new WalletUnlocked(<string>childWallet.privateKey, provider);\n  }\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An instance of WalletUnlocked.\n   */\n  static fromExtendedKey(extendedKey: string, provider?: Provider): WalletUnlocked {\n    const hdWallet = HDWallet.fromExtendedKey(extendedKey);\n\n    return new WalletUnlocked(<string>hdWallet.privateKey, provider);\n  }\n\n  static async fromEncryptedJson(jsonWallet: string, password: string): Promise<WalletUnlocked> {\n    const privateKey = await decryptKeystoreWallet(jsonWallet, password);\n\n    return new WalletUnlocked(privateKey);\n  }\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport type { AbstractAddress } from '@fuel-ts/interfaces';\nimport type { Provider } from '@fuel-ts/providers';\n\nimport { FUEL_NETWORK_URL } from './configs';\nimport { WalletLocked, WalletUnlocked } from './wallets';\n\n/**\n * `Wallet` provides methods to create locked and unlocked wallet instances.\n */\nexport class Wallet {\n  /**\n   * Creates a locked wallet instance from an address and a provider.\n   *\n   * @param address - The address of the wallet.\n   * @param provider - The provider URL or a Provider instance.\n   * @returns A locked wallet instance.\n   */\n  static fromAddress(\n    address: string | AbstractAddress,\n    provider: string | Provider = FUEL_NETWORK_URL\n  ): WalletLocked {\n    return new WalletLocked(address, provider);\n  }\n\n  /**\n   * Creates an unlocked wallet instance from a private key and a provider.\n   *\n   * @param privateKey - The private key of the wallet.\n   * @param provider - The provider URL or a Provider instance.\n   * @returns An unlocked wallet instance.\n   */\n  static fromPrivateKey(privateKey: BytesLike, provider: string | Provider = FUEL_NETWORK_URL) {\n    return new WalletUnlocked(privateKey, provider);\n  }\n\n  /**\n   * Generate a new Wallet Unlocked with a random key pair.\n   *\n   * @param generateOptions - Options to customize the generation process (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static generate = WalletUnlocked.generate;\n\n  /**\n   * Create a Wallet Unlocked from a seed.\n   *\n   * @param seed - The seed phrase.\n   * @param path - The derivation path (optional).\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromSeed = WalletUnlocked.fromSeed;\n\n  /**\n   * Create a Wallet Unlocked from a mnemonic phrase.\n   *\n   * @param mnemonic - The mnemonic phrase.\n   * @param path - The derivation path (optional).\n   * @param passphrase - The passphrase for the mnemonic (optional).\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromMnemonic = WalletUnlocked.fromMnemonic;\n\n  /**\n   * Create a Wallet Unlocked from an extended key.\n   *\n   * @param extendedKey - The extended key.\n   * @param provider - The provider URL or a Provider instance (optional).\n   * @returns An unlocked wallet instance.\n   */\n  static fromExtendedKey = WalletUnlocked.fromExtendedKey;\n  static fromEncryptedJson = WalletUnlocked.fromEncryptedJson;\n}\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { hexlify, arrayify } from '@ethersproject/bytes';\nimport { Logger } from '@ethersproject/logger';\nimport {\n  Interface,\n  TRANSACTION_PREDICATE_COIN_FIXED_SIZE,\n  TRANSACTION_SCRIPT_FIXED_SIZE,\n  VM_TX_MEMORY,\n} from '@fuel-ts/abi-coder';\nimport type { JsonAbi, InputValue } from '@fuel-ts/abi-coder';\nimport { Address } from '@fuel-ts/address';\nimport type {\n  CallResult,\n  Provider,\n  TransactionRequestLike,\n  TransactionResponse,\n} from '@fuel-ts/providers';\nimport { transactionRequestify } from '@fuel-ts/providers';\nimport { ByteArrayCoder, InputType } from '@fuel-ts/transactions';\nimport { versions } from '@fuel-ts/versions';\nimport { Account } from '@fuel-ts/wallet';\n\nimport { getPredicateRoot } from './utils';\n\nconst logger = new Logger(versions.FUELS);\n\n/**\n * `Predicate` provides methods to populate transaction data with predicate information and sending transactions with them.\n */\nexport class Predicate<ARGS extends InputValue[]> extends Account {\n  bytes: Uint8Array;\n  predicateData: Uint8Array = Uint8Array.from([]);\n  interface?: Interface;\n\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param chainId - The chain ID for which the predicate is used.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param provider - The provider used to interact with the blockchain.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   */\n  constructor(\n    bytes: BytesLike,\n    chainId: number,\n    jsonAbi?: JsonAbi,\n    provider?: string | Provider,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    const { predicateBytes, predicateInterface } = Predicate.processPredicateData(\n      bytes,\n      jsonAbi,\n      configurableConstants\n    );\n\n    const address = Address.fromB256(getPredicateRoot(predicateBytes, chainId));\n    super(address, provider);\n\n    this.bytes = predicateBytes;\n    this.interface = predicateInterface;\n  }\n\n  /**\n   * Populates the transaction data with predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns The transaction request with predicate data.\n   */\n  populateTransactionPredicateData(transactionRequestLike: TransactionRequestLike) {\n    const request = transactionRequestify(transactionRequestLike);\n\n    request.inputs?.forEach((input) => {\n      if (input.type === InputType.Coin && hexlify(input.owner) === this.address.toB256()) {\n        // eslint-disable-next-line no-param-reassign\n        input.predicate = this.bytes;\n        // eslint-disable-next-line no-param-reassign\n        input.predicateData = this.predicateData;\n      }\n    });\n\n    return request;\n  }\n\n  /**\n   * Sends a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the transaction response.\n   */\n  sendTransaction(transactionRequestLike: TransactionRequestLike): Promise<TransactionResponse> {\n    const transactionRequest = this.populateTransactionPredicateData(transactionRequestLike);\n    return super.sendTransaction(transactionRequest);\n  }\n\n  /**\n   * Simulates a transaction with the populated predicate data.\n   *\n   * @param transactionRequestLike - The transaction request-like object.\n   * @returns A promise that resolves to the call result.\n   */\n  simulateTransaction(transactionRequestLike: TransactionRequestLike): Promise<CallResult> {\n    const transactionRequest = this.populateTransactionPredicateData(transactionRequestLike);\n    return super.simulateTransaction(transactionRequest);\n  }\n\n  /**\n   * Sets data for the predicate.\n   *\n   * @param args - Arguments for the predicate function.\n   * @returns The Predicate instance with updated predicate data.\n   */\n  setData<T extends ARGS>(...args: T) {\n    const mainFn = this.interface?.functions.main;\n    const paddedCode = new ByteArrayCoder(this.bytes.length).encode(this.bytes);\n\n    const OFFSET =\n      VM_TX_MEMORY +\n      TRANSACTION_SCRIPT_FIXED_SIZE +\n      TRANSACTION_PREDICATE_COIN_FIXED_SIZE +\n      paddedCode.byteLength -\n      17;\n\n    this.predicateData = mainFn?.encodeArguments(args, OFFSET) || new Uint8Array();\n    return this;\n  }\n\n  /**\n   * Processes the predicate data and returns the altered bytecode and interface.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param jsonAbi - The JSON ABI of the predicate.\n   * @param configurableConstants - Optional configurable constants for the predicate.\n   * @returns An object containing the new predicate bytes and interface.\n   */\n  private static processPredicateData(\n    bytes: BytesLike,\n    jsonAbi?: JsonAbi,\n    configurableConstants?: { [name: string]: unknown }\n  ) {\n    let predicateBytes = arrayify(bytes);\n    let abiInterface: Interface | undefined;\n\n    if (jsonAbi) {\n      abiInterface = new Interface(jsonAbi);\n      if (abiInterface.functions.main === undefined) {\n        logger.throwArgumentError(\n          'Cannot use ABI without \"main\" function',\n          'Abi functions',\n          abiInterface.functions\n        );\n      }\n    }\n\n    if (configurableConstants && Object.keys(configurableConstants).length) {\n      predicateBytes = Predicate.setConfigurableConstants(\n        predicateBytes,\n        configurableConstants,\n        abiInterface\n      );\n    }\n\n    return {\n      predicateBytes,\n      predicateInterface: abiInterface,\n    };\n  }\n\n  /**\n   * Sets the configurable constants for the predicate.\n   *\n   * @param bytes - The bytes of the predicate.\n   * @param configurableConstants - Configurable constants to be set.\n   * @param abiInterface - The ABI interface of the predicate.\n   * @returns The mutated bytes with the configurable constants set.\n   */\n  private static setConfigurableConstants(\n    bytes: Uint8Array,\n    configurableConstants: { [name: string]: unknown },\n    abiInterface?: Interface\n  ) {\n    const mutatedBytes = bytes;\n\n    try {\n      if (!abiInterface) {\n        throw new Error(\n          'Unable to validate configurable constants, Predicate instantiated without json ABI'\n        );\n      }\n\n      if (Object.keys(abiInterface.configurables).length === 0) {\n        throw new Error('Predicate has no configurable constants to be set');\n      }\n\n      Object.entries(configurableConstants).forEach(([key, value]) => {\n        if (!abiInterface?.configurables[key]) {\n          throw new Error(`Predicate has no configurable constant named: ${key}`);\n        }\n\n        const { offset } = abiInterface.configurables[key];\n\n        const encoded = abiInterface.encodeConfigurable(key, value as InputValue);\n\n        mutatedBytes.set(encoded, offset);\n      });\n    } catch (err) {\n      throw new Error(`Error setting configurable constants: ${err}`);\n    }\n\n    return mutatedBytes;\n  }\n}\n","import { ScriptRequest } from '@fuel-ts/program';\n\n/**\n * @hidden\n *\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new ScriptRequest(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n","import type { BytesLike } from '@ethersproject/bytes';\nimport { concat, hexlify, arrayify } from '@ethersproject/bytes';\nimport { hash, uint64ToBytesBE } from '@fuel-ts/hasher';\nimport { calcRoot } from '@fuel-ts/merkle';\nimport { chunkAndPadBytes } from '@fuel-ts/utils';\n\n/**\n * @hidden\n *\n * Calculates the predicate root for a given bytecode and chain ID.\n *\n * @param bytecode - The bytecode represented as a BytesLike object.\n * @param chainId - The ID of the chain associated with the bytecode.\n * @returns The predicate root as a string.\n */\nexport const getPredicateRoot = (bytecode: BytesLike, chainId: number): string => {\n  const chunkSize = 16 * 1024;\n  const bytes = arrayify(bytecode);\n  const chunks = chunkAndPadBytes(bytes, chunkSize);\n  const chainIdBytes = uint64ToBytesBE(chainId);\n  const codeRoot = calcRoot(chunks.map((c) => hexlify(c)));\n\n  const predicateRoot = hash(concat(['0x4655454C', chainIdBytes, codeRoot]));\n  return predicateRoot;\n};\n"],"names":["logger","Logger","isHexable","value","toHexString","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isInteger","isBytes","constructor","length","i","v","arrayify","options","checkSafeUint53","result","unshift","parseInt","String","push","allowMissingPrefix","substring","isHexString","hex","hexPad","throwArgumentError","concat","items","objects","map","item","reduce","accum","offset","object","set","match","HexCharacters","hexlify","Math","floor","toString","toLowerCase","hexDataSlice","data","endOffset","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","Error","join","fromCharCode","message","_checkNormalize","HEX","version","Object","defineProperty","this","enumerable","writable","logLevel","level","console","log","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","exports","ALPHABET","ALPHABET_MAP","z","x","charAt","polymodStep","pre","b","prefixChk","prefix","chk","c","charCodeAt","convert","inBits","outBits","pad","bits","maxV","toWords","bytes","fromWordsUnsafe","words","res","isArray","fromWords","getLibraryFromEncoding","encoding","ENCODING_CONST","__decode","str","LIMIT","lowered","uppered","toUpperCase","split","lastIndexOf","wordChars","undefined","decodeUnsafe","decode","encode","TypeError","module","assert","val","msg","inherits","ctor","superCtor","super_","TempCtor","BN","number","base","endian","isBN","negative","red","_init","Buffer","wordSize","window","require","e","parseHex4Bits","string","index","parseHexByte","lowerBound","r","parseBase","start","end","mul","len","min","move","dest","src","num","max","left","right","cmp","_initNumber","_initArray","replace","_parseHex","_parseBase","toArray","ceil","j","w","_strip","limbLen","limbPow","total","mod","word","imuln","_iaddn","pow","copy","_move","clone","_expand","size","_normSign","Symbol","for","inspect","zeros","groupSizes","groupBases","padding","out","carry","groupSize","groupBase","isZero","modrn","idivn","toNumber","ret","toJSON","toBuffer","toArrayLike","smallMulTo","self","a","lo","k","ncarry","rword","maxJ","ArrayType","byteLength","reqLength","allocUnsafe","allocate","_toArrayLikeLE","position","shift","_toArrayLikeBE","clz32","_countBits","t","_zeroBits","bitLength","hi","zeroBits","toTwos","width","abs","inotn","iaddn","fromTwos","testn","notn","ineg","isNeg","neg","iuor","ior","or","uor","iuand","iand","and","uand","iuxor","ixor","xor","uxor","bytesNeeded","bitsLeft","setn","bit","wbit","iadd","isub","add","sub","comb10MulTo","mid","o","a0","al0","ah0","a1","al1","ah1","a2","al2","ah2","a3","al3","ah3","a4","al4","ah4","a5","al5","ah5","a6","al6","ah6","a7","al7","ah7","a8","al8","ah8","a9","al9","ah9","b0","bl0","bh0","b1","bl1","bh1","b2","bl2","bh2","b3","bl3","bh3","b4","bl4","bh4","b5","bl5","bh5","b6","bl6","bh6","b7","bl7","bh7","b8","bl8","bh8","b9","bl9","bh9","w0","imul","w1","w2","w3","w4","w5","w6","w7","w8","w9","w10","w11","w12","w13","w14","w15","w16","w17","w18","bigMulTo","hncarry","jumboMulTo","FFTM","y","mulTo","makeRBT","N","l","revBin","rb","permute","rbt","rws","iws","rtws","itws","transform","s","rtwdf","cos","PI","itwdf","sin","p","rtwdf_","itwdf_","re","ie","ro","io","rx","guessLen13b","n","m","odd","conjugate","normalize13b","ws","round","convert13b","stub","ph","mulp","_","rwst","iwst","nrws","nrwst","niwst","rmws","mulf","isNegNum","muln","sqr","isqr","toBitArray","q","iushln","carryMask","newCarry","ishln","iushrn","hint","extended","h","mask","maskedWords","ishrn","shln","ushln","shrn","ushrn","imaskn","maskn","isubn","addn","subn","iabs","_ishlnsubmul","_wordDiv","mode","bhi","diff","qj","div","divmod","positive","divn","umod","divRound","dm","half","r2","andln","acc","modn","egcd","A","B","C","D","g","isEven","yp","xp","im","isOdd","jm","gcd","_invmp","x1","x2","delta","cmpn","invm","bincn","ucmp","gtn","gt","gten","gte","ltn","lt","lten","lte","eqn","eq","Red","toRed","ctx","convertTo","_forceRed","fromRed","convertFrom","forceRed","redAdd","redIAdd","redSub","redISub","redShl","shl","redMul","_verify2","redIMul","redSqr","_verify1","redISqr","redSqrt","sqrt","redInvm","redNeg","redPow","primes","k256","p224","p192","p25519","MPrime","tmp","_tmp","K256","P224","P192","P25519","prime","_prime","Mont","imod","rinv","minv","ireduce","rlen","imulK","strip","input","output","outLen","prev","next","mod3","one","nOne","lpow","inv","wnd","current","currentLen","mont","u","Rand","rand","generate","_rand","getBytes","getByte","crypto","getRandomValues","arr","msCrypto","randomBytes","global","__self__","F","fetch","DOMException","support","Blob","viewClasses","isArrayBufferView","ArrayBuffer","isView","obj","indexOf","normalizeName","test","normalizeValue","iteratorFor","iterator","done","Headers","headers","append","header","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","buf","view","buffer","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","get","type","rejected","arrayBuffer","then","text","readAsText","readBlobAsText","chars","readArrayBufferAsText","formData","json","parse","oldValue","has","hasOwnProperty","callback","thisArg","values","entries","methods","Request","credentials","method","signal","upcased","normalizeMethod","referrer","trim","decodeURIComponent","parseHeaders","rawHeaders","line","parts","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","RangeError","location","err","stack","create","init","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","getAllResponseHeaders","responseURL","responseText","ontimeout","onabort","open","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","elliptic","utils","curve","curves","ec","eddsa","getNAF","getJSF","BaseCurve","conf","zero","two","pointFromJSON","gRed","_wnafT1","_wnafT2","_wnafT3","_wnafT4","_bitLength","adjustCount","redN","_maxwellTrick","BasePoint","precomputed","point","validate","_fixedNafMul","doubles","_getDoubles","naf","I","step","nafW","repr","jpoint","mixedAdd","points","toP","_wnafMul","nafPoints","_getNAFPoints","dblp","_wnafMulAdd","defW","coeffs","jacobianResult","wndWidth","comb","toJ","jsf","ja","jb","decodePoint","enc","pointFromX","encodeCompressed","_encode","compact","getX","getY","precompute","power","beta","_getBeta","_hasDoubles","dbl","Base","EdwardsCurve","twisted","mOneA","c2","d","dd","oneC","Point","zOne","_mulA","_mulC","rhs","lhs","y2","pointFromY","isInfinity","fromJSON","_extDbl","f","nx","ny","nt","nz","_projDbl","_extAdd","_projAdd","mulAdd","k1","k2","jmulAdd","zi","other","eqXToP","xc","short","edwards","MontCurve","i4","a24","aa","bb","diffAdd","da","cb","jumlAdd","ShortCurve","tinv","zeroA","threeA","endo","_getEndomorphism","_endoWnafT1","_endoWnafT2","isRed","inf","JPoint","lambda","betas","_getEndoRoots","lambdas","basis","vec","_getEndoBasis","ntinv","prevR","aprxSqrt","y1","len1","_endoSplit","v1","v2","c1","p1","p2","q1","q2","ax","_endoWnafMulAdd","npoints","ncoeffs","endoMul","obj2point","ys1","dyinv","_precompute","negate","zinv","zinv2","ay","pz2","z2","u1","u2","s1","s2","h2","h3","jx","jy","jz","jz4","jyd","jx2","jyd2","jyd4","t1","t2","dny","_zeroDbl","_threeDbl","_dbl","xx","yy","yyyy","yyyy8","c8","gamma","alpha","beta4","beta8","ggamma8","jy2","jxd4","jyd8","trpl","zz","mm","ee","yyu4","kbase","z3","pz3","zs","hash","PresetCurve","defineCurve","configurable","sha256","sha384","sha512","HmacDRBG","KeyPair","Signature","EC","nh","keyPair","keyFromPrivate","priv","fromPrivate","keyFromPublic","pub","fromPublic","genKeyPair","drbg","pers","persEnc","entropy","hmacStrength","entropyEnc","nonce","ns2","_truncateToN","truncOnly","sign","bkey","getPrivate","ns1","iter","kp","kpX","recoveryParam","canonical","verify","signature","sinv","getPublic","recoverPubKey","isYOdd","isSecondKey","rInv","getKeyRecoveryParam","Q","Qprime","_importPrivate","privEnc","_importPublic","pubEnc","derive","_importDER","Position","place","getLength","initial","octetLen","rmPadding","constructLength","octets","LN2","slen","toDER","backHalf","parseBytes","EDDSA","pointClass","encodingLength","secret","keyFromSecret","hashInt","messagePrefix","R","Rencoded","encodePoint","s_","pubBytes","S","makeSignature","sig","SG","update","intFromLE","digest","fromSecret","lastIx","normed","xIsOdd","encodeInt","decodeInt","isPoint","cachedProperty","_secret","_pub","_pubBytes","privBytes","getSecret","_R","_S","_Rencoded","_Sencoded","Sencoded","toBytes","toHex","minAssert","minUtils","zero2","fill","m8","d1","d2","m14","m24","computer","littleEndian","isExtractableFileEnhanced","isExtractableFile","pipe","query","variables","operationName","jsonSerializer","defaultJsonSerializer_1","extract_files_1","files","payload","accu","currentQuery","form_data_1","paths","file","PING","PONG","SUBSCRIBE","COMPLETE","id","_type","_payload","_id","GraphQLWebSocketMessage","socket","_a","onInit","onAcknowledged","onPing","onPong","socketState","acknowledged","lastRequestId","subscriptions","onopen","_b","_c","_d","onclose","_this","onmessage","parseMessage","Pong","subscriber","types_1","complete","close","GraphQLWebSocketClient","subscriptionId","Complete","rawSubscribe","extensions","document","subscribe","_1","makeSubscribe","Ping","ConnectionInit","CrossFetch","resolveHeaders","oHeaders","HeadersInstanceToPlainObject","queryCleanner","post","fetchOptions","middleware","createRequestBody_1","queryParams","search","encodeURIComponent","buildGetQueryParams","GraphQLClient","queryOrOptions","requestHeaders","rawRequestOptions","parseArgs_1","cross_fetch_1","requestMiddleware","responseMiddleware","resolveRequestDocument","makeRequest","callOrIdentity","catch","documentOrOptions","_i","variablesAndRequestHeaders","requestOptions","documentsOrOptions","batchRequestOptions","queries","documents","fetcher","isBathchingQuery","getResult","successfullyReceivedData","some","successfullyPassedErrorPolicy","errorPolicy","headers_1","status_1","rest","errorResult","urlOrOptions","contentType","startsWith","extractOperationName","operationDefinitions","definitions","filter","definition","operationName_1","parser_1","printer_1","rawRequest","batchRequests","chunks","accumulator","chunk","ClientError","extractMessage","setPrototypeOf","captureStackTrace","__extends","_ref","uri","defaultIsExtractableFile","extractFiles","path","Map","addFile","storedPaths","FileList","child","ReactNativeFile","File","common","sha","ripemd","hmac","sha1","sha224","ripemd160","BlockHash","pending","pendingTotal","blockSize","outSize","padLength","_delta8","_delta32","join32","_update","_pad","_digest","Hmac","Hash","inner","outer","rotl32","sum32","sum32_3","sum32_4","RIPEMD160","K","Kh","E","Ah","Bh","Ch","Dh","Eh","T","rh","sh","toHex32","split32","shaCommon","sum32_5","ft_1","sha1_K","SHA1","W","SHA256","SHA224","ch32","maj32","s0_256","s1_256","g0_256","g1_256","sha256_K","T1","T2","SHA512","SHA384","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","sha512_K","ch64_hi","xh","xl","yh","yl","zh","ch64_lo","zl","maj64_hi","maj64_lo","s0_512_hi","s0_512_lo","s1_512_hi","s1_512_lo","g0_512_hi","g0_512_lo","g1_512_hi","g1_512_lo","_prepareBlock","c0_hi","c0_lo","c1_hi","c1_lo","c2_hi","c2_lo","c3_hi","c3_lo","ah","al","bh","bl","ch","cl","dh","dl","eh","el","fh","fl","gh","gl","hh","hl","c4_hi","c4_lo","T1_hi","T1_lo","T2_hi","T2_lo","rotr32","p32","isSurrogatePair","htonl","zero8","pos","predResist","minEntropy","_reseed","reseedInterval","V","nonceEnc","seed","_hmac","kmac","reseed","addEnc","temp","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","freeSelf","root","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","pair","addSetEntry","arrayReduce","iteratee","initAccum","isHostObject","mapToArray","overArg","func","arg","setToArray","arrayProto","funcProto","objectProto","coreJsData","maskSrcKey","uid","exec","IE_PROTO","funcToString","objectToString","reIsNative","RegExp","getPrototype","getPrototypeOf","objectCreate","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","getNative","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","clear","entry","ListCache","MapCache","Stack","__data__","arrayLikeKeys","inherited","isObjectLike","isArrayLike","isArrayLikeObject","isArguments","baseTimes","skipIndexes","isIndex","assignValue","objValue","assocIndexOf","baseClone","isDeep","isFull","customizer","isObject","isArr","initCloneArray","source","copyArray","tag","getTag","isFunc","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","Ctor","cloneArrayBuffer","dataView","byteOffset","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","symbol","initCloneByTag","stacked","props","keysFunc","symbolsFunc","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","baseIsNative","isFunction","newValue","getMapData","isKeyable","getValue","pop","cache","pairs","LARGE_ARRAY_SIZE","ctorString","isLength","baseKeys","rsComboMarksRange","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsOptVar","rsSeq","rsSymbol","reUnicode","reHasUnicode","hasUnicode","stringToArray","unicodeToArray","asciiToArray","symbolToString","baseToString","isSymbol","castSlice","baseSlice","methodName","upperFirst","strSymbols","chr","trailing","equal","_superPropBase","property","Reflect","bind","receiver","desc","getOwnPropertyDescriptor","_checkPrivateRedeclaration","privateCollection","_classPrivateMethodInitSpec","privateSet","_classPrivateFieldInitSpec","privateMap","_classPrivateMethodGet","fn","_classExtractFieldDescriptor","action","_classPrivateFieldGet","descriptor","_classPrivateFieldSet","_wrapRegExp","groups","BabelRegExp","_super","_groups","flags","buildGroups","indices","substitution","group","versions","FORC","FUEL_CORE","FUELS","defaultValue","bytesPadding","bytesLength","from","units","DECIMAL_UNITS","precision","DEFAULT_PRECISION","minPrecision","DEFAULT_MIN_PRECISION","formattedUnits","formatUnits","formattedFixed","valueUnits","valueDecimals","decimals","trimmedDecimal","lastNonZeroIndex","keepChars","decimalPortion","toFixed","parseFloat","originalDecimals","firstNonZero","defaultDecimals","integerPortion","caller","BnJs","bn","numbers","cur","parseUnits","valueToParse","amount","replaceAll","UnicodeNormalizationForm","Utf8ErrorReason","ignoreFunc","badCodepoint","BAD_PREFIX","UNEXPECTED_CONTINUE","OVERRUN","Utf8ErrorFuncs","freeze","ignore","OVERLONG","getUtf8CodePoints","onError","extraLength","overlongMask","nextChar","MISSING_CONTINUE","OUT_OF_RANGE","UTF16_SURROGATE","toUtf8Bytes","checkNormalize","toUtf8String","codePoint","SupportedAlgorithm","computeHmac","algorithm","Number","isSafeInteger","lengths","includes","bool","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","u8a","globalThis","u32","Uint32Array","createView","rotr","padStart","TextEncoder","utf8ToBytes","_cloneInto","checkOpts","defaults","opts","assign","wrapConstructor","hashCons","hashC","SHA2","padOffset","isLE","take","subarray","process","roundClean","setBigUint64","_32n","BigInt","_u32_max","wh","wl","setUint32","oview","state","digestInto","destroy","to","Maj","SHA256_K","IV","SHA256_W","G","H","getUint32","W15","W2","s0","HMAC","_key","iHash","oHash","pbkdf2Init","_password","_salt","_opts","dkLen","asyncTick","password","salt","DK","PRF","PRFSalt","pbkdf2Output","prfW","pbkdf2","ti","Ti","setInt32","ui","rotl","XorAndSalsa","pi","ii","oi","y00","y01","y02","y03","y04","y05","y06","y07","y08","y09","y10","y11","y12","y13","y14","y15","x00","x01","x02","x03","x04","x05","x06","x07","x08","x09","x10","x11","x12","x13","x14","x15","BlockMix","head","tail","scryptInit","maxmem","onProgress","blockSize32","memUsed","B32","blockMixCb","totalBlockMix","callbackPer","blockMixCnt","scryptOutput","assertBytes","wrapHash","webCrypto","nodeRequire","scryptSync","Pi","_sync","U32_MASK64","fromBig","le","u64","lst","Al","toBig","shrSH","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","Bl","add3L","Cl","add3H","low","add4L","Dl","add4H","add5H","add5L","El","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_0n","_1n","_2n","_7n","_256n","_0x71n","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","keccakP","keccak","finish","bufferOut","writeInto","xofInto","gen","keccak_224","keccak_256","keccak_384","keccak_512","genShake","wrapXOFConstructorWithOpts","keccak256","iterations","keylen","hashAlgorithm","hLen","block1","U","destPos","bufferFromString","binaryString","atob","bufferLength","startIndex","btoa","stringFromBuffer","TextDecoder","binary","hexString","ALGORITHM","keyFromPassword","saltBuffer","encrypt","iv","dataString","dataBuffer","alg","counter","subtle","importKey","encBuffer","decrypt","keystore","encryptedText","ptBuffer","decryptedData","encryptJsonWalletData","keyBuffer","ivBuffer","cryptoKey","encrypted","decryptJsonWalletData","decrypted","api","scrypt","ethCryScrypt","dklen","Coder","encodedLength","U64Coder","OPTION_CODER_TYPE","stringRegEx","arrayRegEx","structRegEx","enumRegEx","tupleRegEx","genericRegEx","ASSET_ID_LEN","VM_TX_MEMORY","BYTES_32","concatWithDynamicData","topLevelData","totalIndex","dynamicData","pointerIndex","vData","byteArray","unpackDynamicData","results","baseOffset","dataOffset","cumulativeDynamicByteLength","updatedResults","pointerOffset","adjustedValue","dataToAppend","findOrThrow","predicate","throwFn","found","find","ArrayCoder","coder","newOffset","decoded","B256Coder","encodedValue","B512Coder","BooleanCoder","ByteCoder","EnumCoder","coders","caseIndexCoder","encodedValueSize","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","caseKey","empty","valueCoder","caseIndex","enumCoders","every","NumberCoder","baseType","StringCoder","paddingLength","encoded","OptionCoder","toSwayOption","Some","None","toOption","StructCoder","fieldName","fieldCoder","fieldValue","TupleCoder","VecCoder","VEC_PROPERTY_SPACE","pointer","_data","_offset","ResolvedAbiType","abi","types","typeId","originalTypeArguments","typeArguments","components","getResolvedGenericComponents","typeParameters","getImplicitGenericTypeParameters","getArgSignaturePrefix","content","getArgSignatureContent","strMatch","arrayMatch","getSignature","typeArgumentsSignature","componentsSignature","typeParametersAndArgsMap","typeParameter","typeParameterIndex","structuredClone","resolveGenericArgTypes","argType","implicitTypeParameters","itp","implicitGenericParametersParam","implicitGenericParameters","AbiCoder","resolvedAbiType","getCoderImpl","getCoder","stringMatch","itemCoder","arrayElementCoder","structMatch","getCoders","enumMatch","tupleMatch","component","abiType","FunctionFragment","jsonAbi","jsonFn","functions","selector","getFunctionSelector","attributes","inputTypes","inputs","isPointerType","verifyArgsAndInputsAlign","shallowCopyValues","nonEmptyInputs","currentIndex","inputAbiType","decodedValue","decodedValueByteSize","outputAbiType","inputsSignatures","functionSignature","hashedFunctionSignature","optionalInputs","Interface","externalLoggedTypes","fromEntries","configurables","nameOrSignatureOrSelector","functionFragment","fragment","getFunction","decodeArguments","encodeArguments","decodeOutput","logId","receiptId","decodeLog","loggedType","loggedTypes","configurableType","AbstractAddress","AbstractAccount","AbstractProgram","AbstractContract","FUEL_BECH32_HRP_PREFIX","fromBech32","address","bech32m","toBech32","isBech32","isB256","getBytesFromBech32","toB256","addressify","addressLike","clearFirst12BytesFromB256","b256","Address","checkNew","bech32Address","normalizeBech32","b256Address","publicKey","fromB256","fromString","isPublicKey","fromPublicKey","evmAddress","ByteArrayCoder","TxPointerCoder","blockHeight","txIndex","UtxoIdCoder","transactionId","outputIndex","InputType","InputCoinCoder","utxoID","owner","assetId","txPointer","witnessIndex","maturity","predicateGasUsed","predicateLength","predicateDataLength","predicateData","InputContractCoder","balanceRoot","stateRoot","contractID","InputMessageCoder","encodeData","sender","recipient","dataLength","messageData","InputCoder","OutputType","OutputCoinCoder","OutputContractCoder","inputIndex","OutputChangeCoder","OutputVariableCoder","OutputContractCreatedCoder","contractId","OutputCoder","ReceiptType","ReceiptMessageOutCoder","receiptMessageOut","messageId","getMessageId","getAssetIdForMintAndBurnReceipts","subId","contractIdBytes","subIdBytes","ReceiptMintCoder","pc","is","getAssetId","ReceiptBurnCoder","StorageSlotCoder","WitnessCoder","TransactionType","TransactionScriptCoder","gasPrice","gasLimit","scriptLength","scriptDataLength","inputsCount","outputsCount","witnessesCount","receiptsRoot","script","scriptData","outputs","witnesses","TransactionCreateCoder","bytecodeLength","bytecodeWitnessIndex","storageSlotsCount","storageSlots","TransactionMintCoder","TransactionCoder","MAX_GAS_PER_TX","GAS_PRICE_FACTOR","GAS_PER_BYTE","FAILED_TRANSFER_TO_ADDRESS_SIGNAL","ZeroBytes32","BaseAssetId","coinQuantityfy","coinQuantityLike","ContractFragmentFragmentDoc","gql","ReceiptFragmentFragmentDoc","TransactionFragmentFragmentDoc","CoinFragmentFragmentDoc","MessageCoinFragmentFragmentDoc","MessageFragmentFragmentDoc","MessageProofFragmentFragmentDoc","BalanceFragmentFragmentDoc","ConsensusParametersFragmentFragmentDoc","BlockFragmentFragmentDoc","ChainInfoFragmentFragmentDoc","ContractBalanceFragmentFragmentDoc","PageInfoFragmentFragmentDoc","GetVersionDocument","GetInfoDocument","GetChainDocument","GetTransactionDocument","GetTransactionWithReceiptsDocument","GetTransactionsDocument","GetTransactionsByOwnerDocument","EstimatePredicatesDocument","GetBlockDocument","GetBlockWithTransactionsDocument","GetBlocksDocument","GetCoinDocument","GetCoinsDocument","GetCoinsToSpendDocument","GetContractDocument","GetContractBalanceDocument","GetBalanceDocument","GetBalancesDocument","GetMessagesDocument","GetMessageProofDocument","DryRunDocument","SubmitDocument","ProduceBlocksDocument","defaultWrapper","_operationName","_operationType","getSdk","client","withWrapper","getVersion","wrappedRequestHeaders","getInfo","getChain","getTransaction","getTransactionWithReceipts","getTransactions","getTransactionsByOwner","estimatePredicates","getBlock","getBlockWithTransactions","getBlocks","getCoin","getCoins","getCoinsToSpend","getContract","getContractBalance","getBalance","getBalances","getMessages","getMessageProof","dryRun","submit","produceBlocks","MemoryCache","ttlInMs","ttl","isAutoExpiring","expires","Date","now","del","expiresAt","list","inputify","Coin","Contract","Message","outputify","Change","Variable","ContractCreated","isCoin","resource","getReceiptsWithMissingData","receipts","memo","receipt","Revert","doesReceiptHaveMissingOutputVariables","missingOutputVariables","Panic","doesReceiptHaveMissingContractId","missingOutputContractIds","hexOrZero","calculatePriceWithFactor","gasUsed","priceFactor","calculateTransactionFee","fee","gasPriceFactor","gasPerByte","transactionBytes","transactionType","transactionWitnesses","margin","Create","witnessSize","txChargeableBytes","getGasUsedForContractCreated","multiply","ScriptResult","getGasUsedFromReceipts","normalizeJSON","cloneDeep","sleep","time","setTimeout","ChangeOutputCollisionError","NoWitnessAtIndexError","NoWitnessByOwnerError","witnessify","BaseTransactionRequest","toTransaction","getCoinInputWitnessIndexByOwner","updateWitness","witness","ownerAddress","createWitness","pushInput","changeOutput","getChangeOutputs","pushOutput","resources","addResourceInputAndOutput","quantities","quantity","toTransactionBytes","gasFee","Boolean","getStorageValue","storageSlotify","storageSlot","CreateTransactionRequest","baseTransaction","getBaseTransaction","returnZeroScript","encodeScriptData","withdrawScript","ScriptTransactionRequest","bytesOffset","Script","numberOfVariables","outputsNumber","contract","contractAddress","getContractInputs","abiInterface","main","transactionRequestify","getInputsByType","getInputsCoin","getInputFromAssetId","coinInputs","messageInputs","getInputsMessage","coinInput","messageInput","getInputAccountAddress","getOutputsByType","getOutputsCoin","getReceiptsByType","getTransactionTypeName","Mint","isType","isTypeCreate","isTypeScript","hasSameAssetId","mergeAssets","op1","op2","assets1","assetsSent","assets2","filtered","coin","asset","addOperation","operations","toAdd","ops","op","isSameOperation","newOp","calls","getContractTransferOperations","transferOutReceipts","TransferOut","getReceiptsTransferOut","prevContractTransferOps","getWithdrawFromFuelOperations","messageOutReceipts","MessageOut","getReceiptsMessageOut","prevWithdrawFromFuelOps","chain","getContractCallOperations","abiMap","rawPayload","contractCallReceipts","Call","getReceiptsCall","contractOutputs","getOutputsContract","contractCallOperations","prevOutputCallOps","contractInput","getInputContractFromIndex","newCallOps","prevContractCallOps","inputAddress","getFunctionCall","encodedArgs","argumentsProvided","callFunctionSelector","param1","isInputDataPointer","argsOffset","param2","functionName","getTransferOperations","coinOutputs","getContractCreatedOperations","contractCreatedOutputs","getOutputsContractCreated","fromAddress","contractCreatedOutput","getOperations","payProducerOperations","getPayProducerOperations","processGqlReceipt","gqlReceipt","receiptType","gas","Return","ReturnData","ptr","ra","Log","val0","val1","val2","rc","val3","rd","LogData","Transfer","Burn","assembleReceiptByType","processGraphqlStatus","gqlTransactionStatus","blockId","isStatusFailure","isStatusSuccess","isStatusPending","gqlStatus","getTransactionStatusName","block","assembleTransactionSummary","transaction","abiParam","typeName","mintedAssets","burnedAssets","extractAssetIdFromBurnOrMintReceipts","isTypeMint","TransactionResponse","provider","transactionWithReceipts","gqlTransaction","consensusParameters","nullResponse","isStatusSubmitted","attempts","waitForResult","decodedTransaction","decodeTransaction","transactionSummary","transactionResult","wasm$1","processGqlChain","baseChainHeight","peerCount","latestBlock","contractMaxSize","maxInputs","maxOutputs","maxWitnesses","maxGasPerTx","maxScriptLength","maxScriptDataLength","maxStorageSlots","maxPredicateLength","maxPredicateDataLength","maxGasPerPredicate","maxMessageDataLength","chainId","height","transactions","processNodeInfoAndConsensusParameters","nodeInfo","minGasPrice","nodeVersion","Provider","createOperations","cacheUtxo","gqlClient","transactionRequestLike","transactionRequest","estimateTxDependencies","encodedTransaction","getTransactionCost","utxoValidation","gqlReceipts","estimatedTransaction","missingOutputVariableCount","missingOutputContractIdsCount","tries","hasPredicateInput","addVariableOutputs","addContractInputAndOutput","MAX_RETRIES","tolerance","getNodeInfo","paginationArgs","first","coins","edges","edge","node","utxoId","blockCreated","txCreatedIdx","excludedIds","excludeInput","messages","utxos","uniqueUtxos","getActiveData","coinsQuery","queryPerAsset","maxPerAsset","coinsToSpend","flat","__typename","daHeight","idOrHeight","getBlockNumber","transactionIds","tx","fetchedData","blocks","contractBalance","balance","balances","decodeData","commitBlockId","commitBlockHeight","inputObject","messageProof","messageBlockHeader","commitBlockHeader","blockProof","proofIndex","proofSet","transactionsCount","transactionsRoot","prevRoot","applicationHash","messageReceiptRoot","messageReceiptCount","startTime","blocksToProduce","startTimestamp","unixTimestampMs","latestBlockHeight","cachedTextDecoder","ignoreBOM","fatal","cachedUint8Memory0","getUint8Memory0","memory","IsCallerExternal","GetCaller","GetVerifyingPredicate","GetChainId","Type","ScriptGasPrice","ScriptGasLimit","ScriptMaturity","ScriptLength","ScriptDataLength","ScriptInputsCount","ScriptOutputsCount","ScriptWitnessesCound","ScriptReceiptsRoot","ScriptData","ScriptInputAtIndex","ScriptOutputAtIndex","ScriptWitnessAtIndex","CreateGasPrice","CreateGasLimit","CreateMaturity","CreateBytecodeLength","CreateBytecodeWitnessIndex","CreateStorageSlotsCount","CreateInputsCount","CreateOutputsCount","CreateWitnessesCount","CreateSalt","CreateStorageSlotAtIndex","CreateInputAtIndex","CreateOutputAtIndex","CreateWitnessAtIndex","InputCoinTxId","InputCoinOutputIndex","InputCoinOwner","InputCoinAmount","InputCoinAssetId","InputCoinTxPointer","InputCoinWitnessIndex","InputCoinMaturity","InputCoinPredicateLength","InputCoinPredicateDataLength","InputCoinPredicate","InputCoinPredicateData","InputCoinPredicateGasUsed","InputContractTxId","InputContractOutputIndex","InputContractBalanceRoot","InputContractStateRoot","InputContractTxPointer","InputContractId","InputMessageSender","InputMessageRecipient","InputMessageAmount","InputMessageNonce","InputMessageWitnessIndex","InputMessageDataLength","InputMessagePredicateLength","InputMessagePredicateDataLength","InputMessageData","InputMessagePredicate","InputMessagePredicateData","InputMessagePredicateGasUsed","OutputCoinTo","OutputCoinAmount","OutputCoinAssetId","OutputContractInputIndex","OutputContractBalanceRoot","OutputContractStateRoot","OutputContractCreatedContractId","OutputContractCreatedStateRoot","WitnessDataLength","WitnessData","UnknownPanicReason","OutOfGas","TransactionValidity","MemoryOverflow","ArithmeticOverflow","ContractNotFound","MemoryOwnership","NotEnoughBalance","ExpectedInternalContext","AssetIdNotFound","InputNotFound","OutputNotFound","WitnessNotFound","TransactionMaturity","InvalidMetadataIdentifier","MalformedCallStructure","ReservedRegisterNotWritable","ErrorFlag","InvalidImmediateValue","ExpectedCoinInput","Unused0x15","MemoryWriteOverlap","ContractNotInInputs","InternalBalanceOverflow","ContractMaxSize","ExpectedUnallocatedStack","MaxStaticContractsReached","TransferAmountCannotBeZero","ExpectedOutputVariable","ExpectedParentInternalContext","IllegalJump","ContractIdAlreadyDeployed","ContractMismatch","MessageDataTooLong","ArithmeticError","ContractInstructionNotAllowed","TransferZeroCoins","EQ","NE","LT","GT","LTE","GTE","LZC","ADD","SUB","NOT","OR","XOR","AND","SHL","SHR","__wbg_load","imports","WebAssembly","instantiateStreaming","instantiate","Instance","__wbg_get_imports","wbg","__wbindgen_throw","arg0","arg1","__wbg_finalize_init","__wbg_init","__wbindgen_wasm_module","wasm","sync","filepath","raw","rawLength","Module","stream","instantiateFunc","compileFunc","compileStreaming","compile","_instantiateOrCompile","_loadWasmModule","initWasm","PANIC_REASONS","PANIC_DOC_URL","getDocs","getFailureReason","doc","REVERT_MAP","RevertError","RequireRevertError","TransferToAddressRevertError","SendMessageRevertError","AssertFailedRevertError","revertErrorFactory","signalHex","decodeRevertErrorCode","RevertErrorCodes","revertReceipts","getRevertReceipts","detailedError","revertError","getError","cause","bigintReplacer","ScriptResultDecoderError","logs","docLink","logsText","receiptsText","InstructionSet","callResultToScriptResult","callResult","scriptResultReceipt","returnReceipt","decodeCallResult","decoder","scriptResult","ScriptRequest","scriptDataEncoder","scriptResultDecoder","getScriptDataOffsetWithScriptBytes","getScriptDataOffset","callScript","Node","parent","node_default","hashLeaf","hashNode","calcRoot","nodes","hashed","pNodes","nodePrefix","parseLeaf","parseNode","isLeaf","sparseCompactMerkleProof_default","SparseCompactMerkleProof","SideNodes","NonMembershipLeafData","Bitmask","NumSideNodes","SiblingData","BitMask","sparseMerkleProof_default","SparseMerkleProof","sideNodes","ZERO","MAX_HEIGHT","getBitAtFromMSB","slicedData","byte","reverseSideNodes","reversedSideNodes","SparseMerkleTree","ms","leftNode","rightNode","currentData","nodeHash","sideNode","siblingData","oldLeafHash","oldLeafData","currentHash","nonPlaceholderReached","commonPrefixCount","data1","data2","countCommonPrefix","offsetOfSideNodes","newRoot","sideNodesForRoot","deleteWithSideNodes","updateWithSideNodes","setRoot","leafHash","leafData","nonEmptySideNodes","nonMembershipLeafData","compactedProof","proof","bitMask","compactedSideNodes","compactProof","prove","chunkAndPadBytes","chunkSize","lastChunk","remainingBytes","paddedChunkLength","newChunk","__export","getContractId","getContractRoot","getContractStorageRoot","includeHexPrefix","bytecode","tree","uint64ToBytesBE","bigIntValue","hashTransaction","inputClone","outputClone","chainIdBytes","getCurve","signer_default","Signer","privateKey","privateKeyBytes","compressedPublicKey","p0","signedMessageBytes","recoverPublicKey","addi","dst","Instruction","__wrap","cachedInt32Memory0","getInt32Memory0","Int32Array","GTFArgs","MaxMemoryAccess","__wbg_ptr","__destroy_into_raw","__wbg_instruction_free","retptr","__wbindgen_add_to_stack_pointer","instruction_to_bytes","r0","r1","__wbindgen_free","instruction_size","randomUUID","rnds8","rng","byteToHex","unsafeStringify","native","rnds","random","defineReadOnly","BaseX","alphabet","_alphabetMap","digits","_leader","reverse","Base58","english","stri","getUpperMask","getWords","mnemonic","getPhrase","entropyToMnemonicIndices","remainingBits","checksumBits","checksum","mnemonicWordsToEntropy","wordlist","entropyBits","checksumMask","MasterSecret","MainnetPRV","TestnetPRV","MNEMONIC_SIZES","assertWordList","assertEntropy","assertMnemonic","Mnemonic","phrase","mnemonicToEntropy","entropyToMnemonic","entropyBytes","passphrase","phraseBytes","mnemonicToSeed","masterKeysFromSeed","binarySearch","seedArray","testnet","masterKey","depth","fingerprint","chainCode","extendedKey","extraEntropy","mnemonic_default","HARDENED_INDEX","MainnetPUB","TestnetPUB","base58check","getExtendedKeyPrefix","isPublic","HDWallet","config","signer","parentFingerprint","toExtendedKey","IL","IR","addPoint","parsePath","hdwallet","deriveIndex","validChecksum","isValidExtendedKey","isPublicExtendedKey","hdwallet_default","FUEL_NETWORK_URL","composeScriptForTransferringToContract","gtf","asm","lw","addr","addi2","tr","contract_id_addr","asset_id_addr","to_bytes","formatScriptDataForTransferringToContract","hexelifiedContractId","amountToTransfer","Account","connect","getResourcesToSpend","pageSize","after","pageCoins","pageMessages","pageBalances","calculateFee","addResourceInputsAndOutputs","destination","txParams","addCoinOutput","sendTransaction","recipientDataArray","amountDataArray","simulate","DEFAULT_KEY_SIZE","removeHexPrefix","encryptKeystoreWallet","privateKeyBuffer","ciphertext","macHashUint8Array","mac","uuidv4","cipher","cipherparams","kdf","kdfparams","decryptKeystoreWallet","jsonWallet","keystoreWallet","ciphertextBuffer","passwordBuffer","macHash","BaseWalletUnlocked","signedMessage","hashedTransaction","signTransaction","signedTransaction","updateWitnessByOwner","populateTransactionWitnessesSignature","__publicField","WalletLocked","WalletUnlocked","generateOptions","derivePath","defaultPath","Wallet","fromSeed","fromMnemonic","fromExtendedKey","fromEncryptedJson"],"sourceRoot":""}