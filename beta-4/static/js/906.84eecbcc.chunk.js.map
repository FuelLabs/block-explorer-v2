{"version":3,"file":"static/js/906.84eecbcc.chunk.js","mappings":"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","sources":["components/Modals/QRModal/components.tsx","components/Modals/QRModal/index.tsx","components/Table/components.tsx","pages/AddressPage/BalancesTable.tsx","pages/AddressPage/TransactionsTable.tsx","pages/AddressPage/__generated__/operations.ts","pages/AddressPage/index.tsx","utils.ts","utils/address.ts","utils/date.ts","utils/transaction.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0 40px 48px;\n  width: 100%;\n  max-width: 432px;\n  border-radius: 6px;\n  box-shadow: 0 0 25px 0 #58c09b;\n  border: solid 1px #58c09c;\n  background-color: #021d17;\n\n  @media screen and (max-width: 425px) {\n    padding: 0 24px 48px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 20px 0;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  text-align: center;\n  color: #f8fefc;\n`;\n\nexport const QRAddress = styled.p`\n  margin: 16px 0 40px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  text-align: center;\n  color: #f8fefc;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const QRCodeContainer = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import QRCode from 'qrcode.react';\nimport { useRef } from 'react';\n\nimport { useOnClickOutside } from '../../../hooks';\nimport { Modal } from '../Base';\n\nimport { Title, Container, QRAddress, QRCodeContainer } from './components';\n\ninterface Props {\n  onClose: () => void;\n  address: string;\n}\n\nexport function QRModal(props: Props) {\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useOnClickOutside(contentRef, onClickOutside);\n\n  function onClickOutside() {\n    props.onClose();\n  }\n\n  return (\n    <Modal>\n      <Container ref={contentRef}>\n        <Title>QR Code</Title>\n        <QRAddress>{props.address}</QRAddress>\n        <QRCodeContainer>\n          <QRCode value={props.address} fgColor=\"#f8fefc\" bgColor=\"#021d17\" />\n        </QRCodeContainer>\n      </Container>\n    </Modal>\n  );\n}\n","import styled from 'styled-components';\n\nimport { StandardSurface } from '../Surface/components';\n\nexport const TableContainer = styled(StandardSurface)`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? '600' : 'normal')};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","// import { useState } from \"react\";\nimport type { CoinQuantity } from 'fuels';\nimport { bn, DECIMAL_UNITS } from 'fuels';\n\nimport * as TableUI from '../../components/Table/components';\nimport { trimAddress } from '../../utils';\n\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from './components';\n\nexport default function BalancesTable({ balances }: { balances: CoinQuantity[] }) {\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Balances</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` balances`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Asset ID</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Amount</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {balances.map((balance) => (\n            <TableUI.TableRow key={balance.assetId}>\n              <TableUI.TableCell>{trimAddress(balance.assetId)}</TableUI.TableCell>\n              <TableUI.TableCell>\n                {bn(balance.amount).format({ precision: DECIMAL_UNITS })}\n              </TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","import * as TableUI from '../../components/Table/components';\nimport { trimAddress } from '../../utils';\nimport { getTransactionRelativeTimeDifference } from '../../utils/transaction';\n\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  TxHash,\n  TxRecipient,\n  TransactionFromAddressWrapper,\n  ContractLinkSkip,\n} from './components';\n\nexport default function TransactionsTable({\n  transactions,\n}: {\n  transactions: AddressPageTransaction[];\n}) {\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Transactions</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` transactions`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Tx Hash</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Type</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Age</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>From</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {transactions.map((transaction) => (\n            <TableUI.TableRow key={transaction.id}>\n              <TableUI.TableCell>\n                <TxHash to={`/transaction/${transaction.id}`}>{transaction.id}</TxHash>\n              </TableUI.TableCell>\n              <TableUI.TableCell>{transaction.isScript ? 'Script' : 'Create'}</TableUI.TableCell>\n              <TableUI.TableCell>\n                {getTransactionRelativeTimeDifference(transaction)}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.inputs?.map((input, idx) =>\n                  (() => {\n                    switch (input.__typename) {\n                      case 'InputCoin': {\n                        return (\n                          <TransactionFromAddressWrapper key={idx}>\n                            <TxRecipient to={`/address/${input.owner}`}>\n                              {trimAddress(input.owner)}\n                            </TxRecipient>\n                          </TransactionFromAddressWrapper>\n                        );\n                      }\n                      case 'InputContract': {\n                        return (\n                          <ContractLinkSkip key={idx} to=\"\">\n                            {trimAddress(input.contract.id)}\n                          </ContractLinkSkip>\n                        );\n                      }\n                      default: {\n                        // @ts-ignore\n                        return input.__typename;\n                      }\n                    }\n                  })()\n                )}\n              </TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n","import type * as Types from '../../../api/__generated__/types.js';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddressPageQueryVariables = Types.Exact<{\n  first?: Types.InputMaybe<Types.Scalars['Int']>;\n  owner: Types.Scalars['Address'];\n}>;\n\n\nexport type AddressPageQuery = { __typename: 'Query', coins: { __typename: 'CoinConnection', edges: Array<{ __typename: 'CoinEdge', node: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, blockCreated: string, txCreatedIdx: string } }> }, transactionsByOwner: { __typename: 'TransactionConnection', edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, gasLimit?: string | null, maturity?: string | null, isScript: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } }> } };\n\nexport type AddressPageCoin = { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, blockCreated: string, txCreatedIdx: string };\n\nexport type AddressPageTransaction = { __typename: 'Transaction', id: string, inputAssetIds?: Array<string> | null, gasPrice?: string | null, gasLimit?: string | null, maturity?: string | null, isScript: boolean, receiptsRoot?: string | null, witnesses?: Array<string> | null, inputContracts?: Array<{ __typename: 'Contract', id: string }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs?: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }> | null, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SqueezedOutStatus' } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const AddressPageCoinFragmentDoc = gql`\n    fragment AddressPageCoin on Coin {\n  utxoId\n  owner\n  amount\n  assetId\n  maturity\n  blockCreated\n  txCreatedIdx\n}\n    `;\nexport const AddressPageTransactionFragmentDoc = gql`\n    fragment AddressPageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      utxoId\n      owner\n      amount\n      assetId\n      witnessIndex\n      maturity\n      predicate\n      predicateData\n    }\n    ... on InputContract {\n      utxoId\n      balanceRoot\n      stateRoot\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const AddressPageQueryDocument = gql`\n    query AddressPageQuery($first: Int, $owner: Address!) {\n  coins(filter: {owner: $owner}, first: 9999) {\n    edges {\n      node {\n        ...AddressPageCoin\n      }\n    }\n  }\n  transactionsByOwner(first: $first, owner: $owner) {\n    edges {\n      node {\n        ...AddressPageTransaction\n      }\n    }\n  }\n}\n    ${AddressPageCoinFragmentDoc}\n${AddressPageTransactionFragmentDoc}`;\n\n/**\n * __useAddressPageQuery__\n *\n * To run a query within a React component, call `useAddressPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddressPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddressPageQuery({\n *   variables: {\n *      first: // value for 'first'\n *      owner: // value for 'owner'\n *   },\n * });\n */\nexport function useAddressPageQuery(baseOptions: Apollo.QueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n      }\nexport function useAddressPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n        }\nexport type AddressPageQueryHookResult = ReturnType<typeof useAddressPageQuery>;\nexport type AddressPageQueryLazyQueryHookResult = ReturnType<typeof useAddressPageQueryLazyQuery>;\nexport type AddressPageQueryQueryResult = Apollo.QueryResult<AddressPageQuery, AddressPageQueryVariables>;","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { CoinQuantity } from 'fuels';\nimport { bn, toBech32 } from 'fuels';\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport { QRModal } from '../../components/Modals/QRModal';\nimport { getB56Address } from '../../utils/address';\nimport { getTransactionDate } from '../../utils/transaction';\n\nimport BalancesTable from './BalancesTable';\nimport TransactionsTable from './TransactionsTable';\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport { useAddressPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  CopyButtonIcon,\n  Tooltip,\n  HeadlineAddress,\n  HeadlineAddressButton,\n  HeadlineAddressContainer,\n  HeadlineAddressHeader,\n  HeadlineContainer,\n  QRButtonIcon,\n} from './components';\n\nexport default function AddressPage() {\n  const params = useParams() as any;\n  const address = getB56Address(params.address);\n  const [copyTooltip] = useState('Copy address');\n  const [modal, setModal] = useState(false);\n  const { loading, data } = useAddressPageQuery({\n    variables: { first: 10, owner: address },\n  });\n  const coins = data?.coins!.edges!.map((edge) => edge!.node);\n  const balances =\n    coins?.reduce<{ [assetId: string]: CoinQuantity }>(\n      (acc, { assetId, amount }) => ({\n        ...acc,\n        [assetId]: {\n          assetId,\n          amount: bn(amount).add(acc[assetId]?.amount),\n        },\n      }),\n      {}\n    ) ?? null;\n  const transactions = useMemo<AddressPageTransaction[]>(\n    () => data?.transactionsByOwner!.edges!.map((edge) => edge!.node) ?? [],\n    [data]\n  );\n  const sortedTransactions = transactions.sort((t1, t2) =>\n    (getTransactionDate(t1)?.getTime() || 0) - (getTransactionDate(t2)?.getTime() || 0) <= 0\n      ? 1\n      : -1\n  );\n\n  const onClose = () => {\n    setModal(false);\n  };\n\n  const showModal = () => {\n    setModal(true);\n  };\n\n  const onClickCopy = () => {\n    navigator.clipboard.writeText(address);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <HeadlineContainer>\n              <HeadlineAddressContainer>\n                <HeadlineAddressHeader>\n                  {`Address:  `}\n                  <div>\n                    <HeadlineAddress>{toBech32(address)}</HeadlineAddress>\n                    <HeadlineAddress>{address}</HeadlineAddress>\n                  </div>\n                </HeadlineAddressHeader>\n              </HeadlineAddressContainer>\n            </HeadlineContainer>\n          </Content>\n        </Container>\n      </>\n    );\n  }\n  return (\n    <>\n      {modal && <QRModal onClose={onClose} address={address} />}\n      <Header />\n      <Container>\n        <Content>\n          <HeadlineContainer>\n            <HeadlineAddressContainer>\n              <HeadlineAddressHeader>\n                {`Address:  `}\n                <div>\n                  <HeadlineAddress>{toBech32(address)}</HeadlineAddress>\n                  <HeadlineAddress>{address}</HeadlineAddress>\n                </div>\n              </HeadlineAddressHeader>\n              <HeadlineAddressButton\n                onClick={() => {\n                  onClickCopy();\n                }}\n              >\n                <CopyButtonIcon />\n                <Tooltip>{copyTooltip}</Tooltip>\n              </HeadlineAddressButton>\n              <HeadlineAddressButton onClick={showModal}>\n                <QRButtonIcon />\n                <Tooltip>Click to copy QR code</Tooltip>\n              </HeadlineAddressButton>\n            </HeadlineAddressContainer>\n          </HeadlineContainer>\n          {balances ? <BalancesTable balances={Object.values(balances)} /> : null}\n          <div style={{ height: 16 }} />\n          <TransactionsTable transactions={sortedTransactions} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n","import { OutputType } from 'fuels';\n\nexport const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n\nexport const getOutputTypeText = (outputType: OutputType) => {\n  switch (outputType) {\n    case OutputType.Change:\n      return 'Change';\n    case OutputType.Coin:\n      return 'Coin';\n    case OutputType.Contract:\n      return 'Contract';\n    case OutputType.ContractCreated:\n      return 'ContractCreated';\n    case OutputType.Variable:\n      return 'Variable';\n    default:\n      return 'Unknown';\n  }\n};\n","import { Address } from 'fuels';\n\nexport const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n\nexport const isValidAddress = (address: string) => {\n  try {\n    return !!Address.fromString(address).toB256();\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const getB56Address = (address: string) => {\n  try {\n    return Address.fromString(address).toB256();\n  } catch (e) {\n    return address;\n  }\n};\n\nexport const getValidTransactionId = (txId: string) => (txId.startsWith('0x') ? txId : '0x');\n","import dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { TAI64 } from 'tai64';\n\ndayjs.extend(relativeTime);\n\ntype DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.days} days ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n\nexport const tai64toDayjs = (tai64Timestamp: string) => {\n  const timestamp = TAI64.fromString(tai64Timestamp, 10).toUnix();\n  return dayjs(timestamp * 1000);\n};\n\nexport const tai64toDate = (tai64Timestamp: string) => tai64toDayjs(tai64Timestamp).toDate();\n\nexport const formatDate = (tai64Timestamp: string) => tai64toDayjs(tai64Timestamp).fromNow();\n\nexport const dateToTai64 = (date: Date) =>\n  TAI64.fromUnix(Math.floor(date.getTime() / 1000)).toString(10);\n","// we will need this kind of info in the fuels-wallet txUtils as well\n\nimport type { BlockTransactionFragment } from '../pages/BlockTransactionsPage/__generated__/operations';\n\nimport { tai64toDate, dateDiff, dateDiffRelative, getTextForRelativeTimeDifference } from './date';\n\nexport function getTransactionDate(transaction: Pick<BlockTransactionFragment, 'status'>) {\n  switch (transaction.status?.__typename) {\n    case 'SubmittedStatus':\n    case 'SuccessStatus':\n    case 'FailureStatus':\n      return tai64toDate(transaction.status?.time);\n    default:\n      return undefined;\n  }\n}\n\nexport function getTransactionDateDiff(transaction: BlockTransactionFragment) {\n  const date = getTransactionDate(transaction);\n\n  return date ? dateDiff(new Date(), date) : undefined;\n}\n\nexport function getTransactionRelativeTimeDifference(\n  transaction: Pick<BlockTransactionFragment, 'status'>\n) {\n  const date = getTransactionDate(transaction);\n\n  return date ? getTextForRelativeTimeDifference(dateDiffRelative(new Date(), date)) : undefined;\n}\n"],"names":["Container","styled","Title","QRAddress","QRCodeContainer","QRModal","props","contentRef","useRef","useOnClickOutside","onClose","ref","address","value","fgColor","bgColor","TableContainer","StandardSurface","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","BalancesTable","balances","length","map","balance","trimAddress","assetId","bn","amount","format","precision","DECIMAL_UNITS","TransactionsTable","transactions","transaction","to","id","isScript","getTransactionRelativeTimeDifference","inputs","input","idx","__typename","owner","contract","defaultOptions","AddressPageCoinFragmentDoc","gql","AddressPageTransactionFragmentDoc","AddressPageQueryDocument","AddressPage","params","useParams","getB56Address","useState","copyTooltip","modal","setModal","baseOptions","options","Apollo","useAddressPageQuery","variables","first","loading","data","coins","edges","edge","node","reduce","acc","add","sortedTransactions","useMemo","transactionsByOwner","sort","t1","t2","getTransactionDate","getTime","Header","toBech32","onClick","navigator","clipboard","writeText","Object","values","style","height","slice","getOutputTypeText","outputType","OutputType","isValidAddress","Address","toB256","e","getValidTransactionId","txId","startsWith","dayjs","relativeTime","dateDiff","date1","date2","seconds","Math","floor","abs","minutes","hours","days","dateDiffRelative","getTextForRelativeTimeDifference","text","push","join","getTextForTimeDifference","tai64toDayjs","tai64Timestamp","timestamp","TAI64","toUnix","tai64toDate","toDate","status","time","getTransactionDateDiff","date","Date","undefined"],"sourceRoot":""}