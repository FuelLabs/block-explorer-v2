{"version":3,"file":"static/js/521.48cb7005.chunk.js","mappings":"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","sources":["components/Modals/QRModal/components.tsx","components/Modals/QRModal/index.tsx","components/Table/components.tsx","pages/AddressPage/BalancesTable.tsx","pages/AddressPage/TransactionsTable.tsx","pages/AddressPage/__generated__/operations.ts","pages/AddressPage/index.tsx","utils/bigNumber.ts","utils/date.ts","../node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts","../node_modules/@ethersproject/units/src.ts/index.ts","../node_modules/@ethersproject/units/src.ts/_version.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0 40px 48px;\n  width: 100%;\n  max-width: 432px;\n  border-radius: 6px;\n  box-shadow: 0 0 25px 0 #58c09b;\n  border: solid 1px #58c09c;\n  background-color: #021d17;\n\n  @media screen and (max-width: 425px) {\n    padding: 0 24px 48px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 20px 0;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  text-align: center;\n  color: #f8fefc;\n`;\n\nexport const QRAddress = styled.p`\n  margin: 16px 0 40px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  text-align: center;\n  color: #f8fefc;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const QRCodeContainer = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import QRCode from 'qrcode.react';\nimport { useRef } from 'react';\n\nimport { useOnClickOutside } from '../../../hooks';\nimport { Modal } from '../Base';\n\nimport { Title, Container, QRAddress, QRCodeContainer } from './components';\n\ninterface Props {\n  onClose: () => void;\n  address: string;\n}\n\nexport function QRModal(props: Props) {\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useOnClickOutside(contentRef, onClickOutside);\n\n  function onClickOutside() {\n    props.onClose();\n  }\n\n  return (\n    <Modal>\n      <Container ref={contentRef}>\n        <Title>QR Code</Title>\n        <QRAddress>{props.address}</QRAddress>\n        <QRCodeContainer>\n          <QRCode value={props.address} fgColor=\"#f8fefc\" bgColor=\"#021d17\" />\n        </QRCodeContainer>\n      </Container>\n    </Modal>\n  );\n}\n","import styled from 'styled-components';\n\nexport const TableContainer = styled.div`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? '600' : 'normal')};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","// import { useState } from \"react\";\nimport type { CoinQuantity } from 'fuels';\n\nimport * as TableUI from '../../components/Table/components';\nimport { parseToFormattedNumber } from '../../utils/bigNumber';\n\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from './components';\n\nexport default function BalancesTable({ balances }: { balances: CoinQuantity[] }) {\n  function trimAddress(address: string) {\n    if (!address) {\n      return '';\n    }\n\n    return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n  }\n\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Balances</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` balances`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Asset ID</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Amount</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {balances.map((balance) => (\n            <TableUI.TableRow key={balance.assetId}>\n              <TableUI.TableCell>{trimAddress(balance.assetId)}</TableUI.TableCell>\n              <TableUI.TableCell>{parseToFormattedNumber(balance.amount)}</TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","// import { useState } from \"react\";\nimport * as TableUI from '../../components/Table/components';\nimport { parseToFormattedNumber } from '../../utils/bigNumber';\nimport { dateDiffRelative, getTextForRelativeTimeDifference } from '../../utils/date';\nimport { UTXOHashOutputSkip } from '../TransactionPage/components';\n\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  TxHash,\n  TxRecipient,\n  TransactionValue,\n  CoinLink,\n  CoinLinkSkip,\n  CopyButtonIcon,\n  Tooltip,\n  HeadlineAddressButton,\n  TransactionFromAddressWrapper,\n  TableHeadlineAddressButton,\n  ContractLinkSkip,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from './components';\n\nexport default function TransactionsTable({\n  transactions,\n}: {\n  transactions: AddressPageTransaction[];\n}) {\n  function trimAddress(address: string) {\n    if (!address) {\n      return '';\n    }\n\n    return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n  }\n\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Transactions</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` transactions`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Tx Hash</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Type</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Age</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>From</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {transactions.map((transaction) => (\n            <TableUI.TableRow key={transaction.id}>\n              <TableUI.TableCell>\n                <TxHash to={`/transaction/${transaction.id}`}>{transaction.id}</TxHash>\n              </TableUI.TableCell>\n              <TableUI.TableCell>{transaction.isScript ? 'Script' : 'Create'}</TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.status ? (\n                  <>\n                    {getTextForRelativeTimeDifference(\n                      dateDiffRelative(new Date(), new Date(transaction.status.time))\n                    )}\n                  </>\n                ) : null}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.inputs.map((input, idx) =>\n                  (() => {\n                    switch (input.__typename) {\n                      case 'InputCoin': {\n                        return (\n                          <TransactionFromAddressWrapper key={idx}>\n                            <TxRecipient to={`/address/${input.owner}`}>\n                              {trimAddress(input.owner)}\n                            </TxRecipient>\n                            <TableHeadlineAddressButton\n                              onClick={() => {\n                                onClickCopy(input.owner);\n                              }}\n                            >\n                              <CopyButtonIcon />\n                              <Tooltip>Copy Address</Tooltip>\n                            </TableHeadlineAddressButton>\n                          </TransactionFromAddressWrapper>\n                        );\n                      }\n                      case 'InputContract': {\n                        return (\n                          <ContractLinkSkip key={idx} to=\"\">\n                            {trimAddress(input.contract.id)}\n                          </ContractLinkSkip>\n                        );\n                      }\n                      default: {\n                        // @ts-ignore\n                        return input.__typename;\n                      }\n                    }\n                  })()\n                )}\n              </TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddressPageQueryVariables = Types.Exact<{\n  first?: Types.InputMaybe<Types.Scalars['Int']>;\n  owner: Types.Scalars['Address'];\n}>;\n\n\nexport type AddressPageQuery = { __typename: 'Query', coins: { __typename: 'CoinConnection', edges: Array<{ __typename: 'CoinEdge', node: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string } }> }, transactionsByOwner: { __typename: 'TransactionConnection', edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } }> } };\n\nexport type AddressPageCoin = { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string };\n\nexport type AddressPageTransaction = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const AddressPageCoinFragmentDoc = gql`\n    fragment AddressPageCoin on Coin {\n  utxoId\n  owner\n  amount\n  assetId\n  maturity\n  status\n  blockCreated\n}\n    `;\nexport const AddressPageTransactionFragmentDoc = gql`\n    fragment AddressPageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on WithdrawalOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      utxoId\n      owner\n      amount\n      assetId\n      witnessIndex\n      maturity\n      predicate\n      predicateData\n    }\n    ... on InputContract {\n      utxoId\n      balanceRoot\n      stateRoot\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const AddressPageQueryDocument = gql`\n    query AddressPageQuery($first: Int, $owner: Address!) {\n  coins(filter: {owner: $owner}, first: 9999) {\n    edges {\n      node {\n        ...AddressPageCoin\n      }\n    }\n  }\n  transactionsByOwner(first: $first, owner: $owner) {\n    edges {\n      node {\n        ...AddressPageTransaction\n      }\n    }\n  }\n}\n    ${AddressPageCoinFragmentDoc}\n${AddressPageTransactionFragmentDoc}`;\n\n/**\n * __useAddressPageQuery__\n *\n * To run a query within a React component, call `useAddressPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddressPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddressPageQuery({\n *   variables: {\n *      first: // value for 'first'\n *      owner: // value for 'owner'\n *   },\n * });\n */\nexport function useAddressPageQuery(baseOptions: Apollo.QueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n      }\nexport function useAddressPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n        }\nexport type AddressPageQueryHookResult = ReturnType<typeof useAddressPageQuery>;\nexport type AddressPageQueryLazyQueryHookResult = ReturnType<typeof useAddressPageQueryLazyQuery>;\nexport type AddressPageQueryQueryResult = Apollo.QueryResult<AddressPageQuery, AddressPageQueryVariables>;","import { BigNumber } from '@ethersproject/bignumber';\nimport type {\n  CoinQuantity,\n  // NativeAssetId\n} from 'fuels';\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport { QRModal } from '../../components/Modals/QRModal';\n\nimport BalancesTable from './BalancesTable';\nimport TransactionsTable from './TransactionsTable';\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport { useAddressPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  CopyButtonIcon,\n  Tooltip,\n  HeadlineAddress,\n  HeadlineAddressButton,\n  HeadlineAddressContainer,\n  HeadlineAddressHeader,\n  HeadlineCoinsContainer,\n  HeadlineContainer,\n  QRButtonIcon,\n  CoinsCounterLabel,\n  CoinsCounter,\n  // TokenDropdownContainer,\n  // TokenButton,\n  // TokenButtonSymbol,\n  // TokenButtonAmount,\n  // TokenButtonSeparator,\n  // TokenButtonIconContainer,\n  // TokenDropdownIcon,\n} from './components';\n\nexport default function AddressPage() {\n  const { address } = useParams() as any;\n  const [copyTooltip] = useState('Copy address');\n  const [modal, setModal] = useState(false);\n  const { loading, data } = useAddressPageQuery({\n    variables: { first: 10, owner: address },\n  });\n  const coins = data?.coins!.edges!.map((edge) => edge!.node);\n  const balances =\n    coins?.reduce<{ [assetId: string]: CoinQuantity }>(\n      (acc, { assetId, amount }) => ({\n        ...acc,\n        [assetId]: {\n          assetId,\n          amount: BigNumber.from(amount).add(acc[assetId]?.amount ?? 0),\n        },\n      }),\n      {}\n    ) ?? null;\n  const transactions = useMemo<AddressPageTransaction[]>(\n    () => data?.transactionsByOwner!.edges!.map((edge) => edge!.node) ?? [],\n    [data]\n  );\n\n  const onClose = () => {\n    setModal(false);\n  };\n\n  const showModal = () => {\n    setModal(true);\n  };\n\n  const onClickCopy = () => {\n    navigator.clipboard.writeText(address);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <HeadlineContainer>\n              <HeadlineAddressContainer>\n                <HeadlineAddressHeader>\n                  {`Address:  `}\n                  <HeadlineAddress>{address}</HeadlineAddress>\n                </HeadlineAddressHeader>\n              </HeadlineAddressContainer>\n            </HeadlineContainer>\n          </Content>\n        </Container>\n      </>\n    );\n  }\n  return (\n    <>\n      {modal && <QRModal onClose={onClose} address={address} />}\n      <Header />\n      <Container>\n        <Content>\n          <HeadlineContainer>\n            <HeadlineAddressContainer>\n              <HeadlineAddressHeader>\n                {`Address:  `}\n                <HeadlineAddress>{address}</HeadlineAddress>\n              </HeadlineAddressHeader>\n              <HeadlineAddressButton\n                onClick={() => {\n                  onClickCopy();\n                }}\n              >\n                <CopyButtonIcon />\n                <Tooltip>{copyTooltip}</Tooltip>\n              </HeadlineAddressButton>\n              <HeadlineAddressButton onClick={showModal}>\n                <QRButtonIcon />\n                <Tooltip>Click to copy QR code</Tooltip>\n              </HeadlineAddressButton>\n            </HeadlineAddressContainer>\n            {/* <HeadlineCoinsContainer>\n              <CoinsCounterLabel>\n                Coins:\n                <CoinsCounter>{coins?.length ?? '...'}</CoinsCounter>\n              </CoinsCounterLabel>\n              <TokenDropdownContainer>\n                <TokenButton>\n                  <TokenButtonSymbol>ETH:</TokenButtonSymbol>\n                  <TokenButtonAmount>\n                    {balances?.[NativeAssetId]?.amount.toString() ?? 0}\n                  </TokenButtonAmount>\n                  <TokenButtonSeparator></TokenButtonSeparator>\n                  <TokenButtonIconContainer>\n                    <TokenDropdownIcon />\n                  </TokenButtonIconContainer>\n                </TokenButton>\n              </TokenDropdownContainer>\n            </HeadlineCoinsContainer> */}\n          </HeadlineContainer>\n          {balances ? <BalancesTable balances={Object.values(balances)} /> : null}\n          <div style={{ height: 16 }} />\n          <TransactionsTable transactions={transactions} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n","import type { BigNumberish } from '@ethersproject/bignumber';\nimport { commify, formatUnits, parseUnits } from '@ethersproject/units';\n\nexport const DECIMAL_UNITS = 9;\nexport const parseToFormattedNumber = (\n  value: string | BigNumberish,\n  unit: BigNumberish = DECIMAL_UNITS\n) => commify(formatUnits(value, unit));\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") { fraction = \"0\"; }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        logger.checkNew(new.target, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value: string | number): string {\n    const comps = String(value).split(\".\");\n\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\n    if (whole === \"\") { whole = \"0\"; }\n\n    let suffix = \"\";\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n\n    return negative + formatted.join(\",\") + suffix;\n}\n\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return formatFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\n    if (typeof(value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return parseFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\nexport function parseEther(ether: string): BigNumber {\n    return parseUnits(ether, 18);\n}\n\n","export const version = \"units/5.6.0\";\n"],"names":["Container","styled","Title","QRAddress","QRCodeContainer","QRModal","props","contentRef","useRef","useOnClickOutside","onClose","ref","address","value","fgColor","bgColor","TableContainer","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","BalancesTable","balances","length","map","balance","assetId","slice","parseToFormattedNumber","amount","TransactionsTable","transactions","trimAddress","transaction","to","id","isScript","status","getTextForRelativeTimeDifference","dateDiffRelative","Date","time","inputs","input","idx","__typename","owner","onClick","navigator","clipboard","writeText","contract","defaultOptions","AddressPageCoinFragmentDoc","gql","AddressPageTransactionFragmentDoc","AddressPageQueryDocument","AddressPage","useParams","useState","copyTooltip","modal","setModal","baseOptions","options","Apollo","useAddressPageQuery","variables","first","loading","data","coins","edges","edge","node","reduce","acc","BigNumber","add","useMemo","transactionsByOwner","Header","Object","values","style","height","DECIMAL_UNITS","unit","commify","formatUnits","dateDiff","date1","date2","seconds","Math","floor","abs","getTime","minutes","hours","days","text","push","join","getTextForTimeDifference","logger","Logger","version","_constructorGuard","Zero","NegativeOne","throwFault","message","fault","operation","params","undefined","throwError","zeros","getMultiplier","decimals","toNumber","e","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","wholeValue","fractionValue","wei","FixedFormat","constructorGuard","signed","width","this","name","String","_multiplier","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","checkNew","_hex","_value","_isFixedNumber","other","_checkFormat","a","b","fromValue","sub","result","from","hasFraction","isNegative","subUnsafe","ONE","toFormat","addUnsafe","factor","bump","BUMP","mulUnsafe","divUnsafe","fromTwos","toTwos","toHexString","hexZeroPad","parseFloat","fromString","isBigNumberish","fixedFormat","numeric","decimal","arrayify","Error","isBytes","fromBytes","error","code","names","suffix","formatted","unshift","index","unitName","indexOf"],"sourceRoot":""}