{"version":3,"file":"static/js/229.a625dbf3.chunk.js","mappings":"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","sources":["components/Table/components.tsx","pages/BlockTransactionsPage/__generated__/operations.ts","components/Link/components.tsx","pages/BlockTransactionsPage/components.tsx","pages/BlockTransactionsPage/index.tsx","utils/address.ts","utils/date.ts"],"sourcesContent":["import styled from 'styled-components';\n\nimport { StandardSurface } from '../Surface/components';\n\nexport const TableContainer = styled(StandardSurface)`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? '600' : 'normal')};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type BlockTransactionsPageQueryVariables = Types.Exact<{\n  height?: Types.InputMaybe<Types.Scalars['U64']>;\n}>;\n\n\nexport type BlockTransactionsPageQuery = { __typename: 'Query', block?: { __typename: 'Block', id: string, height: string, time: string, producer: string, transactions: Array<{ __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'MessageOutput' } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null }> } | null };\n\nexport type BlockTransactionFragment = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'MessageOutput' } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const BlockTransactionFragmentDoc = gql`\n    fragment BlockTransactionFragment on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      owner\n    }\n    ... on InputContract {\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const BlockTransactionsPageQueryDocument = gql`\n    query BlockTransactionsPageQuery($height: U64) {\n  block(height: $height) {\n    id\n    height\n    time\n    producer\n    transactions {\n      ...BlockTransactionFragment\n    }\n  }\n}\n    ${BlockTransactionFragmentDoc}`;\n\n/**\n * __useBlockTransactionsPageQuery__\n *\n * To run a query within a React component, call `useBlockTransactionsPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useBlockTransactionsPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useBlockTransactionsPageQuery({\n *   variables: {\n *      height: // value for 'height'\n *   },\n * });\n */\nexport function useBlockTransactionsPageQuery(baseOptions?: Apollo.QueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n      }\nexport function useBlockTransactionsPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>(BlockTransactionsPageQueryDocument, options);\n        }\nexport type BlockTransactionsPageQueryHookResult = ReturnType<typeof useBlockTransactionsPageQuery>;\nexport type BlockTransactionsPageQueryLazyQueryHookResult = ReturnType<typeof useBlockTransactionsPageQueryLazyQuery>;\nexport type BlockTransactionsPageQueryQueryResult = Apollo.QueryResult<BlockTransactionsPageQuery, BlockTransactionsPageQueryVariables>;","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const GreenLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #58c09b;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n","import styled from 'styled-components';\n\nimport { GreenLink } from '../../components/Link/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 0 0 8px;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  line-height: 30px;\n  color: #f8fefc;\n  white-space: break-spaces;\n`;\n\nexport const Subtitle = styled.span`\n  margin: 0 0 32px;\n  display: block;\n  font-family: SFProText;\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n`;\n\nexport const TxHashLink = styled(GreenLink)`\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n\n  @media screen and (max-width: 425px) {\n    max-width: 124px;\n  }\n`;\n\nexport const TxRecipientLink = styled(GreenLink)`\n  display: block;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const TxValue = styled.span`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const CoinLink = styled(GreenLink)`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n  max-width: 80px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const HeadlineTransactionsNumber = styled.span`\n  color: #f8fefc;\n`;\n","import { BigNumber } from '@ethersproject/bignumber';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport {\n  Table,\n  TableCell,\n  TableCounterText,\n  TableHeadCell,\n  TableHeadlineContainer,\n  TableHeadlinerContentItem,\n  TableHeadlineTitle,\n  TableHeadRow,\n  TableRow,\n  TableWrapper,\n} from '../../components/Table/components';\nimport { trimAddress } from '../../utils/address';\nimport { dateDiffRelative, getTextForRelativeTimeDifference } from '../../utils/date';\nimport {\n  CoinLinkSkip,\n  ContractLinkSkip,\n  CopyButtonIcon,\n  HeadlineAddressButton,\n  TableContainer,\n  TableHeadlineAddressButton,\n  Tooltip,\n  TransactionFromAddressWrapper,\n  TxRecipient,\n} from '../AddressPage/components';\n\nimport type { BlockTransactionFragment } from './__generated__/operations';\nimport { useBlockTransactionsPageQuery } from './__generated__/operations';\nimport {\n  CoinLink,\n  Container,\n  Content,\n  HeadlineTransactionsNumber,\n  Subtitle,\n  Title,\n  TxHashLink,\n  TxRecipientLink,\n  TxValue,\n} from './components';\n\nexport default function BlockTransactionsPage() {\n  const { block } = useParams() as any;\n  const { data } = useBlockTransactionsPageQuery({\n    variables: { height: BigNumber.from(block).toString() },\n  });\n  const bl = data?.block;\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <Title>Transaction list</Title>\n          <Subtitle>{`Block: #${block}`}</Subtitle>\n          <Transactions transactions={bl?.transactions || []} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n\nfunction Transactions({ transactions }: { transactions: BlockTransactionFragment[] }) {\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  return (\n    <TableContainer>\n      <TableHeadlineContainer>\n        <TableHeadlineTitle>Transactions</TableHeadlineTitle>\n        <TableHeadlinerContentItem>\n          <TableCounterText>\n            {`Showing `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` out of `}\n            <HeadlineTransactionsNumber>1</HeadlineTransactionsNumber>\n            {` transactions`}\n          </TableCounterText>\n        </TableHeadlinerContentItem>\n      </TableHeadlineContainer>\n      <TableWrapper>\n        <Table>\n          <thead>\n            <TableHeadRow>\n              <TableHeadCell>Tx Hash</TableHeadCell>\n              <TableHeadCell>Type</TableHeadCell>\n              <TableHeadCell>Age</TableHeadCell>\n              <TableHeadCell>From</TableHeadCell>\n            </TableHeadRow>\n          </thead>\n          <tbody>\n            {transactions.map((transaction) => (\n              <TableRow key={transaction.id}>\n                <TableCell>\n                  <TxHashLink to={`/transaction/${transaction.id}`}>{transaction.id}</TxHashLink>\n                </TableCell>\n                <TableCell>{transaction.isScript ? 'Script' : 'Create'}</TableCell>\n                <TableCell>\n                  {transaction.status ? (\n                    <>\n                      {getTextForRelativeTimeDifference(\n                        dateDiffRelative(new Date(), new Date(transaction.status.time))\n                      )}\n                    </>\n                  ) : null}\n                </TableCell>\n                <TableCell>\n                  {transaction.inputs.map((input, idx) =>\n                    (() => {\n                      switch (input.__typename) {\n                        case 'InputCoin': {\n                          return (\n                            <TransactionFromAddressWrapper key={idx}>\n                              <TxRecipient to={`/address/${input.owner}`}>\n                                {trimAddress(input.owner)}\n                              </TxRecipient>\n                              <TableHeadlineAddressButton\n                                onClick={() => {\n                                  onClickCopy(input.owner);\n                                }}\n                              >\n                                <CopyButtonIcon />\n                                <Tooltip>Copy Address</Tooltip>\n                              </TableHeadlineAddressButton>\n                            </TransactionFromAddressWrapper>\n                          );\n                        }\n                        case 'InputContract': {\n                          return (\n                            <ContractLinkSkip key={idx} to=\"\">\n                              {trimAddress(input.contract.id)}\n                            </ContractLinkSkip>\n                          );\n                        }\n                        default: {\n                          // @ts-ignore\n                          return input.__typename;\n                        }\n                      }\n                    })()\n                  )}\n                </TableCell>\n              </TableRow>\n            ))}\n          </tbody>\n        </Table>\n      </TableWrapper>\n    </TableContainer>\n  );\n}\n","import { Address } from 'fuels';\n\nexport const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n\nexport const isValidAddress = (address: string) => {\n  try {\n    return !!Address.fromString(address).toB256();\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const getB56Address = (address: string) => {\n  try {\n    return Address.fromString(address).toB256();\n  } catch (e) {\n    return address;\n  }\n};\n\nexport const getValidTransactionId = (txId: string) => (txId.startsWith('0x') ? txId : '0x');\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n"],"names":["TableContainer","styled","StandardSurface","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","defaultOptions","BlockTransactionFragmentDoc","gql","BlockTransactionsPageQueryDocument","GreenLink","Link","Container","Content","Title","Subtitle","TxHashLink","HeadlineTransactionsNumber","BlockTransactionsPage","block","useParams","data","baseOptions","options","Apollo","useBlockTransactionsPageQuery","variables","height","BigNumber","toString","bl","Header","Transactions","transactions","map","transaction","to","id","isScript","status","getTextForRelativeTimeDifference","dateDiffRelative","Date","time","inputs","input","idx","__typename","owner","trimAddress","onClick","address","navigator","clipboard","writeText","onClickCopy","contract","slice","length","isValidAddress","Address","toB256","e","getB56Address","getValidTransactionId","txId","startsWith","dateDiff","date1","date2","seconds","Math","floor","abs","getTime","minutes","hours","days","text","push","join","getTextForTimeDifference"],"sourceRoot":""}