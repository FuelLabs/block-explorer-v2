{"version":3,"file":"static/js/716.f5763d34.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/bytes/src.ts/index.ts","../node_modules/@ethersproject/bytes/src.ts/_version.ts","../node_modules/@ethersproject/logger/src.ts/index.ts","../node_modules/@ethersproject/logger/src.ts/_version.ts","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js"],"sourcesContent":["\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type Bytes = ArrayLike<number>;\n\nexport type BytesLike = Bytes | string;\n\nexport type DataOptions = {\n    allowMissingPrefix?: boolean;\n    hexPad?: \"left\" | \"right\" | null;\n};\n\nexport interface Hexable {\n    toHexString(): string;\n}\n\n\n/*\nexport interface HexString {\n    length: number;\n    substring: (start: number, end?: number) => string;\n\n    [index: number]: string;\n}\n*/\n\nexport type SignatureLike  = {\n    r: string;\n    s?: string;\n    _vs?: string,\n    recoveryParam?: number;\n    v?: number;\n} | BytesLike;\n\nexport interface Signature {\n    r: string;\n\n    s: string;\n    _vs: string,\n\n    recoveryParam: number;\n    v: number;\n\n    yParityAndS: string\n    compact: string;\n}\n\n///////////////////////////////\n\n\nfunction isHexable(value: any): value is Hexable {\n    return !!(value.toHexString);\n}\n\nfunction addSlice(array: Uint8Array): Uint8Array {\n    if (array.slice) { return array; }\n\n    array.slice = function() {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    }\n\n    return array;\n}\n\nexport function isBytesLike(value: any): value is BytesLike {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\n\nfunction isInteger(value: number) {\n    return (typeof(value) === \"number\" && value == value && (value % 1) === 0);\n}\n\nexport function isBytes(value: any): value is Bytes {\n    if (value == null) { return false; }\n\n    if (value.constructor === Uint8Array) { return true; }\n    if (typeof(value) === \"string\") { return false; }\n    if (!isInteger(value.length) || value.length < 0) { return false; }\n\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) { return false; }\n    }\n    return true;\n}\n\n\nexport function arrayify(value: BytesLike | Hexable | number, options?: DataOptions): Uint8Array {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) { result.push(0); }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { value = value.toHexString(); }\n\n    if (isHexString(value)) {\n        let hex = (<string>value).substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0\" + hex;\n            } else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n    }\n\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\n\nexport function concat(items: ReadonlyArray<BytesLike>): Uint8Array {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n\n    const result = new Uint8Array(length);\n\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n\n    return addSlice(result);\n}\n\nexport function stripZeros(value: BytesLike): Uint8Array {\n    let result: Uint8Array = arrayify(value);\n\n    if (result.length === 0) { return result; }\n\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) { start++ }\n\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n\n    return result;\n}\n\nexport function zeroPad(value: BytesLike, length: number): Uint8Array {\n    value = arrayify(value);\n\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\n\n\nexport function isHexString(value: any, length?: number): boolean {\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false\n    }\n    if (length && value.length !== 2 + 2 * length) { return false; }\n    return true;\n}\n\nconst HexCharacters: string = \"0123456789abcdef\";\n\nexport function hexlify(value: BytesLike | Hexable | number | bigint, options?: DataOptions): string {\n    if (!options) { options = { }; }\n\n    if (typeof(value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n            if (hex.length % 2) { hex = \"0\" + hex; }\n            return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n    }\n\n    if (typeof(value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) { return (\"0x0\" + value); }\n        return \"0x\" + value;\n    }\n\n    if (options.allowMissingPrefix && typeof(value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n         value = \"0x\" + value;\n    }\n\n    if (isHexable(value)) { return value.toHexString(); }\n\n    if (isHexString(value)) {\n        if ((<string>value).length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + (<string>value).substring(2);\n            } else if (options.hexPad === \"right\") {\n                value += \"0\";\n            } else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return (<string>value).toLowerCase();\n    }\n\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n             let v = value[i];\n             result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data: BytesLike) {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n\n    return (data.length - 2) / 2;\n}\n\nexport function hexDataSlice(data: BytesLike, offset: number, endOffset?: number): string {\n    if (typeof(data) !== \"string\") {\n        data = hexlify(data);\n    } else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data );\n    }\n\n    offset = 2 + 2 * offset;\n\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n\n    return \"0x\" + data.substring(offset);\n}\n\nexport function hexConcat(items: ReadonlyArray<BytesLike>): string {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\n\nexport function hexValue(value: BytesLike | Hexable | number | bigint): string {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") { return \"0x0\"; }\n    return trimmed;\n}\n\nexport function hexStripZeros(value: BytesLike): string {\n    if (typeof(value) !== \"string\") { value = hexlify(value); }\n\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") { offset++; }\n    return \"0x\" + value.substring(offset);\n}\n\nexport function hexZeroPad(value: BytesLike, length: number): string {\n    if (typeof(value) !== \"string\") {\n        value = hexlify(value);\n    } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n\n    return value;\n}\n\nexport function splitSignature(signature: SignatureLike): Signature {\n\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0,\n        yParityAndS: \"0x\",\n        compact: \"0x\"\n    };\n\n    if (isBytesLike(signature)) {\n        let bytes: Uint8Array = arrayify(signature);\n\n        // Get the r, s and v\n        if (bytes.length === 64) {\n            // EIP-2098; pull the v from the top bit of s and clear it\n            result.v = 27 + (bytes[32] >> 7);\n            bytes[32] &= 0x7f;\n\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n\n        } else if (bytes.length === 65) {\n            result.r = hexlify(bytes.slice(0, 32));\n            result.s = hexlify(bytes.slice(32, 64));\n            result.v = bytes[64];\n        } else {\n\n            logger.throwArgumentError(\"invalid signature string\", \"signature\", signature);\n        }\n\n\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            } else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) { bytes[32] |= 0x80; }\n        result._vs = hexlify(bytes.slice(32, 64))\n\n    } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1: 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            } else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            } else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            } else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            } else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        } else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            } else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v :(1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) { vs[0] |= 0x80; }\n        const _vs = hexlify(vs);\n\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        } else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n\n    result.yParityAndS = result._vs;\n    result.compact = result.r + result.yParityAndS.substring(2);\n\n    return result;\n}\n\nexport function joinSignature(signature: SignatureLike): string {\n    signature = splitSignature(signature);\n\n    return hexlify(concat([\n         signature.r,\n         signature.s,\n         (signature.recoveryParam ? \"0x1c\": \"0x1b\")\n    ]));\n}\n\n","export const version = \"bytes/5.7.0\";\n","\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n\n\n    ///////////////////\n    // Interaction Errors\n\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ACTION_REJECTED = \"ACTION_REJECTED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n","export const version = \"logger/5.7.0\";\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}"],"names":["logger","Logger","isHexable","value","toHexString","addSlice","array","slice","args","Array","prototype","call","arguments","Uint8Array","apply","isInteger","isBytes","constructor","length","i","v","arrayify","options","checkSafeUint53","result","unshift","parseInt","String","push","allowMissingPrefix","substring","isHexString","hex","hexPad","throwArgumentError","concat","items","objects","map","item","reduce","accum","offset","object","set","zeroPad","match","HexCharacters","hexlify","Math","floor","toString","toLowerCase","hexDataSlice","data","endOffset","hexZeroPad","_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","_globalLogger","LogLevel","ErrorCode","_normalizeError","missing","forEach","form","normalize","Error","join","fromCharCode","message","_checkNormalize","HEX","version","Object","defineProperty","this","enumerable","writable","logLevel","level","console","log","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","JSON","stringify","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","_createClass","protoProps","staticProps"],"sourceRoot":""}