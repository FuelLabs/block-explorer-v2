{"version":3,"file":"static/js/298.a22e1793.chunk.js","mappings":"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","sources":["pages/CreateTransactionPage/components.tsx","utils.ts","pages/TransactionPage/__generated__/operations.ts","pages/TransactionPage/index.tsx","utils/number.ts","pages/TransactionPage/utils/gas.ts","utils/bigNumber.ts","../node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts","../node_modules/@ethersproject/units/src.ts/index.ts","../node_modules/@ethersproject/units/src.ts/_version.ts"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ButtonReset } from '../../components/Button/components';\nimport { ArrowIcon, FileIcon } from '../../components/Icons';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  align-items: baseline;\n  margin: 0 0 40px;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  line-height: 30px;\n  color: #f8fefc;\n  white-space: break-spaces;\n\n  span:first-of-type {\n    width: 160px;\n  }\n\n  @media screen and (max-width: 425px) {\n    flex-direction: column;\n  }\n`;\n\nexport const TitleTransaction = styled.span`\n  width: calc(100% - 160px);\n  font-family: SFProText;\n  font-size: 17px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  @media screen and (max-width: 425px) {\n    margin: 8px 0 0;\n    width: 100%;\n  }\n`;\n\nexport const TransactionDataContainer = styled.div`\n  margin: 0 0 36px;\n  padding: 16px 32px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.16);\n  border: solid 0.5px #808080;\n  border-radius: 8px;\n\n  @media screen and (max-width: 425px) {\n    padding: 12px 24px;\n  }\n`;\n\nexport const TransactionDataRow = styled.div`\n  padding: 12px 0;\n  display: flex;\n\n  @media screen and (max-width: 500px) {\n    flex-direction: column;\n    padding: 8px 0;\n  }\n`;\n\nexport const RowKeyColumn = styled.div`\n  width: 280px;\n  font-family: SFProText;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    width: 220px;\n  }\n\n  @media screen and (max-width: 500px) {\n    margin: 0 0 4px;\n    width: 100%;\n  }\n`;\n\nexport const RowValueColumn = styled.div`\n  width: calc(100% - 280px);\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    width: calc(100% - 220px);\n  }\n\n  @media screen and (max-width: 500px) {\n    width: 100%;\n  }\n`;\n\nexport const WrapText = styled.span`\n  display: block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nexport const RowValueLink = styled(Link)`\n  display: block;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TransactionStatus = styled.span`\n  padding: 0 12px;\n  border-radius: 10px;\n  background-color: #58c09b;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 20px;\n  color: #021d17;\n`;\n\nexport const BaseLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  color: #58c09b;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const UTXOContainer = styled.div``;\n\nexport const DetailsButtonContainer = styled.div`\n  margin: 0 0 36px;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nexport const DetailsButton = styled(ButtonReset)<{ isActive?: boolean }>`\n  padding: 8px 16px;\n  border-radius: 1px;\n  border: solid 1px #57c09b;\n  background-color: ${({ isActive }) => (isActive ? '#1e2e2b' : '#081C17')};\n  font-family: SFProDisplay;\n  font-size: 10px;\n  font-weight: 500;\n  line-height: 13px;\n  color: #57c09b;\n\n  :hover {\n    background-color: #1e2e2b;\n  }\n\n  :active {\n    background-color: #294842;\n  }\n\n  svg {\n    width: 12px !important;\n    height: 12px !important;\n    margin: 0 0 0 6px;\n  }\n`;\n\nexport const UTXOBoxesContainer = styled.div`\n  display: flex;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const UTXOBoxesColumn = styled.div`\n  max-width: calc((100% - 98px) / 2);\n\n  @media screen and (max-width: 768px) {\n    max-width: 100%;\n  }\n`;\nexport const UTXOSeparatorColumn = styled.div`\n  margin: 0 34px;\n\n  @media screen and (max-width: 768px) {\n    margin: 4px auto 24px;\n  }\n`;\nexport const UTXOBoxContainer = styled.div`\n  margin: 0 0 24px;\n  border: solid 3px #03261e;\n`;\n\nexport const UTXOHeadlineContainer = styled.div`\n  padding: 16px 16px 16px 24px;\n  display: flex;\n  justify-content: space-between;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #f8fefc;\n  background-color: #03261e;\n`;\n\nexport const UTXOHeadlineColumn = styled.div`\n  width: calc(100% - 100px);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const UTXOHeadlineColumn2 = styled.div`\n  width: 100px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-end;\n`;\n\nexport const UTXOTitle = styled.span`\n  margin: 0 0 6px;\n  display: block;\n  font-weight: 600;\n`;\n\nexport const UTXOHash = styled(BaseLink)`\n  display: block;\n  font-size: 13px;\n  line-height: 15px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const HeadlineText = styled.span`\n  display: block;\n`;\n\nexport const UTXODetailsContainer = styled.div`\n  padding: 32px 16px 24px 40px;\n\n  @media screen and (max-width: 425px) {\n    padding: 24px 16px 24px 24px;\n  }\n`;\n\nexport const UTXODetailsRow = styled.div`\n  display: flex;\n  margin: 0 0 16px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #f8fefc;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const UTXODetailsKey = styled.span`\n  flex: 0 0 140px;\n\n  @media screen and (max-width: 425px) {\n    flex: 0 0 120px;\n  }\n`;\n\nexport const UTXODetailsValue = styled.span`\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const UTXODetailsLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  color: #58c09b;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const UTXOSeparatorArrow = styled(ArrowIcon)`\n  margin: 24px 0 0;\n  width: 26px !important;\n  height: 26px !important;\n  color: #58c09b;\n\n  @media screen and (max-width: 768px) {\n    margin: 0;\n    transform: rotate(90deg);\n  }\n`;\n\nexport const ScriptsContainer = styled.div`\n  margin: 12px 0 0;\n`;\n\nexport const ScriptTitle = styled.span`\n  display: block;\n  margin: 0 0 28px;\n  font-family: SFProText;\n  font-size: 18px;\n  font-weight: 600;\n  line-height: 21px;\n  color: #f8fefc;\n`;\n\nexport const ScriptContainer = styled.div`\n  margin: 0 0 36px;\n  max-width: 442px;\n  border: solid 1px #1e2e2b;\n`;\n\nexport const ScriptTabsContainer = styled.div`\n  display: flex;\n`;\n\nexport const ScriptTabButton = styled(ButtonReset)<{ isSelected?: boolean }>`\n  flex: 1 1 0;\n  padding: 12px 0;\n  justify-content: center;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 500;\n  color: ${({ isSelected }) => (isSelected ? '#eafff8' : '#808080')};\n  transition: 0.2s ease-out;\n  border-bottom: ${({ isSelected }) =>\n    isSelected ? 'solid 1px #f9fefc' : 'solid 1px rgba(0, 0, 0, 0)'};\n  text-shadow: ${({ isSelected }) => (isSelected ? '0 0 6px #e9fff8' : 'none')};\n\n  :hover {\n    text-shadow: 0 0 6px #f9fefc;\n    color: #f8fefc;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #e9fff8;\n    color: #eafff8;\n  }\n`;\n\nexport const ScriptPlaceholder = styled.div`\n  height: 236px;\n  background-color: #1e2e2b;\n`;\n\nexport const Witnesses = styled.div``;\n\nexport const WitnessContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin: 0 0 2px;\n`;\n\nexport const WitnessIndex = styled.span`\n  flex-shrink: 0;\n  width: 24px;\n  text-align: center;\n`;\n\nexport const WitnessIconContainer = styled.div`\n  flex-shrink: 0;\n  margin: 0 6px;\n  width: 14px;\n  height: 14px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 7px;\n  background-color: #1e2e2b;\n`;\n\nexport const WitnessIcon = styled(FileIcon)`\n  width: 8px !important;\n  width: 8px !important;\n  color: #f8fefc;\n`;\n\nexport const WitnessAddress = styled.span`\n  flex: 1 1 0;\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n","export const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type TransactionPageQueryVariables = Types.Exact<{\n  id: Types.Scalars['TransactionId'];\n}>;\n\n\nexport type TransactionPageQuery = { __typename: 'Query', transaction?: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, script?: string | null, scriptData?: string | null, witnesses: Array<string>, bytecodeWitnessIndex?: number | null, bytePrice: string, rawPayload: string, inputContracts: Array<{ __typename: 'Contract', id: string, bytecode: string }>, staticContracts?: Array<{ __typename: 'Contract', id: string, bytecode: string }> | null, receipts?: Array<{ __typename: 'Receipt', gasUsed?: string | null }> | null, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } | null };\n\nexport type InputFragment_InputCoin_ = { __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string };\n\nexport type InputFragment_InputContract_ = { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } };\n\nexport type InputFragment = InputFragment_InputCoin_ | InputFragment_InputContract_;\n\nexport type OutputFragment_ChangeOutput_ = { __typename: 'ChangeOutput', to: string, amount: string, assetId: string };\n\nexport type OutputFragment_CoinOutput_ = { __typename: 'CoinOutput', to: string, amount: string, assetId: string };\n\nexport type OutputFragment_ContractCreated_ = { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } };\n\nexport type OutputFragment_ContractOutput_ = { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string };\n\nexport type OutputFragment_VariableOutput_ = { __typename: 'VariableOutput', to: string, amount: string, assetId: string };\n\nexport type OutputFragment_WithdrawalOutput_ = { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string };\n\nexport type OutputFragment = OutputFragment_ChangeOutput_ | OutputFragment_CoinOutput_ | OutputFragment_ContractCreated_ | OutputFragment_ContractOutput_ | OutputFragment_VariableOutput_ | OutputFragment_WithdrawalOutput_;\n\nexport const InputFragmentDoc = gql`\n    fragment InputFragment on Input {\n  ... on InputCoin {\n    utxoId\n    owner\n    amount\n    assetId\n    witnessIndex\n    maturity\n    predicate\n    predicateData\n  }\n  ... on InputContract {\n    utxoId\n    balanceRoot\n    stateRoot\n    contract {\n      id\n    }\n  }\n}\n    `;\nexport const OutputFragmentDoc = gql`\n    fragment OutputFragment on Output {\n  ... on CoinOutput {\n    to\n    amount\n    assetId\n  }\n  ... on ContractOutput {\n    inputIndex\n    balanceRoot\n    stateRoot\n  }\n  ... on WithdrawalOutput {\n    to\n    amount\n    assetId\n  }\n  ... on ChangeOutput {\n    to\n    amount\n    assetId\n  }\n  ... on VariableOutput {\n    to\n    amount\n    assetId\n  }\n  ... on ContractCreated {\n    contract {\n      id\n    }\n  }\n}\n    `;\nexport const TransactionPageQueryDocument = gql`\n    query TransactionPageQuery($id: TransactionId!) {\n  transaction(id: $id) {\n    id\n    inputContracts {\n      id\n      bytecode\n    }\n    staticContracts {\n      id\n      bytecode\n    }\n    inputAssetIds\n    gasPrice\n    gasLimit\n    maturity\n    isScript\n    receiptsRoot\n    script\n    scriptData\n    witnesses\n    bytecodeWitnessIndex\n    bytePrice\n    rawPayload\n    receipts {\n      gasUsed\n    }\n    outputs {\n      ...OutputFragment\n    }\n    inputs {\n      ...InputFragment\n    }\n    status {\n      ... on SubmittedStatus {\n        time\n      }\n      ... on SuccessStatus {\n        time\n      }\n      ... on FailureStatus {\n        time\n      }\n    }\n  }\n}\n    ${OutputFragmentDoc}\n${InputFragmentDoc}`;\n\n/**\n * __useTransactionPageQuery__\n *\n * To run a query within a React component, call `useTransactionPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionPageQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTransactionPageQuery(baseOptions: Apollo.QueryHookOptions<TransactionPageQuery, TransactionPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<TransactionPageQuery, TransactionPageQueryVariables>(TransactionPageQueryDocument, options);\n      }\nexport function useTransactionPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionPageQuery, TransactionPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<TransactionPageQuery, TransactionPageQueryVariables>(TransactionPageQueryDocument, options);\n        }\nexport type TransactionPageQueryHookResult = ReturnType<typeof useTransactionPageQuery>;\nexport type TransactionPageQueryLazyQueryHookResult = ReturnType<typeof useTransactionPageQueryLazyQuery>;\nexport type TransactionPageQueryQueryResult = Apollo.QueryResult<TransactionPageQuery, TransactionPageQueryVariables>;","import { formatUnits } from '@ethersproject/units';\nimport { useContext, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport { ExpandIcon, ShrinkIcon } from '../../components/Icons';\nimport { BASE_COIN_NAME } from '../../constants';\nimport { ChainContext } from '../../contexts/network';\nimport { trimAddress } from '../../utils';\nimport { DECIMAL_UNITS, parseToFormattedNumber } from '../../utils/bigNumber';\nimport { toPlainString } from '../../utils/number';\nimport { CopyButtonIcon, TableHeadlineAddressButton, Tooltip } from '../AddressPage/components';\nimport { UTXODetailsValue } from '../CreateTransactionPage/components';\n\nimport type { InputFragment, OutputFragment } from './__generated__/operations';\nimport { useTransactionPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  RowKeyColumn,\n  RowValueColumn,\n  Title,\n  TitleTransaction,\n  TransactionDataContainer,\n  TransactionDataRow,\n  TransactionStatus,\n  UTXOContainer,\n  DetailsButtonContainer,\n  DetailsButton,\n  UTXOBoxesContainer,\n  UTXOBoxesColumn,\n  UTXOBoxContainer,\n  UTXOHeadlineContainer,\n  UTXOHeadlineColumn,\n  UTXOTitle,\n  UTXOHash,\n  HeadlineText,\n  UTXODetailsContainer,\n  UTXODetailsRow,\n  UTXODetailsKey,\n  UTXODetailsLink,\n  UTXOSeparatorColumn,\n  UTXOSeparatorArrow,\n  ScriptsContainer,\n  ScriptTitle,\n  ScriptContainer,\n  ScriptTabsContainer,\n  ScriptTabButton,\n  ScriptTextarea,\n  UTXOHeadlineColumn2,\n  ContractTextarea,\n  UTXOHashOutputSkip,\n} from './components';\nimport { calculateTransactionFee } from './utils/gas';\n\nexport default function TransactionPage() {\n  const { transaction } = useParams() as any;\n  const { data } = useTransactionPageQuery({ variables: { id: transaction } });\n  const tx = data?.transaction;\n  const { chains } = useContext(ChainContext);\n\n  if (!tx) return null;\n\n  const lastReceipt = tx.receipts?.[tx.receipts.length - 1];\n  const gasPriceFactor = +(chains[0].consensusParameters?.gasPriceFactor || 1);\n  const transactionFee = calculateTransactionFee({\n    bytePrice: +tx.bytePrice,\n    rawPayload: tx.rawPayload,\n    witnesses: tx.witnesses,\n    gasPriceFactor,\n    gasPrice: +tx.gasPrice,\n    gasUsed: +(lastReceipt?.gasUsed || 0),\n  });\n\n  const gasPriceDecimal = +formatUnits(tx.gasPrice, DECIMAL_UNITS);\n  const gasPriceInEth = gasPriceDecimal / gasPriceFactor;\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <Title>\n            <span>Transaction:</span>\n            <TitleTransaction>{transaction}</TitleTransaction>\n          </Title>\n          <TransactionDataContainer>\n            <TransactionDataRow>\n              <RowKeyColumn>Type:</RowKeyColumn>\n              <RowValueColumn>{tx.isScript ? 'Script' : 'Create'}</RowValueColumn>\n            </TransactionDataRow>\n            {tx.status ? (\n              <TransactionDataRow>\n                <RowKeyColumn>Status:</RowKeyColumn>\n                <TransactionStatus>{tx.status.__typename.replace('Status', '')}</TransactionStatus>\n              </TransactionDataRow>\n            ) : null}\n            {/* <TransactionDataRow>\n              <RowKeyColumn>Maturity:</RowKeyColumn>\n              <RowValueColumn>{tx.maturity}</RowValueColumn>\n            </TransactionDataRow> */}\n            <TransactionDataRow>\n              <RowKeyColumn>Gas Price:</RowKeyColumn>\n              <RowValueColumn>\n                {toPlainString(gasPriceInEth)} {BASE_COIN_NAME}\n              </RowValueColumn>\n            </TransactionDataRow>\n            <TransactionDataRow>\n              <RowKeyColumn>Gas Limit:</RowKeyColumn>\n              <RowValueColumn>{tx.gasLimit}</RowValueColumn>\n            </TransactionDataRow>\n            <TransactionDataRow>\n              <RowKeyColumn>Gas Used:</RowKeyColumn>\n              <RowValueColumn>{lastReceipt?.gasUsed}</RowValueColumn>\n            </TransactionDataRow>\n            <TransactionDataRow>\n              <RowKeyColumn>Transaction fee:</RowKeyColumn>\n              <RowValueColumn>\n                {parseToFormattedNumber(transactionFee)} {BASE_COIN_NAME}\n              </RowValueColumn>\n            </TransactionDataRow>\n          </TransactionDataContainer>\n          <UTXOComponent outputs={tx.outputs || []} inputs={tx.inputs || []} />\n          {tx.isScript ? <ScriptsComponent tx={tx} /> : <ContractComponent tx={tx} />}\n        </Content>\n      </Container>\n    </>\n  );\n}\n\nfunction ContractComponent({ tx }: { tx: any }) {\n  return tx.witnesses.map((witness: string, index: number) => (\n    <UTXOBoxContainer>\n      <UTXOHeadlineContainer>\n        <UTXOHeadlineColumn>\n          <UTXOTitle>Witness #{index}</UTXOTitle>\n        </UTXOHeadlineColumn>\n      </UTXOHeadlineContainer>\n      <UTXODetailsContainer>\n        <ContractTextarea readOnly value={witness} />\n      </UTXODetailsContainer>\n    </UTXOBoxContainer>\n  ));\n}\n\nfunction ScriptsComponent({ tx }: { tx: any }) {\n  return (\n    <ScriptsContainer>\n      <ScriptTitle>Script Byte Code:</ScriptTitle>\n      {/* <ScriptComponent tabs={['Assembly', 'Hex']} contents={['', tx.script]} /> */}\n      <ScriptComponent tabs={['Hex']} contents={[tx.script]} />\n      <ScriptTitle>Script Data:</ScriptTitle>\n      {/* <ScriptComponent tabs={['ABI Decoded', 'Raw Hex']} contents={['', tx.scriptData]} /> */}\n      <ScriptComponent tabs={['Raw Hex']} contents={[tx.scriptData]} />\n    </ScriptsContainer>\n  );\n}\n\nfunction ScriptComponent({ tabs, contents }: { tabs: string[]; contents: string[] }) {\n  const [selectedTab, setSelectedTab] = useState(0);\n\n  return (\n    <ScriptContainer>\n      <ScriptTabsContainer>\n        {tabs.map((tabItem, idx) => (\n          <ScriptTabButton\n            key={idx}\n            isSelected={selectedTab === idx}\n            onClick={() => {\n              setSelectedTab(idx);\n            }}\n          >\n            {tabItem}\n          </ScriptTabButton>\n        ))}\n      </ScriptTabsContainer>\n      <ScriptTextarea readOnly value={contents[selectedTab]} />\n    </ScriptContainer>\n  );\n}\n\nfunction UTXOComponent({\n  inputs,\n  outputs,\n}: {\n  inputs: InputFragment[];\n  outputs: OutputFragment[];\n}) {\n  const [expanded, setExpanded] = useState(false);\n\n  const onClickDetails = () => {\n    setExpanded((prevExpanded) => !prevExpanded);\n  };\n\n  if (!outputs.length) return null;\n\n  return (\n    <UTXOContainer>\n      <DetailsButtonContainer>\n        <DetailsButton onClick={onClickDetails} isActive={expanded}>\n          DETAILS\n          {expanded ? <ShrinkIcon /> : <ExpandIcon />}\n        </DetailsButton>\n      </DetailsButtonContainer>\n      <UTXOBoxesContainer>\n        <UTXOBoxesColumn>\n          {inputs.map((input, idx) => (\n            <UTXOInputBox key={idx} idx={idx} input={input} expanded={expanded} />\n          ))}\n        </UTXOBoxesColumn>\n        <UTXOSeparatorColumn>\n          <UTXOSeparatorArrow />\n        </UTXOSeparatorColumn>\n        <UTXOBoxesColumn>\n          {outputs.map((output, idx) => (\n            <UTXOOutputBox key={idx} index={idx} output={output} expanded={expanded} />\n          ))}\n        </UTXOBoxesColumn>\n      </UTXOBoxesContainer>\n    </UTXOContainer>\n  );\n}\n\nfunction UTXOInputBox({\n  input,\n  expanded,\n  idx,\n}: {\n  input: InputFragment;\n  expanded: boolean;\n  idx: number;\n}) {\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  switch (input.__typename) {\n    case 'InputCoin': {\n      return (\n        <UTXOBoxContainer>\n          <UTXOHeadlineContainer>\n            <UTXOHeadlineColumn>\n              <UTXOTitle>{`Input #${idx}`}</UTXOTitle>\n              <UTXOHashOutputSkip to=\"\">{input.utxoId}</UTXOHashOutputSkip>\n            </UTXOHeadlineColumn>\n            <UTXOHeadlineColumn2>\n              <HeadlineText>Value</HeadlineText>\n              <HeadlineText>{parseToFormattedNumber(input.amount)}</HeadlineText>\n            </UTXOHeadlineColumn2>\n          </UTXOHeadlineContainer>\n          {expanded && (\n            <UTXODetailsContainer>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Owner:</UTXODetailsKey>\n                <UTXODetailsLink to={`/address/${input.owner}`}>\n                  {trimAddress(input.owner)}\n                </UTXODetailsLink>\n                <TableHeadlineAddressButton\n                  onClick={() => {\n                    onClickCopy(input.owner);\n                  }}\n                >\n                  <CopyButtonIcon />\n                  <Tooltip>Copy Address</Tooltip>\n                </TableHeadlineAddressButton>\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Amount:</UTXODetailsKey>\n                {parseToFormattedNumber(input.amount)}\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Asset ID:</UTXODetailsKey>\n                <UTXOHashOutputSkip to=\"\">{trimAddress(input.assetId)}</UTXOHashOutputSkip>\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Predicate bytecode:</UTXODetailsKey>\n                {input.predicate}\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Predicate data:</UTXODetailsKey>\n                {input.predicateData}\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Predicate length:</UTXODetailsKey>\n                {0}\n                {/* {TBD} */}\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Witness Index:</UTXODetailsKey>\n                {input.witnessIndex}\n              </UTXODetailsRow>\n            </UTXODetailsContainer>\n          )}\n        </UTXOBoxContainer>\n      );\n    }\n    case 'InputContract': {\n      return (\n        <UTXOBoxContainer>\n          <UTXOHeadlineContainer>\n            <UTXOHeadlineColumn>\n              <UTXOTitle>{`Input #${idx}`}</UTXOTitle>\n              <UTXOHashOutputSkip to=\"\">{input.utxoId}</UTXOHashOutputSkip>\n            </UTXOHeadlineColumn>\n          </UTXOHeadlineContainer>\n          {expanded && (\n            <UTXODetailsContainer>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Contract Id:</UTXODetailsKey>\n                <UTXOHashOutputSkip to=\"\">{trimAddress(input.contract.id)}</UTXOHashOutputSkip>\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>Balance Root:</UTXODetailsKey>\n                <UTXODetailsValue>{trimAddress(input.balanceRoot)}</UTXODetailsValue>\n              </UTXODetailsRow>\n              <UTXODetailsRow>\n                <UTXODetailsKey>State Root:</UTXODetailsKey>\n                <UTXODetailsValue>{trimAddress(input.stateRoot)}</UTXODetailsValue>\n              </UTXODetailsRow>\n            </UTXODetailsContainer>\n          )}\n        </UTXOBoxContainer>\n      );\n    }\n    default:\n      return null;\n  }\n}\n\nfunction UTXOOutput({ output }: { output: OutputFragment }) {\n  const onClickCopy = (address: string) => {\n    navigator.clipboard.writeText(address);\n  };\n\n  switch (output.__typename) {\n    case 'ContractCreated': {\n      return (\n        <UTXODetailsRow>\n          <UTXODetailsKey>Contract Id:</UTXODetailsKey>\n          <UTXOHashOutputSkip to=\"\">{output.contract.id}</UTXOHashOutputSkip>\n        </UTXODetailsRow>\n      );\n    }\n    case 'ContractOutput': {\n      return (\n        <>\n          <UTXODetailsRow>\n            <UTXODetailsKey>Balance Root:</UTXODetailsKey>\n            <UTXODetailsValue>{trimAddress(output.balanceRoot)}</UTXODetailsValue>\n          </UTXODetailsRow>\n          <UTXODetailsRow>\n            <UTXODetailsKey>State Root:</UTXODetailsKey>\n            <UTXODetailsValue>{trimAddress(output.stateRoot)}</UTXODetailsValue>\n          </UTXODetailsRow>\n          <UTXODetailsRow>\n            <UTXODetailsKey>Input index:</UTXODetailsKey>\n            <UTXODetailsValue>{output.inputIndex}</UTXODetailsValue>\n          </UTXODetailsRow>\n        </>\n      );\n    }\n    case 'CoinOutput':\n    case 'ChangeOutput': {\n      return (\n        <>\n          <UTXODetailsRow>\n            <UTXODetailsKey>To:</UTXODetailsKey>\n            <UTXODetailsLink to={`/address/${output.to}`}>{trimAddress(output.to)}</UTXODetailsLink>\n            <TableHeadlineAddressButton\n              onClick={() => {\n                onClickCopy(output.to);\n              }}\n            >\n              <CopyButtonIcon />\n              <Tooltip>Copy Address</Tooltip>\n            </TableHeadlineAddressButton>\n          </UTXODetailsRow>\n          <UTXODetailsRow>\n            <UTXODetailsKey>Amount:</UTXODetailsKey>\n            <UTXODetailsValue>{parseToFormattedNumber(output.amount)}</UTXODetailsValue>\n          </UTXODetailsRow>\n          <UTXODetailsRow>\n            <UTXODetailsKey>Asset ID:</UTXODetailsKey>\n            <UTXOHashOutputSkip to=\"\">{trimAddress(output.assetId)}</UTXOHashOutputSkip>\n          </UTXODetailsRow>\n        </>\n      );\n    }\n    default:\n      return null;\n  }\n}\n\nfunction UTXOOutputBox({\n  output,\n  expanded,\n  index,\n}: {\n  output: OutputFragment;\n  expanded: boolean;\n  index: number;\n}) {\n  return (\n    <UTXOBoxContainer>\n      <UTXOHeadlineContainer>\n        <UTXOHeadlineColumn>\n          <UTXOTitle>Output #{index}</UTXOTitle>\n          <UTXOHashOutputSkip to=\"\">{output.__typename}</UTXOHashOutputSkip>\n        </UTXOHeadlineColumn>\n        {output.__typename === 'CoinOutput' && (\n          <UTXOHeadlineColumn2>\n            <HeadlineText>Amount</HeadlineText>\n            <HeadlineText>{parseToFormattedNumber(output.amount)}</HeadlineText>\n          </UTXOHeadlineColumn2>\n        )}\n      </UTXOHeadlineContainer>\n      {expanded && (\n        <UTXODetailsContainer>\n          <UTXOOutput output={output} />\n        </UTXODetailsContainer>\n      )}\n    </UTXOBoxContainer>\n  );\n}\n","// convert to string AVOIDING to show exponential notations\nexport const toPlainString = (value: number) =>\n  `${+value}`.replace(/(-?)(\\d*)\\.?(\\d*)e([+-]\\d+)/, (a, b, c, d, e) =>\n    e < 0\n      ? `${b}0.${Array(1 - e - c.length).join('0')}${c}${d}`\n      : b + c + d + Array(e - d.length + 1).join('0')\n  );\n","import { arrayify } from '@ethersproject/bytes';\n\nexport type CalculateGasUsedParams = {\n  bytePrice: number;\n  rawPayload: string;\n  witnesses: string[];\n  gasPriceFactor: number;\n  gasPrice: number;\n  gasUsed: number;\n};\n\nexport const calculateTransactionFee = ({\n  bytePrice,\n  rawPayload,\n  witnesses,\n  gasPriceFactor,\n  gasPrice,\n  gasUsed,\n}: CalculateGasUsedParams) => {\n  const processedByte =\n    bytePrice *\n    (arrayify(rawPayload).length - witnesses.reduce((t, w) => t + arrayify(w).length, 0));\n  const gasUsedAmount = gasPrice * gasUsed;\n\n  return Math.ceil(processedByte / gasPriceFactor) + Math.ceil(gasUsedAmount / gasPriceFactor);\n};\n","import type { BigNumberish } from '@ethersproject/bignumber';\nimport { commify, formatUnits, parseUnits } from '@ethersproject/units';\n\nexport const DECIMAL_UNITS = 9;\nexport const parseToFormattedNumber = (\n  value: string | BigNumberish,\n  unit: BigNumberish = DECIMAL_UNITS\n) => commify(formatUnits(value, unit));\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") { fraction = \"0\"; }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        logger.checkNew(new.target, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value: string | number): string {\n    const comps = String(value).split(\".\");\n\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\n    if (whole === \"\") { whole = \"0\"; }\n\n    let suffix = \"\";\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n\n    return negative + formatted.join(\",\") + suffix;\n}\n\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return formatFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\n    if (typeof(value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return parseFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\nexport function parseEther(ether: string): BigNumber {\n    return parseUnits(ether, 18);\n}\n\n","export const version = \"units/5.6.0\";\n"],"names":["Container","styled","Content","Title","TitleTransaction","TransactionDataContainer","TransactionDataRow","RowKeyColumn","RowValueColumn","WrapText","RowValueLink","Link","BaseLink","UTXOContainer","DetailsButtonContainer","DetailsButton","ButtonReset","isActive","UTXOBoxesContainer","UTXOBoxesColumn","UTXOSeparatorColumn","UTXOBoxContainer","UTXOHeadlineContainer","UTXOHeadlineColumn","UTXOTitle","UTXOHash","UTXODetailsContainer","UTXODetailsRow","UTXODetailsKey","UTXODetailsValue","UTXODetailsLink","UTXOSeparatorArrow","ArrowIcon","WitnessContainer","isSelected","WitnessIndex","WitnessIconContainer","WitnessIcon","FileIcon","WitnessAddress","trimAddress","address","slice","length","defaultOptions","InputFragmentDoc","gql","OutputFragmentDoc","TransactionPageQueryDocument","TransactionPage","transaction","useParams","data","baseOptions","options","Apollo","useTransactionPageQuery","variables","id","tx","chains","useContext","ChainContext","value","lastReceipt","receipts","gasPriceFactor","consensusParameters","transactionFee","bytePrice","rawPayload","witnesses","gasPrice","gasUsed","processedByte","arrayify","reduce","t","w","gasUsedAmount","Math","ceil","calculateTransactionFee","gasPriceInEth","formatUnits","DECIMAL_UNITS","Header","isScript","status","__typename","replace","a","b","c","d","e","Array","join","BASE_COIN_NAME","gasLimit","parseToFormattedNumber","UTXOComponent","outputs","inputs","ScriptsComponent","ContractComponent","map","witness","index","readOnly","ScriptComponent","tabs","contents","script","scriptData","useState","selectedTab","setSelectedTab","tabItem","idx","onClick","expanded","setExpanded","prevExpanded","input","UTXOInputBox","output","UTXOOutputBox","to","utxoId","amount","owner","navigator","clipboard","writeText","assetId","predicate","predicateData","witnessIndex","contract","balanceRoot","stateRoot","UTXOOutput","inputIndex","unit","commify","logger","Logger","version","_constructorGuard","Zero","BigNumber","NegativeOne","throwFault","message","fault","operation","params","undefined","throwError","zeros","getMultiplier","decimals","toNumber","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","wholeValue","fractionValue","wei","add","FixedFormat","constructorGuard","signed","width","this","name","String","_multiplier","Object","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","checkNew","_hex","_value","_isFixedNumber","other","_checkFormat","fromValue","sub","push","result","from","hasFraction","isNegative","subUnsafe","ONE","toFormat","addUnsafe","factor","bump","BUMP","mulUnsafe","floor","divUnsafe","fromTwos","toTwos","toHexString","hexZeroPad","parseFloat","fromString","isBigNumberish","fixedFormat","numeric","decimal","Error","isBytes","fromBytes","error","code","names","suffix","formatted","unshift","unitName","indexOf"],"sourceRoot":""}