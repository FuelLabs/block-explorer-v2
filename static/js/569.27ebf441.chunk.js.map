{"version":3,"file":"static/js/569.27ebf441.chunk.js","mappings":"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","sources":["components/Input/components.tsx","pages/HomePage/components.tsx","pages/HomePage/RecentBlocks.tsx","pages/HomePage/RecentTransactions.tsx","pages/HomePage/__generated__/operations.ts","pages/HomePage/index.tsx","utils/date.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const InputReset = styled.input`\n  background-color: rgba(0, 0, 0, 0);\n  border: none;\n  color: #d1d4d7;\n  font-family: SFProDisplay;\n\n  ::placeholder {\n    color: #808080;\n    opacity: 1;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { SearchIcon as SearchSvg } from '../../components/Icons';\nimport { InputReset } from '../../components/Input/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px 0;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 700px;\n`;\n\nexport const Input = styled(InputReset)`\n  height: 40px;\n  width: 100%;\n  padding: 0 12px;\n  border: solid 1px #808080;\n  background-color: #192f2b;\n  outline: none;\n  font-size: 18px;\n  font-weight: 500;\n\n  :hover {\n    border: solid 1px #f9fefc;\n  }\n\n  :focus {\n    box-shadow: 0 0 2px 0 #58c09b;\n    border: solid 1px #58c09b;\n  }\n\n  @media screen and (max-width: 425px) {\n    font-size: 16px;\n  }\n`;\n\nexport const SearchIcon = styled(SearchSvg)`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 8px;\n`;\n\nexport const DataContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 48px 0;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const DataItem = styled.div`\n  width: 48%;\n\n  @media screen and (max-width: 768px) {\n    width: 100%;\n\n    :first-of-type {\n      margin: 0 0 32px;\n    }\n  }\n`;\n\nexport const DataTitle = styled.h2`\n  margin: 0 0 16px;\n  font-family: SFProDisplay;\n  font-size: 21px;\n  font-weight: 600;\n  color: #eafff8;\n`;\n\nexport const DataBox = styled.div`\n  border-radius: 12px;\n  border: solid 1px #808080;\n`;\n\nexport const DataBoxRow = styled.div`\n  display: flex;\n  border-bottom: solid 1px #21302d;\n\n  :last-of-type {\n    border-bottom: none;\n  }\n`;\n\nexport const RecentBlockRow = styled(DataBoxRow)`\n  padding: 22px 24px;\n`;\n\nexport const TransactionsDataBoxRow = styled(DataBoxRow)`\n  padding: 22px 24px 22px 0;\n\n  @media screen and (max-width: 1000px) {\n    flex-direction: column;\n  }\n`;\n\nexport const DataBoxColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DataTimestamp = styled.span`\n  font-family: SFProText;\n  font-size: 10px;\n  font-weight: 500;\n  font-style: normal;\n  color: #808080;\n`;\n\nexport const ProducerRow = styled.div`\n  display: flex;\n`;\n\nexport const DataLabel = styled.span`\n  display: flex;\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #808080;\n  white-space: pre;\n`;\n\nexport const BlockProducerText = styled.span`\n  display: flex;\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #808080;\n  white-space: pre;\n  max-width: 204px;\n`;\n\nexport const BaseLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const ProducerAddress = styled(BaseLink)`\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const BlockNumber = styled(Link)`\n  margin: 0 0 2px 0;\n  font-family: SFProText;\n  font-size: 21px;\n  line-height: 24px;\n  font-weight: normal;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TxCount = styled(BaseLink)``;\n\nexport const TxType = styled.span`\n  padding: 2px 8px;\n  margin: 4px 0 0;\n  height: 20px;\n  border-radius: 10px;\n  background-color: #f9fefc;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  color: #021d17;\n`;\n\nexport const TransactionAddress = styled(Link)`\n  display: block;\n  margin: 0 0 4px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n  text-overflow: ellipsis;\n  overflow: hidden;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TransactionRecipientLabel = styled(DataLabel)`\n  font-weight: 500;\n`;\n\nexport const TransactionRecipientLink = styled(BaseLink)`\n  margin: 0 0 2px;\n  font-weight: 500;\n  text-overflow: ellipsis;\n  display: block;\n  overflow: hidden;\n`;\n\nexport const TransactionTypeColumn = styled(DataBoxColumn)`\n  margin: 0 0 0 20px;\n`;\n\nexport const TransactionHashColumn = styled(DataBoxColumn)`\n  max-width: 124px;\n  margin: 0 0 0 20px;\n  overflow: hidden;\n\n  @media screen and (max-width: 1000px) {\n    max-width: 400px;\n  }\n`;\n\nexport const TransactionRecipientsColumn = styled.div`\n  margin: 0 0 0 24px;\n  display: flex;\n  justify-content: space-between;\n  flex-grow: 1;\n  overflow: hidden;\n\n  @media screen and (max-width: 1000px) {\n    margin: 16px 0 0 24px;\n  }\n\n  @media screen and (max-width: 768px) {\n    max-width: 400px;\n  }\n`;\n\nexport const TransactionRecipientsWrapper = styled.div`\n  width: 45%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const RecentBlockColumn1 = styled(DataBoxColumn)`\n  flex: 1 1 0;\n  max-width: 124px;\n`;\n\nexport const RecentBlockColumn2 = styled(DataBoxColumn)`\n  flex: 1 1 0;\n  padding: 0 0 0 16px;\n  overflow: hidden;\n`;\n\nexport const TransactionRowColumn = styled.div`\n  display: flex;\n`;\n","import { useMemo, useState } from 'react';\n\nimport { dateDiff } from '../../utils/date';\n\nimport type { HomePageBlock } from './__generated__/operations';\nimport {\n  BlockNumber,\n  RecentBlockColumn1,\n  RecentBlockColumn2,\n  RecentBlockRow,\n  DataBox,\n  DataItem,\n  DataTimestamp,\n  DataTitle,\n  ProducerAddress,\n  TxCount,\n  BlockProducerText,\n} from './components';\n\ntype Props = {\n  blocks: HomePageBlock[];\n};\n\nexport function RecentBlocks({ blocks }: Props) {\n  const [now] = useState(new Date());\n\n  return (\n    <DataItem>\n      <DataTitle>Recent Blocks</DataTitle>\n      <DataBox>\n        {blocks.map((block) => (\n          <RecentBlockRow key={block.id}>\n            <RecentBlockColumn1>\n              <BlockNumber id=\"recent-block-link\" to={`/block/${block.height}`}>\n                {block.height}\n              </BlockNumber>\n              <BlockTimestamp date1={now} date2={new Date(block.time)} />\n            </RecentBlockColumn1>\n            <RecentBlockColumn2>\n              <BlockProducerText>\n                {`Producer: `}\n                <ProducerAddress id=\"recent-block-producer-link\" to={`/address/${block.producer}`}>\n                  {block.producer}\n                </ProducerAddress>\n              </BlockProducerText>\n              <TxCount\n                id=\"recent-block-transactions-link\"\n                to={`/block/${block.height}/transactions`}\n              >{`${block.transactions?.length} Tx's`}</TxCount>\n            </RecentBlockColumn2>\n          </RecentBlockRow>\n        ))}\n      </DataBox>\n    </DataItem>\n  );\n}\n\nfunction BlockTimestamp({ date1, date2 }: { date1: Date; date2: Date }) {\n  const difference = useMemo(() => dateDiff(date1, date2), [date1, date2]);\n  // eslint-disable-next-line consistent-return\n  const text = useMemo(() => {\n    if (difference?.hours > 0) return `${difference.hours} hours ago`;\n    if (difference?.minutes > 0) return `${difference.minutes} minutes ago`;\n    if (difference?.seconds > 0) return `${difference.seconds} seconds ago`;\n  }, [difference]);\n\n  return <DataTimestamp>{text}</DataTimestamp>;\n}\n","import { useMemo } from 'react';\n\nimport { dateDiff, getTextForTimeDifference } from '../../utils/date';\n\nimport type { HomePageTransaction } from './__generated__/operations';\nimport {\n  DataTimestamp,\n  DataBox,\n  DataItem,\n  DataTitle,\n  TxType,\n  TransactionAddress,\n  TransactionRecipientLabel,\n  TransactionRecipientLink,\n  TransactionTypeColumn,\n  TransactionHashColumn,\n  TransactionRecipientsColumn,\n  TransactionRecipientsWrapper,\n  TransactionsDataBoxRow,\n  TransactionRowColumn,\n} from './components';\n\ntype Props = {\n  transactions: HomePageTransaction[];\n};\n\ntype Ouputs = HomePageTransaction['outputs'];\n\nexport function RecentTransactions({ transactions }: Props) {\n  const sortedTransactions = transactions\n    .sort((t1, t2) =>\n      new Date(t1.status!.time).getTime() - new Date(t2.status!.time).getTime() <= 0 ? 1 : -1\n    )\n    .slice(0, 5);\n\n  return (\n    <DataItem>\n      <DataTitle>Recent Transactions</DataTitle>\n      <DataBox>\n        {sortedTransactions.map((transaction) => (\n          <TransactionRow key={transaction.id} transaction={transaction} />\n        ))}\n      </DataBox>\n    </DataItem>\n  );\n}\n\nfunction TransactionRow({ transaction }: { transaction: HomePageTransaction }) {\n  const difference = useMemo(\n    () => dateDiff(new Date(), new Date(transaction.status!.time)),\n    [transaction]\n  );\n  const timestamp = useMemo(() => getTextForTimeDifference(difference), [difference]);\n\n  return (\n    <TransactionsDataBoxRow key={transaction.id}>\n      <TransactionRowColumn>\n        <TransactionTypeColumn>\n          <TxType>{transaction.isScript ? 'Script' : 'Create'}</TxType>\n        </TransactionTypeColumn>\n        <TransactionHashColumn>\n          <TransactionAddress id=\"recent-transaction-link\" to={`/transaction/${transaction.id}`}>\n            {transaction.id}\n          </TransactionAddress>\n          <DataTimestamp>{timestamp}</DataTimestamp>\n        </TransactionHashColumn>\n      </TransactionRowColumn>\n      <TransactionRecipientsColumn>\n        <TransactionRecipientsWrapper>\n          {transaction.inputs.map(\n            (input) =>\n              input.__typename === 'InputCoin' && (\n                <>\n                  <TransactionRecipientLabel>From:</TransactionRecipientLabel>\n                  {input.__typename}\n                  <TransactionRecipientLink to={`/address/${input.owner}`}>\n                    {input.owner}\n                  </TransactionRecipientLink>\n                </>\n              )\n          )}\n        </TransactionRecipientsWrapper>\n        <TransactionRecipientsWrapper>\n          {transaction.outputs.map(\n            (output) =>\n              (output.__typename === 'ChangeOutput' ||\n                output.__typename === 'CoinOutput' ||\n                output.__typename === 'VariableOutput' ||\n                output.__typename === 'WithdrawalOutput') && (\n                <>\n                  <TransactionRecipientLabel>To:</TransactionRecipientLabel>\n                  {output.__typename}\n                  <TransactionRecipientLink to={`/address/${output.to}`}>\n                    {output.to}\n                  </TransactionRecipientLink>\n                </>\n              )\n          )}\n        </TransactionRecipientsWrapper>\n      </TransactionRecipientsColumn>\n    </TransactionsDataBoxRow>\n  );\n}\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type HomePageTransactionsQueryVariables = Types.Exact<{\n  count?: Types.InputMaybe<Types.Scalars['Int']>;\n}>;\n\n\nexport type HomePageTransactionsQuery = { __typename: 'Query', transactions: { __typename: 'TransactionConnection', edges?: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } } | null> | null } };\n\nexport type HomePageBlocksQueryVariables = Types.Exact<{\n  count?: Types.InputMaybe<Types.Scalars['Int']>;\n}>;\n\n\nexport type HomePageBlocksQuery = { __typename: 'Query', blocks: { __typename: 'BlockConnection', edges?: Array<{ __typename: 'BlockEdge', cursor: string, node: { __typename: 'Block', id: string, height: string, time: string, producer: string, transactions: Array<{ __typename: 'Transaction', id: string }> } } | null> | null } };\n\nexport type HomePageBlock = { __typename: 'Block', id: string, height: string, time: string, producer: string, transactions: Array<{ __typename: 'Transaction', id: string }> };\n\nexport type HomePageTransaction = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const HomePageBlockFragmentDoc = gql`\n    fragment HomePageBlock on Block {\n  id\n  height\n  time\n  producer\n  transactions {\n    id\n  }\n}\n    `;\nexport const HomePageTransactionFragmentDoc = gql`\n    fragment HomePageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on WithdrawalOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      owner\n    }\n    ... on InputContract {\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const HomePageTransactionsQueryDocument = gql`\n    query HomePageTransactionsQuery($count: Int) {\n  transactions(last: $count) {\n    edges {\n      node {\n        ...HomePageTransaction\n      }\n    }\n  }\n}\n    ${HomePageTransactionFragmentDoc}`;\n\n/**\n * __useHomePageTransactionsQuery__\n *\n * To run a query within a React component, call `useHomePageTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomePageTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomePageTransactionsQuery({\n *   variables: {\n *      count: // value for 'count'\n *   },\n * });\n */\nexport function useHomePageTransactionsQuery(baseOptions?: Apollo.QueryHookOptions<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>(HomePageTransactionsQueryDocument, options);\n      }\nexport function useHomePageTransactionsQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>(HomePageTransactionsQueryDocument, options);\n        }\nexport type HomePageTransactionsQueryHookResult = ReturnType<typeof useHomePageTransactionsQuery>;\nexport type HomePageTransactionsQueryLazyQueryHookResult = ReturnType<typeof useHomePageTransactionsQueryLazyQuery>;\nexport type HomePageTransactionsQueryQueryResult = Apollo.QueryResult<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>;\nexport const HomePageBlocksQueryDocument = gql`\n    query HomePageBlocksQuery($count: Int) {\n  blocks(last: $count) {\n    edges {\n      cursor\n      node {\n        ...HomePageBlock\n      }\n    }\n  }\n}\n    ${HomePageBlockFragmentDoc}`;\n\n/**\n * __useHomePageBlocksQuery__\n *\n * To run a query within a React component, call `useHomePageBlocksQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomePageBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomePageBlocksQuery({\n *   variables: {\n *      count: // value for 'count'\n *   },\n * });\n */\nexport function useHomePageBlocksQuery(baseOptions?: Apollo.QueryHookOptions<HomePageBlocksQuery, HomePageBlocksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HomePageBlocksQuery, HomePageBlocksQueryVariables>(HomePageBlocksQueryDocument, options);\n      }\nexport function useHomePageBlocksQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageBlocksQuery, HomePageBlocksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HomePageBlocksQuery, HomePageBlocksQueryVariables>(HomePageBlocksQueryDocument, options);\n        }\nexport type HomePageBlocksQueryHookResult = ReturnType<typeof useHomePageBlocksQuery>;\nexport type HomePageBlocksQueryLazyQueryHookResult = ReturnType<typeof useHomePageBlocksQueryLazyQuery>;\nexport type HomePageBlocksQueryQueryResult = Apollo.QueryResult<HomePageBlocksQuery, HomePageBlocksQueryVariables>;","import { useEffect, useState } from 'react';\n\nimport { Header } from '../../components/Header';\n\nimport { RecentBlocks } from './RecentBlocks';\nimport { RecentTransactions } from './RecentTransactions';\nimport type { HomePageBlock, HomePageTransaction } from './__generated__/operations';\nimport { useHomePageBlocksQuery, useHomePageTransactionsQuery } from './__generated__/operations';\nimport { Container, Content, DataContainer, Input, InputContainer, SearchIcon } from './components';\n\nexport default function HomePage() {\n  const [blocks, setBlocks] = useState<HomePageBlock[]>([]);\n  const [transactions, setTransactions] = useState<HomePageTransaction[]>([]);\n  const transactionsQuery = useHomePageTransactionsQuery({\n    variables: { count: 50 },\n  });\n  const blocksQuery = useHomePageBlocksQuery({ variables: { count: 5 } });\n\n  useEffect(() => {\n    if (blocksQuery.loading) return;\n    if (blocksQuery.error) return;\n    const edges: any[] = blocksQuery.data?.blocks?.edges || [];\n    const blocks: HomePageBlock[] = edges.map((edge) => edge.node);\n    setBlocks(blocks);\n  }, [blocksQuery.loading, blocksQuery.error, blocksQuery.data]);\n\n  useEffect(() => {\n    if (transactionsQuery.loading) return;\n    if (transactionsQuery.error) return;\n    const edges: any[] = transactionsQuery.data?.transactions?.edges || [];\n    const transactions: HomePageTransaction[] = edges.map((edge) => edge.node);\n    setTransactions(transactions);\n  }, [transactionsQuery.loading, transactionsQuery.data, transactionsQuery.error]);\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <InputContainer>\n            <Input placeholder=\"Search an address, transaction or block\" />\n            <SearchIcon />\n          </InputContainer>\n          <DataContainer>\n            <RecentBlocks blocks={blocks} />\n            <RecentTransactions transactions={transactions} />\n          </DataContainer>\n        </Content>\n      </Container>\n    </>\n  );\n}\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n"],"names":["InputReset","styled","Container","Content","InputContainer","Input","SearchIcon","SearchSvg","DataContainer","DataItem","DataTitle","DataBox","DataBoxRow","RecentBlockRow","TransactionsDataBoxRow","DataBoxColumn","DataTimestamp","DataLabel","BlockProducerText","BaseLink","Link","ProducerAddress","BlockNumber","TxCount","TxType","TransactionAddress","TransactionRecipientLabel","TransactionRecipientLink","TransactionTypeColumn","TransactionHashColumn","TransactionRecipientsColumn","TransactionRecipientsWrapper","RecentBlockColumn1","RecentBlockColumn2","TransactionRowColumn","RecentBlocks","blocks","useState","Date","now","map","block","id","to","height","BlockTimestamp","date1","date2","time","producer","transactions","length","difference","useMemo","dateDiff","text","hours","minutes","seconds","RecentTransactions","sortedTransactions","sort","t1","t2","status","getTime","slice","transaction","TransactionRow","timestamp","getTextForTimeDifference","isScript","inputs","input","__typename","owner","outputs","output","defaultOptions","HomePageBlockFragmentDoc","gql","HomePageTransactionFragmentDoc","HomePageTransactionsQueryDocument","HomePageBlocksQueryDocument","HomePage","setBlocks","setTransactions","transactionsQuery","baseOptions","options","Apollo","useHomePageTransactionsQuery","variables","count","blocksQuery","useHomePageBlocksQuery","useEffect","loading","error","data","edges","edge","node","Header","placeholder","Math","floor","abs","days","dateDiffRelative","getTextForRelativeTimeDifference","push","join"],"sourceRoot":""}