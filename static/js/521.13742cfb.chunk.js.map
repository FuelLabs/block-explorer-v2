{"version":3,"file":"static/js/521.13742cfb.chunk.js","mappings":"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","sources":["components/Modals/QRModal/components.tsx","components/Modals/QRModal/index.tsx","components/Table/components.tsx","pages/AddressPage/components.tsx","pages/AddressPage/BalancesTable.tsx","pages/AddressPage/TransactionsTable.tsx","pages/AddressPage/__generated__/operations.ts","pages/AddressPage/index.tsx","utils/date.ts"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding: 0 40px 48px;\n  width: 100%;\n  max-width: 432px;\n  border-radius: 6px;\n  box-shadow: 0 0 25px 0 #58c09b;\n  border: solid 1px #58c09c;\n  background-color: #021d17;\n\n  @media screen and (max-width: 425px) {\n    padding: 0 24px 48px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 20px 0;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  text-align: center;\n  color: #f8fefc;\n`;\n\nexport const QRAddress = styled.p`\n  margin: 16px 0 40px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  text-align: center;\n  color: #f8fefc;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const QRCodeContainer = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import QRCode from \"qrcode.react\";\nimport { useRef } from \"react\";\n\nimport { useOnClickOutside } from \"../../../hooks\";\nimport { Modal } from \"../Base\";\n\nimport { Title, Container, QRAddress, QRCodeContainer } from \"./components\";\n\ninterface Props {\n  onClose: () => void;\n  address: string;\n}\n\nexport function QRModal(props: Props) {\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useOnClickOutside(contentRef, onClickOutside);\n\n  function onClickOutside() {\n    props.onClose();\n  }\n\n  return (\n    <Modal>\n      <Container ref={contentRef}>\n        <Title>QR Code</Title>\n        <QRAddress>{props.address}</QRAddress>\n        <QRCodeContainer>\n          <QRCode value={props.address} fgColor=\"#f8fefc\" bgColor=\"#021d17\" />\n        </QRCodeContainer>\n      </Container>\n    </Modal>\n  );\n}\n","import styled from \"styled-components\";\n\nexport const TableContainer = styled.div`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? \"600\" : \"normal\")};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","import { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nimport { ButtonReset } from \"../../components/Button/components\";\nimport { CopyIcon, PlusIcon, QRIcon, ArrowIcon } from \"../../components/Icons\";\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const HeadlineContainer = styled.div`\n  margin: 0 0 52px;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n\n  @media screen and (max-width: 1000px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  @media screen and (max-width: 425px) {\n    margin: 0 0 40px;\n  }\n`;\n\nexport const HeadlineAddressContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  flex-wrap: wrap;\n  width: 100%;\n`;\n\nexport const HeadlineCoinsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n\n  @media screen and (max-width: 1000px) {\n    margin: 16px 0 0;\n    align-items: flex-start;\n  }\n`;\n\nexport const HeadlineAddressHeader = styled.h2`\n  display: flex;\n  align-items: baseline;\n  flex-wrap: wrap;\n  margin: 0;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  white-space: break-spaces;\n  color: #f8fefc;\n\n  @media screen and (max-width: 768px) {\n    width: 100%;\n  }\n`;\n\nexport const HeadlineAddress = styled.span`\n  display: block;\n  margin: 4px 16px 0 0;\n  font-family: SFProText;\n  font-size: 17px;\n  font-weight: 500;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  @media screen and (max-width: 560px) {\n    font-size: 15px;\n    margin: 4px 0 0 0;\n  }\n`;\n\nexport const Tooltip = styled.span`\n  padding: 2px 8px;\n  display: none;\n  position: absolute;\n  top: -28px;\n  left: 50%;\n  transform: translateX(-50%);\n  background-color: #58c09b;\n  border-radius: 4px;\n  white-space: nowrap;\n  font-size: 12px;\n  line-height: 16px;\n`;\n\nexport const HeadlineAddressButton = styled(ButtonReset)`\n  position: relative;\n  margin: 0 0 0 12px;\n  width: 24px;\n  height: 24px;\n  justify-content: center;\n  background-color: #58c09b;\n  border-radius: 12px;\n  color: #081c17;\n  margin: 8px 16px 0 0;\n\n  :first-of-type {\n  }\n\n  :hover {\n    box-shadow: 0 0 3px 0 #58c09b;\n  }\n\n  :hover ${Tooltip} {\n    display: block;\n  }\n`;\n\nexport const CopyButtonIcon = styled(CopyIcon)`\n  width: 14px !important;\n  height: 14px !important;\n`;\n\nexport const QRButtonIcon = styled(QRIcon)`\n  width: 14px !important;\n  height: 14px !important;\n`;\n\nexport const CoinsCounterLabel = styled.div`\n  margin: 0 0 12px;\n  padding: 4px 6px;\n  display: flex;\n  align-items: center;\n  border-radius: 13px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 16px;\n  color: #f8fefc;\n`;\n\nexport const CoinsCounter = styled.span`\n  margin: 0 0 0 4px;\n  width: 14px;\n  height: 14px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-family: SFProText;\n  font-size: 11px;\n  font-weight: 500;\n  line-height: 11px;\n  color: #021d17;\n  background-color: #f8fefc;\n  border-radius: 7px;\n`;\n\nexport const TokenDropdownContainer = styled.div`\n  position: relative;\n`;\n\nexport const TokenButtonSeparator = styled.span`\n  width: 1px;\n  height: 36px;\n  background-color: #808080;\n  transition: 0.2s ease-out;\n`;\n\nexport const TokenButton = styled(ButtonReset)<{ isActive?: boolean }>`\n  padding: 0;\n  width: 190px;\n  height: 36px;\n  border-radius: 5px;\n  border: solid 1px #808080;\n  background-color: #192f2b;\n  box-shadow: ${({ isActive }) => (isActive ? \"0 0 2px 0 #58c09b\" : \"none\")};\n\n  :hover {\n    border: solid 1px #58c09b;\n  }\n\n  :hover ${TokenButtonSeparator} {\n    background-color: #58c09b;\n  }\n`;\n\nexport const TokenButtonSymbol = styled.span`\n  margin: 0 0 0 14px;\n  font-family: SFProText;\n  font-size: 18px;\n  font-weight: normal;\n  color: #f8fefc;\n`;\n\nexport const TokenButtonAmount = styled.span`\n  margin: 0 14px 0 0;\n  flex: 1 1 0;\n  font-family: SFProDisplay;\n  font-size: 17px;\n  font-weight: 600;\n  color: #f8fefc;\n  text-align: right;\n`;\n\nexport const TokenButtonIconContainer = styled.div`\n  width: 36px;\n  height: 36px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #f9fefc;\n`;\n\nexport const TokenDropdownIcon = styled(ArrowIcon)`\n  transform: rotate(90deg);\n  width: 12px !important;\n  height: 12px !important;\n`;\n\nexport const TableContainer = styled.div`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlineDisclaimer = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const HeadlineHighlighedDisclaimer = styled.span`\n  color: #f8fefc;\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableCell = styled.td`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n\nconst BaseLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: 500;\n  line-height: 15px;\n  color: #58c09b;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TxHash = styled(BaseLink)`\n  display: block;\n  max-width: 124px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const InputsContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n`;\n\nexport const InputsAddresses = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const InputAddressContainer = styled.div`\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const InputAddressLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const InputsExpandButton = styled(ButtonReset)`\n  justify-content: center;\n  margin: 0 0 0 40px;\n  width: 18px;\n  height: 18px;\n  background-color: #58c09b;\n  border-radius: 9px;\n  color: #081c17;\n\n  :hover {\n    box-shadow: 0 0 3px 0 #58c09b;\n  }\n`;\n\nexport const ExpandIcon = styled(PlusIcon)<{ rotated?: boolean }>`\n  width: 16px !important;\n  height: 16px !important;\n  transform: ${({ rotated }) => (rotated ? \"rotate(45deg)\" : \"rotate(0deg)\")};\n  transition: 0.2s ease-out;\n`;\n\nexport const TxRecipient = styled(BaseLink)`\n  display: block;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const BoldText = styled.span`\n  font-weight: 600;\n`;\n\nexport const TransactionValue = styled.span`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const CoinLink = styled(BaseLink)`\n  display: block;\n  font-weight: 600;\n  margin: 0 0 12px;\n  max-width: 60px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n\n  :last-of-type {\n    margin: 0;\n  }\n`;\n\nexport const TableNavigationButtons = styled.div`\n  margin: 4px 0 0;\n  display: flex;\n  font-family: SFProText;\n  font-size: 11px;\n  line-height: 14px;\n  font-weight: normal;\n  color: #808080;\n\n  @media screen and (max-width: 560px) {\n    margin: 12px 0 0;\n  }\n`;\n\nexport const TableNavigationButton = styled(ButtonReset)<{\n  isSelected?: boolean;\n}>`\n  height: 13px;\n  color: ${({ isSelected }) => (isSelected ? \"#d1d4d7;\" : \"#808080\")};\n  background-color: ${({ isSelected }) =>\n    isSelected ? \"#192f2b;\" : \"rgba(0, 0, 0, 0)\"};\n\n  :hover {\n    color: #d1d4d7;\n  }\n\n  :disabled {\n    color: #192f2b;\n  }\n`;\n\nexport const TableNavigationNumbersContainer = styled.div`\n  display: flex;\n  margin: 0 12px;\n`;\n\nexport const TableNavigationNumberButton = styled(TableNavigationButton)`\n  margin: 0 2px;\n  width: 13px;\n  justify-content: center;\n`;\n\nexport const TableNavigationTextButton = styled(TableNavigationButton)`\n  line-height: 14px;\n  margin: 0 12px;\n\n  @media screen and (max-width: 425px) {\n    :first-of-type {\n      margin: 0 12px 0 0;\n    }\n\n    :last-of-type {\n      margin: 0 0 0 12px;\n    }\n  }\n`;\n\nexport const TableNextNavigationTextButton = styled(TableNavigationTextButton)`\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n","// import { useState } from \"react\";\nimport type { CoinQuantity } from \"fuels\";\n\nimport * as TableUI from \"../../components/Table/components\";\n\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from \"./components\";\n\nexport default function BalancesTable({\n  balances,\n}: {\n  balances: CoinQuantity[];\n}) {\n  function trimAddress(address: string) {\n    if (!address) {\n      return \"\";\n    }\n\n    return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n  }\n\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Balances</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>\n              {balances?.length || \"0\"}\n            </HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>\n              {balances?.length || \"0\"}\n            </HeadlineHighlighedDisclaimer>\n            {` balances`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Color</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Amount</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {balances.map((balance) => (\n            <TableUI.TableRow key={balance.assetId}>\n              <TableUI.TableCell>\n                {trimAddress(balance.assetId)}\n              </TableUI.TableCell>\n              <TableUI.TableCell>{balance.amount.toString()}</TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","// import { useState } from \"react\";\nimport * as TableUI from \"../../components/Table/components\";\nimport {\n  dateDiffRelative,\n  getTextForRelativeTimeDifference,\n} from \"../../utils/date\";\n\nimport type { AddressPageTransaction } from \"./__generated__/operations\";\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  TxHash,\n  TxRecipient,\n  TransactionValue,\n  CoinLink,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from \"./components\";\n\nexport default function TransactionsTable({\n  transactions,\n}: {\n  transactions: AddressPageTransaction[];\n}) {\n  function trimAddress(address: string) {\n    if (!address) {\n      return \"\";\n    }\n\n    return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n  }\n\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Transactions</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || \"0\"}\n            </HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || \"0\"}\n            </HeadlineHighlighedDisclaimer>\n            {` transactions`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Tx Hash</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Type</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Age</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>From</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>To</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Value</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Coin</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Fee (USD)</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {transactions.map((transaction) => (\n            <TableUI.TableRow key={transaction.id}>\n              <TableUI.TableCell>\n                <TxHash to={`/transaction/${transaction.id}`}>\n                  {transaction.id}\n                </TxHash>\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.isScript ? \"Script\" : \"Create\"}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.status ? (\n                  <>\n                    {getTextForRelativeTimeDifference(\n                      dateDiffRelative(\n                        new Date(),\n                        new Date(transaction.status.time)\n                      )\n                    )}\n                  </>\n                ) : null}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.inputs.map((input, idx) =>\n                  (() => {\n                    switch (input.__typename) {\n                      case \"InputCoin\": {\n                        return (\n                          <TxRecipient key={idx} to={`/address/${input.owner}`}>\n                            {trimAddress(input.owner)}\n                          </TxRecipient>\n                        );\n                      }\n                      case \"InputContract\": {\n                        return (\n                          <TxRecipient\n                            key={idx}\n                            to={`/address/${input.contract.id}`}\n                          >\n                            {trimAddress(input.contract.id)}\n                          </TxRecipient>\n                        );\n                      }\n                      default: {\n                        // @ts-ignore\n                        return input.__typename;\n                      }\n                    }\n                  })()\n                )}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.outputs.length > 0\n                  ? transaction.outputs.map((output, idx) =>\n                      (() => {\n                        if (output.__typename === \"CoinOutput\") {\n                          return (\n                            <TxRecipient key={idx} to={`/address/${output.to}`}>\n                              {trimAddress(output.to)}\n                            </TxRecipient>\n                          );\n                        }\n                        return output.__typename;\n                      })()\n                    )\n                  : \"N/A\"}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.outputs.length > 0\n                  ? transaction.outputs.map((output, idx) =>\n                      (() => {\n                        if (output.__typename === \"CoinOutput\") {\n                          return (\n                            <TransactionValue key={idx}>\n                              {output.amount}\n                            </TransactionValue>\n                          );\n                        }\n                        return `${output.__typename}`;\n                      })()\n                    )\n                  : \"N/A\"}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.outputs.map((output, idx) =>\n                  (() => {\n                    if (output.__typename === \"CoinOutput\") {\n                      return (\n                        <CoinLink key={idx} to=\"/coin\">\n                          {output.assetId}\n                        </CoinLink>\n                      );\n                    }\n                    return output.__typename;\n                  })()\n                )}\n              </TableUI.TableCell>\n              <TableUI.TableCell>N/A</TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddressPageQueryVariables = Types.Exact<{\n  first?: Types.InputMaybe<Types.Scalars['Int']>;\n  owner: Types.Scalars['Address'];\n}>;\n\n\nexport type AddressPageQuery = { __typename: 'Query', coins: { __typename: 'CoinConnection', edges?: Array<{ __typename: 'CoinEdge', node: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string } } | null> | null }, transactionsByOwner: { __typename: 'TransactionConnection', edges?: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } } | null> | null } };\n\nexport type AddressPageCoin = { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string };\n\nexport type AddressPageTransaction = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const AddressPageCoinFragmentDoc = gql`\n    fragment AddressPageCoin on Coin {\n  utxoId\n  owner\n  amount\n  assetId\n  maturity\n  status\n  blockCreated\n}\n    `;\nexport const AddressPageTransactionFragmentDoc = gql`\n    fragment AddressPageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on WithdrawalOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      utxoId\n      owner\n      amount\n      assetId\n      witnessIndex\n      maturity\n      predicate\n      predicateData\n    }\n    ... on InputContract {\n      utxoId\n      balanceRoot\n      stateRoot\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const AddressPageQueryDocument = gql`\n    query AddressPageQuery($first: Int, $owner: Address!) {\n  coins(filter: {owner: $owner}, first: 9999) {\n    edges {\n      node {\n        ...AddressPageCoin\n      }\n    }\n  }\n  transactionsByOwner(first: $first, owner: $owner) {\n    edges {\n      node {\n        ...AddressPageTransaction\n      }\n    }\n  }\n}\n    ${AddressPageCoinFragmentDoc}\n${AddressPageTransactionFragmentDoc}`;\n\n/**\n * __useAddressPageQuery__\n *\n * To run a query within a React component, call `useAddressPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddressPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddressPageQuery({\n *   variables: {\n *      first: // value for 'first'\n *      owner: // value for 'owner'\n *   },\n * });\n */\nexport function useAddressPageQuery(baseOptions: Apollo.QueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n      }\nexport function useAddressPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n        }\nexport type AddressPageQueryHookResult = ReturnType<typeof useAddressPageQuery>;\nexport type AddressPageQueryLazyQueryHookResult = ReturnType<typeof useAddressPageQueryLazyQuery>;\nexport type AddressPageQueryQueryResult = Apollo.QueryResult<AddressPageQuery, AddressPageQueryVariables>;","import { BigNumber } from \"@ethersproject/bignumber\";\nimport type {\n  CoinQuantity,\n  // NativeAssetId\n} from \"fuels\";\nimport { useMemo, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport { Header } from \"../../components/Header\";\nimport { QRModal } from \"../../components/Modals/QRModal\";\n\nimport BalancesTable from \"./BalancesTable\";\nimport TransactionsTable from \"./TransactionsTable\";\nimport type { AddressPageTransaction } from \"./__generated__/operations\";\nimport { useAddressPageQuery } from \"./__generated__/operations\";\nimport {\n  Container,\n  Content,\n  CopyButtonIcon,\n  Tooltip,\n  HeadlineAddress,\n  HeadlineAddressButton,\n  HeadlineAddressContainer,\n  HeadlineAddressHeader,\n  HeadlineCoinsContainer,\n  HeadlineContainer,\n  QRButtonIcon,\n  CoinsCounterLabel,\n  CoinsCounter,\n  // TokenDropdownContainer,\n  // TokenButton,\n  // TokenButtonSymbol,\n  // TokenButtonAmount,\n  // TokenButtonSeparator,\n  // TokenButtonIconContainer,\n  // TokenDropdownIcon,\n} from \"./components\";\n\nexport default function AddressPage() {\n  const { address } = useParams() as any;\n  const [copyTooltip] = useState(\"Copy address\");\n  const [modal, setModal] = useState(false);\n  const { loading, data } = useAddressPageQuery({\n    variables: { first: 10, owner: address },\n  });\n  const coins = data?.coins!.edges!.map((edge) => edge!.node);\n  const balances =\n    coins?.reduce<{ [assetId: string]: CoinQuantity }>(\n      (acc, { assetId, amount }) => ({\n        ...acc,\n        [assetId]: {\n          assetId,\n          amount: BigNumber.from(amount).add(acc[assetId]?.amount ?? 0),\n        },\n      }),\n      {}\n    ) ?? null;\n  const transactions = useMemo<AddressPageTransaction[]>(\n    () => data?.transactionsByOwner!.edges!.map((edge) => edge!.node) ?? [],\n    [data]\n  );\n\n  const onClose = () => {\n    setModal(false);\n  };\n\n  const showModal = () => {\n    setModal(true);\n  };\n\n  const onClickCopy = () => {\n    navigator.clipboard.writeText(address);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <HeadlineContainer>\n              <HeadlineAddressContainer>\n                <HeadlineAddressHeader>\n                  {`Address:  `}\n                  <HeadlineAddress>{address}</HeadlineAddress>\n                </HeadlineAddressHeader>\n              </HeadlineAddressContainer>\n            </HeadlineContainer>\n          </Content>\n        </Container>\n      </>\n    );\n  }\n  return (\n    <>\n      {modal && <QRModal onClose={onClose} address={address} />}\n      <Header />\n      <Container>\n        <Content>\n          <HeadlineContainer>\n            <HeadlineAddressContainer>\n              <HeadlineAddressHeader>\n                {`Address:  `}\n                <HeadlineAddress>{address}</HeadlineAddress>\n              </HeadlineAddressHeader>\n              <HeadlineAddressButton\n                onClick={() => {\n                  onClickCopy();\n                }}\n              >\n                <CopyButtonIcon />\n                <Tooltip>{copyTooltip}</Tooltip>\n              </HeadlineAddressButton>\n              <HeadlineAddressButton onClick={showModal}>\n                <QRButtonIcon />\n                <Tooltip>Click to copy QR code</Tooltip>\n              </HeadlineAddressButton>\n            </HeadlineAddressContainer>\n            <HeadlineCoinsContainer>\n              <CoinsCounterLabel>\n                Coins:\n                <CoinsCounter>{coins?.length ?? \"...\"}</CoinsCounter>\n              </CoinsCounterLabel>\n              {/* <TokenDropdownContainer>\n                <TokenButton>\n                  <TokenButtonSymbol>ETH:</TokenButtonSymbol>\n                  <TokenButtonAmount>\n                    {balances?.[NativeAssetId]?.amount.toString() ?? 0}\n                  </TokenButtonAmount>\n                  <TokenButtonSeparator></TokenButtonSeparator>\n                  <TokenButtonIconContainer>\n                    <TokenDropdownIcon />\n                  </TokenButtonIconContainer>\n                </TokenButton>\n              </TokenDropdownContainer> */}\n            </HeadlineCoinsContainer>\n          </HeadlineContainer>\n          {balances ? (\n            <BalancesTable balances={Object.values(balances)} />\n          ) : null}\n          <div style={{ height: 16 }} />\n          <TransactionsTable transactions={transactions} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n"],"names":["Container","styled","Title","QRAddress","QRCodeContainer","QRModal","props","contentRef","useRef","useOnClickOutside","onClose","ref","address","value","fgColor","bgColor","TableContainer","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","Content","HeadlineContainer","HeadlineAddressContainer","HeadlineCoinsContainer","HeadlineAddressHeader","HeadlineAddress","Tooltip","HeadlineAddressButton","ButtonReset","CopyButtonIcon","CopyIcon","QRButtonIcon","QRIcon","CoinsCounterLabel","CoinsCounter","TokenDropdownContainer","TokenButtonSeparator","TokenButton","isActive","TokenButtonSymbol","TokenButtonAmount","TokenButtonIconContainer","TokenDropdownIcon","ArrowIcon","TableHeadlineDisclaimer","HeadlineHighlighedDisclaimer","BaseLink","Link","TxHash","TxRecipient","PlusIcon","rotated","BoldText","TransactionValue","CoinLink","TableNavigationButtons","TableNavigationButton","isSelected","TableNavigationNumbersContainer","TableNavigationNumberButton","TableNavigationTextButton","TableNextNavigationTextButton","BalancesTable","balances","length","map","balance","assetId","slice","amount","toString","TransactionsTable","transactions","trimAddress","transaction","to","id","isScript","status","getTextForRelativeTimeDifference","dateDiffRelative","Date","time","inputs","input","idx","__typename","owner","contract","outputs","output","defaultOptions","AddressPageCoinFragmentDoc","gql","AddressPageTransactionFragmentDoc","AddressPageQueryDocument","AddressPage","useParams","useState","copyTooltip","modal","setModal","baseOptions","options","Apollo","useAddressPageQuery","variables","first","loading","data","coins","edges","edge","node","reduce","acc","BigNumber","add","useMemo","transactionsByOwner","Header","onClick","navigator","clipboard","writeText","Object","values","style","height","dateDiff","date1","date2","seconds","Math","floor","abs","getTime","minutes","hours","days","text","push","join","getTextForTimeDifference"],"sourceRoot":""}