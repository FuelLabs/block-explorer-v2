{"version":3,"file":"static/js/906.b6dee57a.chunk.js","mappings":"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","sources":["components/Modals/QRModal/components.tsx","components/Modals/QRModal/index.tsx","components/Table/components.tsx","pages/AddressPage/BalancesTable.tsx","pages/AddressPage/TransactionsTable.tsx","pages/AddressPage/__generated__/operations.ts","pages/AddressPage/index.tsx","utils.ts","utils/bigNumber.ts","utils/date.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 0 40px 48px;\n  width: 100%;\n  max-width: 432px;\n  border-radius: 6px;\n  box-shadow: 0 0 25px 0 #58c09b;\n  border: solid 1px #58c09c;\n  background-color: #021d17;\n\n  @media screen and (max-width: 425px) {\n    padding: 0 24px 48px;\n  }\n`;\n\nexport const Title = styled.h2`\n  margin: 20px 0;\n  font-family: SFProDisplay;\n  font-size: 25px;\n  font-weight: 600;\n  text-align: center;\n  color: #f8fefc;\n`;\n\nexport const QRAddress = styled.p`\n  margin: 16px 0 40px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  line-height: 18px;\n  text-align: center;\n  color: #f8fefc;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const QRCodeContainer = styled.div`\n  margin: 0 auto;\n  width: fit-content;\n`;\n","import QRCode from 'qrcode.react';\nimport { useRef } from 'react';\n\nimport { useOnClickOutside } from '../../../hooks';\nimport { Modal } from '../Base';\n\nimport { Title, Container, QRAddress, QRCodeContainer } from './components';\n\ninterface Props {\n  onClose: () => void;\n  address: string;\n}\n\nexport function QRModal(props: Props) {\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  useOnClickOutside(contentRef, onClickOutside);\n\n  function onClickOutside() {\n    props.onClose();\n  }\n\n  return (\n    <Modal>\n      <Container ref={contentRef}>\n        <Title>QR Code</Title>\n        <QRAddress>{props.address}</QRAddress>\n        <QRCodeContainer>\n          <QRCode value={props.address} fgColor=\"#f8fefc\" bgColor=\"#021d17\" />\n        </QRCodeContainer>\n      </Container>\n    </Modal>\n  );\n}\n","import styled from 'styled-components';\n\nexport const TableContainer = styled.div`\n  padding: 8px;\n  box-shadow: 0 3px 6px 0 rgba(0, 0, 0, 0.2);\n  border: solid 1px #808080;\n  border-radius: 8px;\n`;\n\nexport const TableHeadlineContainer = styled.div`\n  display: flex;\n  align-items: flex-end;\n  padding: 8px 16px 16px;\n\n  @media screen and (max-width: 768px) {\n    padding: 8px 12px 16px;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableCounterText = styled.span`\n  margin: 4px 0 0;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: normal;\n  font-stretch: normal;\n  font-style: normal;\n  color: #808080;\n  white-space: nowrap;\n`;\n\nexport const TableHeadlineTitle = styled.h3`\n  margin: 0 32px 0 0;\n  font-family: SFProText;\n  font-size: 16px;\n  line-height: 20px;\n  font-weight: 600;\n  color: #f8fefc;\n`;\n\nexport const TableHeadlinerContentItem = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1 1 0;\n\n  @media screen and (max-width: 768px) {\n    align-self: stretch;\n  }\n\n  @media screen and (max-width: 560px) {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n`;\n\nexport const TableWrapper = styled.div`\n  width: 100%;\n  overflow-x: auto;\n`;\n\nexport const Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nexport const TableHeadRow = styled.tr``;\n\nexport const TableHeadCell = styled.th`\n  padding: 20px 12px;\n  background-color: #03261e;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  text-align: left;\n  color: #f8fefc;\n`;\n\nexport const TableRow = styled.tr`\n  td {\n    border-bottom: 1px solid #21302d;\n  }\n\n  :last-of-type td {\n    border: none;\n  }\n`;\n\nexport const TableCell = styled.td<{ bold?: boolean }>`\n  vertical-align: top;\n  padding: 18px 12px;\n  font-family: SFProText;\n  font-size: 13px;\n  font-weight: ${({ bold }) => (bold ? '600' : 'normal')};\n  line-height: 15px;\n  text-align: left;\n  white-space: nowrap;\n  color: #f8fefc;\n`;\n","// import { useState } from \"react\";\nimport type { CoinQuantity } from 'fuels';\n\nimport * as TableUI from '../../components/Table/components';\nimport { trimAddress } from '../../utils';\nimport { parseToFormattedNumber } from '../../utils/bigNumber';\n\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  // TableNavigationButtons,\n  // TableNavigationNumberButton,\n  // TableNavigationTextButton,\n  // TableNavigationNumbersContainer,\n  // TableNextNavigationTextButton,\n} from './components';\n\nexport default function BalancesTable({ balances }: { balances: CoinQuantity[] }) {\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Balances</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>{balances?.length || '0'}</HeadlineHighlighedDisclaimer>\n            {` balances`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Asset ID</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Amount</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {balances.map((balance) => (\n            <TableUI.TableRow key={balance.assetId}>\n              <TableUI.TableCell>{trimAddress(balance.assetId)}</TableUI.TableCell>\n              <TableUI.TableCell>{parseToFormattedNumber(balance.amount)}</TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n\n// function TableNavigation() {\n//   const pages = [1, 2, 3, 4];\n//   const [selectedPage, selectPage] = useState(1);\n\n//   function onSelectPage(idx: number) {\n//     selectPage(idx);\n//   }\n\n//   function onClickPrevPage() {\n//     selectPage((prevPage) => prevPage - 1);\n//   }\n\n//   function onClickNextPage() {\n//     selectPage((prevPage) => prevPage + 1);\n//   }\n\n//   function onClickLastPage() {\n//     selectPage(pages[pages.length - 1]);\n//   }\n\n//   function onClickFirstPage() {\n//     selectPage(1);\n//   }\n\n//   return (\n//     <TableNavigationButtons>\n//       <TableNavigationTextButton disabled={selectedPage === 1} onClick={onClickFirstPage}>\n//         First\n//       </TableNavigationTextButton>\n//       <TableNextNavigationTextButton disabled={selectedPage === 1} onClick={onClickPrevPage}>\n//         Previous\n//       </TableNextNavigationTextButton>\n//       <TableNavigationNumbersContainer>\n//         {pages.map((pageIdx) => (\n//           <TableNavigationNumberButton\n//             key={pageIdx}\n//             isSelected={pageIdx === selectedPage}\n//             onClick={() => {\n//               onSelectPage(pageIdx);\n//             }}\n//           >\n//             {pageIdx}\n//           </TableNavigationNumberButton>\n//         ))}\n//       </TableNavigationNumbersContainer>\n//       <TableNextNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickNextPage}\n//       >\n//         Next\n//       </TableNextNavigationTextButton>\n//       <TableNavigationTextButton\n//         disabled={selectedPage === pages[pages.length - 1]}\n//         onClick={onClickLastPage}\n//       >\n//         Last\n//       </TableNavigationTextButton>\n//     </TableNavigationButtons>\n//   );\n// }\n","import * as TableUI from '../../components/Table/components';\nimport { trimAddress } from '../../utils';\nimport { dateDiffRelative, getTextForRelativeTimeDifference } from '../../utils/date';\n\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport {\n  TableHeadlineDisclaimer,\n  HeadlineHighlighedDisclaimer,\n  TxHash,\n  TxRecipient,\n  TransactionFromAddressWrapper,\n  ContractLinkSkip,\n} from './components';\n\nexport default function TransactionsTable({\n  transactions,\n}: {\n  transactions: AddressPageTransaction[];\n}) {\n  return (\n    <TableUI.TableContainer>\n      <TableUI.TableHeadlineContainer>\n        <TableUI.TableHeadlineTitle>Transactions</TableUI.TableHeadlineTitle>\n        <TableUI.TableHeadlinerContentItem>\n          <TableHeadlineDisclaimer>\n            {`Showing `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` out of `}\n            <HeadlineHighlighedDisclaimer>\n              {transactions?.length || '0'}\n            </HeadlineHighlighedDisclaimer>\n            {` transactions`}\n          </TableHeadlineDisclaimer>\n        </TableUI.TableHeadlinerContentItem>\n      </TableUI.TableHeadlineContainer>\n      <TableUI.TableWrapper>\n        <TableUI.Table>\n          <TableUI.TableHeadRow>\n            <TableUI.TableHeadCell>Tx Hash</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Type</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>Age</TableUI.TableHeadCell>\n            <TableUI.TableHeadCell>From</TableUI.TableHeadCell>\n          </TableUI.TableHeadRow>\n          {transactions.map((transaction) => (\n            <TableUI.TableRow key={transaction.id}>\n              <TableUI.TableCell>\n                <TxHash to={`/transaction/${transaction.id}`}>{transaction.id}</TxHash>\n              </TableUI.TableCell>\n              <TableUI.TableCell>{transaction.isScript ? 'Script' : 'Create'}</TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.status ? (\n                  <>\n                    {getTextForRelativeTimeDifference(\n                      dateDiffRelative(new Date(), new Date(transaction.status.time))\n                    )}\n                  </>\n                ) : null}\n              </TableUI.TableCell>\n              <TableUI.TableCell>\n                {transaction.inputs.map((input, idx) =>\n                  (() => {\n                    switch (input.__typename) {\n                      case 'InputCoin': {\n                        return (\n                          <TransactionFromAddressWrapper key={idx}>\n                            <TxRecipient to={`/address/${input.owner}`}>\n                              {trimAddress(input.owner)}\n                            </TxRecipient>\n                          </TransactionFromAddressWrapper>\n                        );\n                      }\n                      case 'InputContract': {\n                        return (\n                          <ContractLinkSkip key={idx} to=\"\">\n                            {trimAddress(input.contract.id)}\n                          </ContractLinkSkip>\n                        );\n                      }\n                      default: {\n                        // @ts-ignore\n                        return input.__typename;\n                      }\n                    }\n                  })()\n                )}\n              </TableUI.TableCell>\n            </TableUI.TableRow>\n          ))}\n        </TableUI.Table>\n      </TableUI.TableWrapper>\n    </TableUI.TableContainer>\n  );\n}\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type AddressPageQueryVariables = Types.Exact<{\n  first?: Types.InputMaybe<Types.Scalars['Int']>;\n  owner: Types.Scalars['Address'];\n}>;\n\n\nexport type AddressPageQuery = { __typename: 'Query', coins: { __typename: 'CoinConnection', edges: Array<{ __typename: 'CoinEdge', node: { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string } }> }, transactionsByOwner: { __typename: 'TransactionConnection', edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'MessageOutput' } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } }> } };\n\nexport type AddressPageCoin = { __typename: 'Coin', utxoId: string, owner: string, amount: string, assetId: string, maturity: string, status: Types.CoinStatus, blockCreated: string };\n\nexport type AddressPageTransaction = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'MessageOutput' } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', utxoId: string, owner: string, amount: string, assetId: string, witnessIndex: number, maturity: string, predicate: string, predicateData: string } | { __typename: 'InputContract', utxoId: string, balanceRoot: string, stateRoot: string, contract: { __typename: 'Contract', id: string } } | { __typename: 'InputMessage' }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const AddressPageCoinFragmentDoc = gql`\n    fragment AddressPageCoin on Coin {\n  utxoId\n  owner\n  amount\n  assetId\n  maturity\n  status\n  blockCreated\n}\n    `;\nexport const AddressPageTransactionFragmentDoc = gql`\n    fragment AddressPageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      utxoId\n      owner\n      amount\n      assetId\n      witnessIndex\n      maturity\n      predicate\n      predicateData\n    }\n    ... on InputContract {\n      utxoId\n      balanceRoot\n      stateRoot\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const AddressPageQueryDocument = gql`\n    query AddressPageQuery($first: Int, $owner: Address!) {\n  coins(filter: {owner: $owner}, first: 9999) {\n    edges {\n      node {\n        ...AddressPageCoin\n      }\n    }\n  }\n  transactionsByOwner(first: $first, owner: $owner) {\n    edges {\n      node {\n        ...AddressPageTransaction\n      }\n    }\n  }\n}\n    ${AddressPageCoinFragmentDoc}\n${AddressPageTransactionFragmentDoc}`;\n\n/**\n * __useAddressPageQuery__\n *\n * To run a query within a React component, call `useAddressPageQuery` and pass it any options that fit your needs.\n * When your component renders, `useAddressPageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAddressPageQuery({\n *   variables: {\n *      first: // value for 'first'\n *      owner: // value for 'owner'\n *   },\n * });\n */\nexport function useAddressPageQuery(baseOptions: Apollo.QueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n      }\nexport function useAddressPageQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AddressPageQuery, AddressPageQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<AddressPageQuery, AddressPageQueryVariables>(AddressPageQueryDocument, options);\n        }\nexport type AddressPageQueryHookResult = ReturnType<typeof useAddressPageQuery>;\nexport type AddressPageQueryLazyQueryHookResult = ReturnType<typeof useAddressPageQueryLazyQuery>;\nexport type AddressPageQueryQueryResult = Apollo.QueryResult<AddressPageQuery, AddressPageQueryVariables>;","import type { CoinQuantity } from 'fuels';\nimport { toBech32 } from 'fuels';\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Header } from '../../components/Header';\nimport { QRModal } from '../../components/Modals/QRModal';\n\nimport BalancesTable from './BalancesTable';\nimport TransactionsTable from './TransactionsTable';\nimport type { AddressPageTransaction } from './__generated__/operations';\nimport { useAddressPageQuery } from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  CopyButtonIcon,\n  Tooltip,\n  HeadlineAddress,\n  HeadlineAddressButton,\n  HeadlineAddressContainer,\n  HeadlineAddressHeader,\n  HeadlineContainer,\n  QRButtonIcon,\n} from './components';\n\nexport default function AddressPage() {\n  const { address } = useParams() as any;\n  const [copyTooltip] = useState('Copy address');\n  const [modal, setModal] = useState(false);\n  const { loading, data } = useAddressPageQuery({\n    variables: { first: 10, owner: address },\n  });\n  const coins = data?.coins!.edges!.map((edge) => edge!.node);\n  const balances =\n    coins?.reduce<{ [assetId: string]: CoinQuantity }>(\n      (acc, { assetId, amount }) => ({\n        ...acc,\n        [assetId]: {\n          assetId,\n          amount: BigInt(amount) + (acc[assetId]?.amount || BigInt(0)),\n        },\n      }),\n      {}\n    ) ?? null;\n  const transactions = useMemo<AddressPageTransaction[]>(\n    () => data?.transactionsByOwner!.edges!.map((edge) => edge!.node) ?? [],\n    [data]\n  );\n\n  const onClose = () => {\n    setModal(false);\n  };\n\n  const showModal = () => {\n    setModal(true);\n  };\n\n  const onClickCopy = () => {\n    navigator.clipboard.writeText(address);\n  };\n\n  if (loading) {\n    return (\n      <>\n        <Header />\n        <Container>\n          <Content>\n            <HeadlineContainer>\n              <HeadlineAddressContainer>\n                <HeadlineAddressHeader>\n                  {`Address:  `}\n                  <HeadlineAddress>{address}</HeadlineAddress>\n                </HeadlineAddressHeader>\n              </HeadlineAddressContainer>\n            </HeadlineContainer>\n          </Content>\n        </Container>\n      </>\n    );\n  }\n  return (\n    <>\n      {modal && <QRModal onClose={onClose} address={address} />}\n      <Header />\n      <Container>\n        <Content>\n          <HeadlineContainer>\n            <HeadlineAddressContainer>\n              <HeadlineAddressHeader>\n                {`Address:  `}\n                <div>\n                  <HeadlineAddress>{toBech32(address)}</HeadlineAddress>\n                  <HeadlineAddress>{address}</HeadlineAddress>\n                </div>\n              </HeadlineAddressHeader>\n              <HeadlineAddressButton\n                onClick={() => {\n                  onClickCopy();\n                }}\n              >\n                <CopyButtonIcon />\n                <Tooltip>{copyTooltip}</Tooltip>\n              </HeadlineAddressButton>\n              <HeadlineAddressButton onClick={showModal}>\n                <QRButtonIcon />\n                <Tooltip>Click to copy QR code</Tooltip>\n              </HeadlineAddressButton>\n            </HeadlineAddressContainer>\n          </HeadlineContainer>\n          {balances ? <BalancesTable balances={Object.values(balances)} /> : null}\n          <div style={{ height: 16 }} />\n          <TransactionsTable transactions={transactions} />\n        </Content>\n      </Container>\n    </>\n  );\n}\n","export const trimAddress = (address: string) => {\n  if (!address) {\n    return '';\n  }\n\n  return `${address.slice(0, 6)}...${address.slice(-6, address.length - 1)}`;\n};\n","import type { BigNumberish } from '@ethersproject/bignumber';\nimport { commify, formatUnits, parseUnits } from '@ethersproject/units';\n\nexport const DECIMAL_UNITS = 9;\nexport const parseToFormattedNumber = (\n  value: string | BigNumberish,\n  unit: BigNumberish = DECIMAL_UNITS\n) => commify(formatUnits(value, unit));\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n"],"names":["Container","styled","Title","QRAddress","QRCodeContainer","QRModal","props","contentRef","useRef","useOnClickOutside","onClose","ref","address","value","fgColor","bgColor","TableContainer","TableHeadlineContainer","TableCounterText","TableHeadlineTitle","TableHeadlinerContentItem","TableWrapper","Table","TableHeadRow","TableHeadCell","TableRow","TableCell","bold","BalancesTable","balances","length","map","balance","trimAddress","assetId","parseToFormattedNumber","amount","TransactionsTable","transactions","transaction","to","id","isScript","status","getTextForRelativeTimeDifference","dateDiffRelative","Date","time","inputs","input","idx","__typename","owner","contract","defaultOptions","AddressPageCoinFragmentDoc","gql","AddressPageTransactionFragmentDoc","AddressPageQueryDocument","AddressPage","useParams","useState","copyTooltip","modal","setModal","baseOptions","options","Apollo","useAddressPageQuery","variables","first","loading","data","coins","edges","edge","node","reduce","acc","BigInt","useMemo","transactionsByOwner","Header","toBech32","onClick","navigator","clipboard","writeText","Object","values","style","height","slice","DECIMAL_UNITS","unit","commify","formatUnits","dateDiff","date1","date2","seconds","Math","floor","abs","getTime","minutes","hours","days","text","push","join","getTextForTimeDifference"],"sourceRoot":""}