{"version":3,"file":"static/js/569.1b5165c8.chunk.js","mappings":"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","sources":["components/Input/components.tsx","pages/HomePage/components.tsx","pages/HomePage/RecentBlocks.tsx","pages/HomePage/RecentTransactions.tsx","pages/HomePage/__generated__/operations.ts","pages/HomePage/index.tsx","utils/date.ts"],"sourcesContent":["import styled from 'styled-components';\n\nexport const InputReset = styled.input`\n  background-color: rgba(0, 0, 0, 0);\n  border: none;\n  color: #d1d4d7;\n  font-family: SFProDisplay;\n\n  ::placeholder {\n    color: #808080;\n    opacity: 1;\n  }\n`;\n","import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport { ButtonReset } from '../../components/Button/components';\nimport { ArrowIcon, SearchIcon as SearchSvg } from '../../components/Icons';\nimport { InputReset } from '../../components/Input/components';\n\nexport const Container = styled.section``;\n\nexport const Content = styled.div`\n  padding: 56px 32px 0;\n  width: 100%;\n  max-width: 1240px;\n  margin: 0 auto;\n\n  @media screen and (max-width: 425px) {\n    padding: 40px 24px;\n  }\n`;\n\nexport const InputContainer = styled.div`\n  position: relative;\n  width: 100%;\n  max-width: 700px;\n`;\n\nexport const Input = styled(InputReset)`\n  height: 40px;\n  width: 100%;\n  padding: 0 12px;\n  border: solid 1px #808080;\n  background-color: #192f2b;\n  outline: none;\n  font-size: 18px;\n  font-weight: 500;\n\n  :hover {\n    border: solid 1px #f9fefc;\n  }\n\n  :focus {\n    box-shadow: 0 0 2px 0 #58c09b;\n    border: solid 1px #58c09b;\n  }\n\n  @media screen and (max-width: 425px) {\n    font-size: 16px;\n  }\n`;\n\nexport const SearchIcon = styled(SearchSvg)<{ isDisabled?: boolean }>`\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n  right: 8px;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'auto' : 'pointer')};\n  color: ${({ isDisabled }) => (isDisabled ? 'gray' : 'white')};\n`;\n\nexport const SearchNotFound = styled.div`\n  position: absolute;\n  left: 14px;\n  top: 50px;\n`;\n\nexport const DataContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 48px 0;\n\n  @media screen and (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\nexport const DataItem = styled.div`\n  width: 48%;\n\n  @media screen and (max-width: 768px) {\n    width: 100%;\n\n    :first-of-type {\n      margin: 0 0 32px;\n    }\n  }\n`;\n\nexport const DataHeader = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nexport const DataTitle = styled.h2`\n  margin: 0 0 16px;\n  font-family: SFProDisplay;\n  font-size: 21px;\n  font-weight: 600;\n  color: #eafff8;\n`;\n\nexport const DataPagination = styled.div`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const DataPaginationTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n`;\n\nexport const DataPaginationText = styled.div`\n  font-family: SFProDisplay;\n  font-size: 16px;\n  color: #808080;\n`;\n\nexport const DataPaginationTextCurrentPage = styled(DataPaginationText)`\n  font-family: SFProDisplay;\n  font-size: 18px;\n  color: #eafff8;\n  margin-top: 2px;\n  margin-right: 2px;\n`;\n\nexport const ArrowRightIcon = styled(ArrowIcon)`\n  width: 10px !important;\n  height: 10px !important;\n`;\n\nexport const ArrowLeftIcon = styled(ArrowIcon)`\n  width: 10px !important;\n  height: 10px !important;\n  transform: rotate(180deg);\n`;\n\nexport const IconButton = styled(ButtonReset)<{ isDisabled?: boolean }>`\n  border-radius: 100%;\n  width: 30px;\n  height: 30px;\n  background-color: #081c17;\n  color: ${({ isDisabled }) => (isDisabled ? '#808080' : '#eafff8')};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  cursor: ${({ isDisabled }) => (isDisabled ? 'auto' : 'pointer')};\n\n  :hover {\n    ${({ isDisabled }) => (isDisabled ? '' : 'background-color: #1e2e2b;')}\n  }\n\n  :active {\n    ${({ isDisabled }) => (isDisabled ? '' : 'background-color: #294842;')}\n  }\n\n  @media screen and (max-width: 768px) {\n    width: 24px;\n    height: 24px;\n  }\n`;\n\nexport const IconButtonLeft = styled(IconButton)`\n  margin-right: 8px;\n\n  @media screen and (max-width: 768px) {\n    margin-right: 4px;\n  }\n`;\n\nexport const IconButtonRight = styled(IconButton)`\n  margin-left: 8px;\n\n  @media screen and (max-width: 768px) {\n    margin-left: 4px;\n  }\n`;\n\nexport const DataBox = styled.div`\n  border-radius: 12px;\n  border: solid 1px #808080;\n`;\n\nexport const DataBoxRow = styled.div`\n  display: flex;\n  border-bottom: solid 1px #21302d;\n\n  :last-of-type {\n    border-bottom: none;\n  }\n`;\n\nexport const RecentBlockRow = styled(DataBoxRow)`\n  padding: 22px 24px;\n`;\n\nexport const TransactionsDataBoxRow = styled(DataBoxRow)`\n  padding: 22px 24px 22px 0;\n\n  @media screen and (max-width: 1000px) {\n    flex-direction: column;\n  }\n`;\n\nexport const DataBoxColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DataTimestamp = styled.span`\n  font-family: SFProText;\n  font-size: 10px;\n  font-weight: 500;\n  font-style: normal;\n  color: #808080;\n`;\n\nexport const ProducerRow = styled.div`\n  display: flex;\n`;\n\nexport const DataLabel = styled.span`\n  display: flex;\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #808080;\n  white-space: pre;\n`;\n\nexport const BlockProducerText = styled.span`\n  display: flex;\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #808080;\n  white-space: pre;\n  max-width: 204px;\n`;\n\nexport const BaseLink = styled(Link)`\n  font-family: SFProText;\n  font-size: 15px;\n  line-height: 18px;\n  font-weight: normal;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const ProducerAddress = styled(BaseLink)`\n  display: block;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n\nexport const BlockNumber = styled(Link)`\n  margin: 0 0 2px 0;\n  font-family: SFProText;\n  font-size: 21px;\n  line-height: 24px;\n  font-weight: normal;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TxCount = styled(BaseLink)``;\n\nexport const TxType = styled.span`\n  padding: 2px 8px;\n  margin: 4px 0 0;\n  height: 20px;\n  border-radius: 10px;\n  background-color: #f9fefc;\n  font-family: SFProText;\n  font-size: 13px;\n  line-height: 16px;\n  font-weight: 600;\n  color: #021d17;\n`;\n\nexport const TransactionAddress = styled(Link)`\n  display: block;\n  margin: 0 0 4px;\n  font-family: SFProText;\n  font-size: 15px;\n  font-weight: 500;\n  color: #58c09b;\n  cursor: pointer;\n  transition: 0.2s ease-out;\n  text-overflow: ellipsis;\n  overflow: hidden;\n\n  :hover {\n    text-shadow: 0 0 6px #58c09b;\n  }\n\n  :active {\n    text-shadow: 0 0 6px #4fad83;\n    color: #4fad83;\n  }\n`;\n\nexport const TransactionRecipientLabel = styled(DataLabel)`\n  font-weight: 500;\n`;\n\nexport const TransactionRecipientLink = styled(BaseLink)`\n  margin: 0 0 2px;\n  font-weight: 500;\n  text-overflow: ellipsis;\n  display: block;\n  overflow: hidden;\n`;\n\nexport const TransactionTypeColumn = styled(DataBoxColumn)`\n  margin: 0 0 0 20px;\n`;\n\nexport const TransactionHashColumn = styled(DataBoxColumn)`\n  max-width: 124px;\n  margin: 0 0 0 20px;\n  overflow: hidden;\n\n  @media screen and (max-width: 1000px) {\n    max-width: 400px;\n  }\n`;\n\nexport const TransactionRecipientsColumn = styled.div`\n  margin: 0 0 0 24px;\n  display: flex;\n  justify-content: space-between;\n  flex-grow: 1;\n  overflow: hidden;\n\n  @media screen and (max-width: 1000px) {\n    margin: 16px 0 0 24px;\n  }\n\n  @media screen and (max-width: 768px) {\n    max-width: 400px;\n  }\n`;\n\nexport const TransactionRecipientsWrapper = styled.div`\n  width: 45%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const RecentBlockColumn1 = styled(DataBoxColumn)`\n  flex: 1 1 0;\n  max-width: 124px;\n`;\n\nexport const RecentBlockColumn2 = styled(DataBoxColumn)`\n  flex: 1 1 0;\n  padding: 0 0 0 16px;\n  overflow: hidden;\n`;\n\nexport const TransactionRowColumn = styled.div`\n  display: flex;\n`;\n","import { useMemo, useState } from 'react';\n\nimport { dateDiff } from '../../utils/date';\n\nimport type { HomePageBlock } from './__generated__/operations';\nimport {\n  BlockNumber,\n  RecentBlockColumn1,\n  RecentBlockColumn2,\n  RecentBlockRow,\n  DataBox,\n  DataItem,\n  DataTimestamp,\n  DataTitle,\n  ProducerAddress,\n  TxCount,\n  BlockProducerText,\n} from './components';\n\ntype Props = {\n  blocks: HomePageBlock[];\n};\n\nexport function RecentBlocks({ blocks }: Props) {\n  const [now] = useState(new Date());\n\n  return (\n    <DataItem>\n      <DataTitle>Recent Blocks</DataTitle>\n      <DataBox>\n        {blocks.map((block) => (\n          <RecentBlockRow key={block.id}>\n            <RecentBlockColumn1>\n              <BlockNumber id=\"recent-block-link\" to={`/block/${block.height}`}>\n                {block.height}\n              </BlockNumber>\n              <BlockTimestamp date1={now} date2={new Date(block.time)} />\n            </RecentBlockColumn1>\n            <RecentBlockColumn2>\n              <BlockProducerText>\n                {`Producer: `}\n                <ProducerAddress id=\"recent-block-producer-link\" to={`/address/${block.producer}`}>\n                  {block.producer}\n                </ProducerAddress>\n              </BlockProducerText>\n              <TxCount\n                id=\"recent-block-transactions-link\"\n                to={`/block/${block.height}/transactions`}\n              >{`${block.transactions?.length} txn(s)`}</TxCount>\n            </RecentBlockColumn2>\n          </RecentBlockRow>\n        ))}\n      </DataBox>\n    </DataItem>\n  );\n}\n\nfunction BlockTimestamp({ date1, date2 }: { date1: Date; date2: Date }) {\n  const difference = useMemo(() => dateDiff(date1, date2), [date1, date2]);\n  // eslint-disable-next-line consistent-return\n  const text = useMemo(() => {\n    if (difference?.hours > 0) return `${difference.hours} hours ago`;\n    if (difference?.minutes > 0) return `${difference.minutes} minutes ago`;\n    if (difference?.seconds > 0) return `${difference.seconds} seconds ago`;\n  }, [difference]);\n\n  return <DataTimestamp>{text}</DataTimestamp>;\n}\n","import { useMemo, useState, Fragment } from 'react';\n\nimport type { PageInfo } from '../../api/__generated__/types';\nimport { dateDiff, getTextForTimeDifference } from '../../utils/date';\n\nimport type { HomePageTransaction } from './__generated__/operations';\nimport {\n  DataTimestamp,\n  DataBox,\n  DataItem,\n  DataTitle,\n  TxType,\n  TransactionAddress,\n  TransactionRecipientLabel,\n  TransactionRecipientLink,\n  TransactionTypeColumn,\n  TransactionHashColumn,\n  TransactionRecipientsColumn,\n  TransactionRecipientsWrapper,\n  TransactionsDataBoxRow,\n  TransactionRowColumn,\n  DataHeader,\n  DataPagination,\n  DataPaginationText,\n  DataPaginationTextCurrentPage,\n  ArrowRightIcon,\n  ArrowLeftIcon,\n  IconButtonLeft,\n  IconButtonRight,\n  DataPaginationTextWrapper,\n} from './components';\n\ntype Props = {\n  transactions: HomePageTransaction[];\n  loading: boolean;\n  onNextPage: () => void;\n  onPrevPage: () => void;\n  pageInfo?: PageInfo;\n  currentPage: number;\n};\n\ntype Ouputs = HomePageTransaction['outputs'];\nconst PAGE_LIMIT = 5;\n\nexport function RecentTransactions({\n  transactions,\n  loading,\n  onNextPage,\n  onPrevPage,\n  pageInfo,\n  currentPage,\n}: Props) {\n  const sortedTransactions = transactions.sort((t1, t2) =>\n    new Date(t1.status!.time).getTime() - new Date(t2.status!.time).getTime() <= 0 ? 1 : -1\n  );\n\n  const isPrevPageClickable = currentPage > 1 && pageInfo?.hasPreviousPage && !loading;\n  const isNextPageClickable = pageInfo?.hasNextPage && !loading;\n\n  return (\n    <DataItem>\n      <DataHeader>\n        <DataTitle>Recent Transactions</DataTitle>\n        <DataPagination>\n          <IconButtonLeft\n            isDisabled={!isPrevPageClickable}\n            onClick={isPrevPageClickable ? onPrevPage : undefined}\n          >\n            <ArrowLeftIcon />\n          </IconButtonLeft>\n          <DataPaginationTextWrapper>\n            <DataPaginationTextCurrentPage>{currentPage}</DataPaginationTextCurrentPage>\n          </DataPaginationTextWrapper>\n          <IconButtonRight\n            isDisabled={!isNextPageClickable}\n            onClick={isNextPageClickable ? onNextPage : undefined}\n          >\n            <ArrowRightIcon />\n          </IconButtonRight>\n        </DataPagination>\n      </DataHeader>\n      <DataBox>\n        {sortedTransactions.map((transaction) => (\n          <TransactionRow key={transaction.id} transaction={transaction} />\n        ))}\n      </DataBox>\n    </DataItem>\n  );\n}\n\nfunction TransactionRow({ transaction }: { transaction: HomePageTransaction }) {\n  const difference = useMemo(\n    () => dateDiff(new Date(), new Date(transaction.status!.time)),\n    [transaction]\n  );\n  const timestamp = useMemo(() => getTextForTimeDifference(difference), [difference]);\n\n  return (\n    <TransactionsDataBoxRow key={transaction.id}>\n      <TransactionRowColumn>\n        <TransactionTypeColumn>\n          <TxType>{transaction.isScript ? 'Script' : 'Create'}</TxType>\n        </TransactionTypeColumn>\n        <TransactionHashColumn>\n          <TransactionAddress id=\"recent-transaction-link\" to={`/transaction/${transaction.id}`}>\n            {transaction.id}\n          </TransactionAddress>\n          <DataTimestamp>{timestamp}</DataTimestamp>\n        </TransactionHashColumn>\n      </TransactionRowColumn>\n      <TransactionRecipientsColumn>\n        <TransactionRecipientsWrapper>\n          {transaction.inputs.map(\n            (input) =>\n              input.__typename === 'InputCoin' && (\n                <Fragment key={input.owner}>\n                  <TransactionRecipientLabel>From:</TransactionRecipientLabel>\n                  {input.__typename}\n                  <TransactionRecipientLink to={`/address/${input.owner}`}>\n                    {input.owner}\n                  </TransactionRecipientLink>\n                </Fragment>\n              )\n          )}\n        </TransactionRecipientsWrapper>\n        <TransactionRecipientsWrapper>\n          {transaction.outputs.map(\n            (output) =>\n              (output.__typename === 'ChangeOutput' ||\n                output.__typename === 'CoinOutput' ||\n                output.__typename === 'VariableOutput' ||\n                output.__typename === 'WithdrawalOutput') && (\n                <Fragment key={output.assetId + output.to}>\n                  <TransactionRecipientLabel>To:</TransactionRecipientLabel>\n                  {output.__typename}\n                  <TransactionRecipientLink to={`/address/${output.to}`}>\n                    {output.to}\n                  </TransactionRecipientLink>\n                </Fragment>\n              )\n          )}\n        </TransactionRecipientsWrapper>\n      </TransactionRecipientsColumn>\n    </TransactionsDataBoxRow>\n  );\n}\n","import type * as Types from '../../../api/__generated__/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type HomePageTransactionsQueryVariables = Types.Exact<{\n  last?: Types.InputMaybe<Types.Scalars['Int']>;\n  first?: Types.InputMaybe<Types.Scalars['Int']>;\n  before?: Types.InputMaybe<Types.Scalars['String']>;\n  after?: Types.InputMaybe<Types.Scalars['String']>;\n}>;\n\n\nexport type HomePageTransactionsQuery = { __typename: 'Query', transactions: { __typename: 'TransactionConnection', pageInfo: { __typename: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor?: string | null, endCursor?: string | null }, edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null } }> } };\n\nexport type HomePageBlocksQueryVariables = Types.Exact<{\n  count?: Types.InputMaybe<Types.Scalars['Int']>;\n}>;\n\n\nexport type HomePageBlocksQuery = { __typename: 'Query', blocks: { __typename: 'BlockConnection', edges: Array<{ __typename: 'BlockEdge', cursor: string, node: { __typename: 'Block', id: string, height: string, time: string, producer: string, transactions: Array<{ __typename: 'Transaction', id: string }> } }> } };\n\nexport type HomePageSearchQueryVariables = Types.Exact<{\n  transaction: Types.Scalars['TransactionId'];\n  address: Types.Scalars['Address'];\n}>;\n\n\nexport type HomePageSearchQuery = { __typename: 'Query', transaction?: { __typename: 'Transaction', id: string } | null, transactionsByOwner: { __typename: 'TransactionConnection', edges: Array<{ __typename: 'TransactionEdge', node: { __typename: 'Transaction', id: string } }> } };\n\nexport type HomePageBlock = { __typename: 'Block', id: string, height: string, time: string, producer: string, transactions: Array<{ __typename: 'Transaction', id: string }> };\n\nexport type HomePageTransaction = { __typename: 'Transaction', id: string, inputAssetIds: Array<string>, gasPrice: string, gasLimit: string, maturity: string, isScript: boolean, receiptsRoot?: string | null, witnesses: Array<string>, inputContracts: Array<{ __typename: 'Contract', id: string }>, outputs: Array<{ __typename: 'ChangeOutput', to: string, amount: string, assetId: string } | { __typename: 'CoinOutput', to: string, amount: string, assetId: string } | { __typename: 'ContractCreated', contract: { __typename: 'Contract', id: string } } | { __typename: 'ContractOutput', inputIndex: number, balanceRoot: string, stateRoot: string } | { __typename: 'VariableOutput', to: string, amount: string, assetId: string } | { __typename: 'WithdrawalOutput', to: string, amount: string, assetId: string }>, inputs: Array<{ __typename: 'InputCoin', owner: string } | { __typename: 'InputContract', contract: { __typename: 'Contract', id: string } }>, status?: { __typename: 'FailureStatus', time: string } | { __typename: 'SubmittedStatus', time: string } | { __typename: 'SuccessStatus', time: string } | null };\n\nexport const HomePageBlockFragmentDoc = gql`\n    fragment HomePageBlock on Block {\n  id\n  height\n  time\n  producer\n  transactions {\n    id\n  }\n}\n    `;\nexport const HomePageTransactionFragmentDoc = gql`\n    fragment HomePageTransaction on Transaction {\n  id\n  inputContracts {\n    id\n  }\n  inputAssetIds\n  gasPrice\n  gasLimit\n  maturity\n  isScript\n  receiptsRoot\n  witnesses\n  outputs {\n    __typename\n    ... on CoinOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractOutput {\n      inputIndex\n      balanceRoot\n      stateRoot\n    }\n    ... on WithdrawalOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ChangeOutput {\n      to\n      amount\n      assetId\n    }\n    ... on VariableOutput {\n      to\n      amount\n      assetId\n    }\n    ... on ContractCreated {\n      contract {\n        id\n      }\n    }\n  }\n  inputs {\n    __typename\n    ... on InputCoin {\n      owner\n    }\n    ... on InputContract {\n      contract {\n        id\n      }\n    }\n  }\n  status {\n    ... on SubmittedStatus {\n      time\n    }\n    ... on SuccessStatus {\n      time\n    }\n    ... on FailureStatus {\n      time\n    }\n  }\n}\n    `;\nexport const HomePageTransactionsQueryDocument = gql`\n    query HomePageTransactionsQuery($last: Int, $first: Int, $before: String, $after: String) {\n  transactions(first: $first, last: $last, before: $before, after: $after) {\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        ...HomePageTransaction\n      }\n    }\n  }\n}\n    ${HomePageTransactionFragmentDoc}`;\n\n/**\n * __useHomePageTransactionsQuery__\n *\n * To run a query within a React component, call `useHomePageTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomePageTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomePageTransactionsQuery({\n *   variables: {\n *      last: // value for 'last'\n *      first: // value for 'first'\n *      before: // value for 'before'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useHomePageTransactionsQuery(baseOptions?: Apollo.QueryHookOptions<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>(HomePageTransactionsQueryDocument, options);\n      }\nexport function useHomePageTransactionsQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>(HomePageTransactionsQueryDocument, options);\n        }\nexport type HomePageTransactionsQueryHookResult = ReturnType<typeof useHomePageTransactionsQuery>;\nexport type HomePageTransactionsQueryLazyQueryHookResult = ReturnType<typeof useHomePageTransactionsQueryLazyQuery>;\nexport type HomePageTransactionsQueryQueryResult = Apollo.QueryResult<HomePageTransactionsQuery, HomePageTransactionsQueryVariables>;\nexport const HomePageBlocksQueryDocument = gql`\n    query HomePageBlocksQuery($count: Int) {\n  blocks(last: $count) {\n    edges {\n      cursor\n      node {\n        ...HomePageBlock\n      }\n    }\n  }\n}\n    ${HomePageBlockFragmentDoc}`;\n\n/**\n * __useHomePageBlocksQuery__\n *\n * To run a query within a React component, call `useHomePageBlocksQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomePageBlocksQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomePageBlocksQuery({\n *   variables: {\n *      count: // value for 'count'\n *   },\n * });\n */\nexport function useHomePageBlocksQuery(baseOptions?: Apollo.QueryHookOptions<HomePageBlocksQuery, HomePageBlocksQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HomePageBlocksQuery, HomePageBlocksQueryVariables>(HomePageBlocksQueryDocument, options);\n      }\nexport function useHomePageBlocksQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageBlocksQuery, HomePageBlocksQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HomePageBlocksQuery, HomePageBlocksQueryVariables>(HomePageBlocksQueryDocument, options);\n        }\nexport type HomePageBlocksQueryHookResult = ReturnType<typeof useHomePageBlocksQuery>;\nexport type HomePageBlocksQueryLazyQueryHookResult = ReturnType<typeof useHomePageBlocksQueryLazyQuery>;\nexport type HomePageBlocksQueryQueryResult = Apollo.QueryResult<HomePageBlocksQuery, HomePageBlocksQueryVariables>;\nexport const HomePageSearchQueryDocument = gql`\n    query HomePageSearchQuery($transaction: TransactionId!, $address: Address!) {\n  transaction(id: $transaction) {\n    id\n  }\n  transactionsByOwner(owner: $address, first: 1) {\n    edges {\n      node {\n        id\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useHomePageSearchQuery__\n *\n * To run a query within a React component, call `useHomePageSearchQuery` and pass it any options that fit your needs.\n * When your component renders, `useHomePageSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useHomePageSearchQuery({\n *   variables: {\n *      transaction: // value for 'transaction'\n *      address: // value for 'address'\n *   },\n * });\n */\nexport function useHomePageSearchQuery(baseOptions: Apollo.QueryHookOptions<HomePageSearchQuery, HomePageSearchQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<HomePageSearchQuery, HomePageSearchQueryVariables>(HomePageSearchQueryDocument, options);\n      }\nexport function useHomePageSearchQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<HomePageSearchQuery, HomePageSearchQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<HomePageSearchQuery, HomePageSearchQueryVariables>(HomePageSearchQueryDocument, options);\n        }\nexport type HomePageSearchQueryHookResult = ReturnType<typeof useHomePageSearchQuery>;\nexport type HomePageSearchQueryLazyQueryHookResult = ReturnType<typeof useHomePageSearchQueryLazyQuery>;\nexport type HomePageSearchQueryQueryResult = Apollo.QueryResult<HomePageSearchQuery, HomePageSearchQueryVariables>;","import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport type { PageInfo } from '../../api/__generated__/types';\nimport { Header } from '../../components/Header';\n\nimport { RecentBlocks } from './RecentBlocks';\nimport { RecentTransactions } from './RecentTransactions';\nimport type { HomePageBlock, HomePageTransaction } from './__generated__/operations';\nimport {\n  useHomePageBlocksQuery,\n  useHomePageTransactionsQuery,\n  useHomePageSearchQuery,\n} from './__generated__/operations';\nimport {\n  Container,\n  Content,\n  DataContainer,\n  Input,\n  InputContainer,\n  SearchIcon,\n  SearchNotFound,\n} from './components';\n\nconst PAGE_LIMIT = 5;\n\nexport default function HomePage() {\n  const [blocks, setBlocks] = useState<HomePageBlock[]>([]);\n  const [transactions, setTransactions] = useState<HomePageTransaction[]>([]);\n  const [pageInfo, setPageInfo] = useState<PageInfo>();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [searchText, setSearchText] = useState<string>('');\n  const [isSearchNotFound, setIsSearchNotFound] = useState(false);\n  const transactionsQuery = useHomePageTransactionsQuery({\n    variables: { last: PAGE_LIMIT },\n  });\n  const blocksQuery = useHomePageBlocksQuery({ variables: { count: 5 } });\n  const searchQuery = useHomePageSearchQuery({\n    variables: { transaction: '', address: '' },\n    fetchPolicy: 'network-only',\n  });\n  const navigate = useNavigate();\n\n  const isAllowedToSearch = searchText.length === 66;\n\n  useEffect(() => {\n    if (blocksQuery.loading) return;\n    if (blocksQuery.error) return;\n    const edges: any[] = blocksQuery.data?.blocks?.edges || [];\n    const blocks: HomePageBlock[] = edges.map((edge) => edge.node);\n    setBlocks(blocks);\n  }, [blocksQuery.loading, blocksQuery.error, blocksQuery.data]);\n\n  useEffect(() => {\n    if (transactionsQuery.loading) return;\n    if (transactionsQuery.error) return;\n    const edges: any[] = transactionsQuery.data?.transactions?.edges || [];\n    const transactions: HomePageTransaction[] = edges.map((edge) => edge.node);\n    setTransactions(transactions);\n    setPageInfo(transactionsQuery.data?.transactions?.pageInfo);\n  }, [transactionsQuery.loading, transactionsQuery.data, transactionsQuery.error]);\n\n  const handleNextPage = () => {\n    transactionsQuery.refetch({\n      before: pageInfo?.startCursor,\n      after: undefined,\n      last: PAGE_LIMIT,\n      first: undefined,\n    });\n    setCurrentPage(currentPage + 1);\n  };\n\n  const handlePrevPage = () => {\n    transactionsQuery.refetch({\n      after: pageInfo?.endCursor,\n      before: undefined,\n      last: undefined,\n      first: PAGE_LIMIT,\n    });\n    setCurrentPage(currentPage - 1);\n  };\n\n  const handleClickSearch = async () => {\n    if (isAllowedToSearch && searchText) {\n      const result = await searchQuery.refetch({\n        transaction: searchText,\n        address: searchText,\n      });\n\n      if (result.data?.transaction?.id) {\n        navigate(`/transaction/${searchText}`);\n      } else if (result.data?.transactionsByOwner?.edges?.length) {\n        navigate(`/address/${searchText}`);\n      } else {\n        setIsSearchNotFound(true);\n        setTimeout(() => setIsSearchNotFound(false), 1500);\n      }\n    }\n  };\n\n  const handleSearchKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      handleClickSearch();\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <Content>\n          <InputContainer>\n            <Input\n              placeholder=\"Search for transaction / address\"\n              onChange={(e) => setSearchText(e?.target?.value)}\n              onKeyPress={handleSearchKeyPress}\n            />\n            <SearchIcon\n              isDisabled={!isAllowedToSearch}\n              onClick={isAllowedToSearch ? handleClickSearch : undefined}\n            />\n            {isSearchNotFound && <SearchNotFound>Not Found</SearchNotFound>}\n          </InputContainer>\n          <DataContainer>\n            <RecentBlocks blocks={blocks} />\n            <RecentTransactions\n              transactions={transactions}\n              loading={transactionsQuery.loading}\n              pageInfo={pageInfo}\n              onNextPage={handleNextPage}\n              onPrevPage={handlePrevPage}\n              currentPage={currentPage}\n            />\n          </DataContainer>\n        </Content>\n      </Container>\n    </>\n  );\n}\n","type DateDifference = {\n  seconds: number;\n  minutes: number;\n  hours: number;\n  days: number;\n};\n\nexport const dateDiff = (date1: Date, date2: Date): DateDifference => {\n  const seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  // hours = hours - (days * 24);\n  // minutes = minutes - (days * 24 * 60) - (hours * 60);\n  // seconds = seconds - (days * 24 * 60 * 60) - (hours * 60 * 60) - (minutes * 60);\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const dateDiffRelative = (date1: Date, date2: Date): DateDifference => {\n  let seconds = Math.floor(Math.abs(date1.getTime() - date2.getTime()) / 1000);\n  let minutes = Math.floor(seconds / 60);\n  let hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  hours -= days * 24;\n  minutes = minutes - days * 24 * 60 - hours * 60;\n  seconds = seconds - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n\n  return { seconds, minutes, hours, days };\n};\n\nexport const getTextForRelativeTimeDifference = (dateDiff: DateDifference) => {\n  const text: string[] = [];\n\n  if (dateDiff.days > 0) text.push(`${dateDiff.days} days`);\n  if (dateDiff.hours > 0) text.push(`${dateDiff.hours} hrs`);\n  if (dateDiff.minutes > 0) text.push(`${dateDiff.minutes} min`);\n  if (dateDiff.seconds > 0) text.push(`${dateDiff.seconds} sec`);\n\n  return `${text.slice(0, 2).join(' ')} ago`;\n};\n\nexport const getTextForTimeDifference = (dateDiff: DateDifference) => {\n  if (dateDiff.days > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.hours > 0) return `${dateDiff.hours} hours ago`;\n  if (dateDiff.minutes > 0) return `${dateDiff.minutes} minutes ago`;\n  if (dateDiff.seconds > 0) return `${dateDiff.seconds} seconds ago`;\n\n  return '';\n};\n"],"names":["InputReset","styled","Container","Content","InputContainer","Input","SearchIcon","SearchSvg","isDisabled","SearchNotFound","DataContainer","DataItem","DataHeader","DataTitle","DataPagination","DataPaginationTextWrapper","DataPaginationText","DataPaginationTextCurrentPage","ArrowRightIcon","ArrowIcon","ArrowLeftIcon","IconButton","ButtonReset","IconButtonLeft","IconButtonRight","DataBox","DataBoxRow","RecentBlockRow","TransactionsDataBoxRow","DataBoxColumn","DataTimestamp","DataLabel","BlockProducerText","BaseLink","Link","ProducerAddress","BlockNumber","TxCount","TxType","TransactionAddress","TransactionRecipientLabel","TransactionRecipientLink","TransactionTypeColumn","TransactionHashColumn","TransactionRecipientsColumn","TransactionRecipientsWrapper","RecentBlockColumn1","RecentBlockColumn2","TransactionRowColumn","RecentBlocks","blocks","useState","Date","now","map","block","id","to","height","BlockTimestamp","date1","date2","time","producer","transactions","length","difference","useMemo","dateDiff","text","hours","minutes","seconds","RecentTransactions","loading","onNextPage","onPrevPage","pageInfo","currentPage","sortedTransactions","sort","t1","t2","status","getTime","isPrevPageClickable","hasPreviousPage","isNextPageClickable","hasNextPage","onClick","undefined","transaction","TransactionRow","timestamp","getTextForTimeDifference","isScript","inputs","input","__typename","Fragment","owner","outputs","output","assetId","defaultOptions","HomePageBlockFragmentDoc","gql","HomePageTransactionFragmentDoc","HomePageTransactionsQueryDocument","HomePageBlocksQueryDocument","HomePageSearchQueryDocument","HomePage","setBlocks","setTransactions","setPageInfo","setCurrentPage","searchText","setSearchText","isSearchNotFound","setIsSearchNotFound","transactionsQuery","baseOptions","options","Apollo","useHomePageTransactionsQuery","variables","last","blocksQuery","useHomePageBlocksQuery","count","searchQuery","useHomePageSearchQuery","address","fetchPolicy","navigate","useNavigate","isAllowedToSearch","useEffect","error","data","edges","edge","node","handleClickSearch","refetch","result","transactionsByOwner","setTimeout","Header","placeholder","onChange","e","target","value","onKeyPress","key","preventDefault","before","startCursor","after","first","endCursor","Math","floor","abs","days","dateDiffRelative","getTextForRelativeTimeDifference","push","slice","join"],"sourceRoot":""}